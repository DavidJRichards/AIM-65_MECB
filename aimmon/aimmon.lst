0001   0000             ;TELEMARK CROSS ASSEMBLER (TASM)  http://www.halcyon.com/squakvly/
0002   0000             ; wine ./TASM.EXE -65 -s -g0  aimmon.asm aimmon.hex 
0003   0000             ; sort -k2 < aimmon.sym >aimmon-sort.sym
0004   0000             ; srec_cat  aimmon.hex -Intel -offset -0xe000 -o aimmon.bin -Binary 
0005   0000             ; cat aimmon.bin > /dev/ttyS0
0006   0000             ;***************************************************
0007   0000             ;***************************************************
0008   0000             ;**                                               **
0009   0000             ;**                               PL-PA00-JOO1A   **
0010   0000             ;**                                               **
0011   0000             ;**     ROCKWELL R6500 MICROCOMPUTER SYSTEM       **
0012   0000             ;**                                               **
0013   0000             ;**               AIM 65 MONITOR                  **
0014   0000             ;**                                               **
0015   0000             ;**              PROGRAM LISTING                  **
0016   0000             ;**                                               **
0017   0000             ;**   REVISION A                   AUG 22, 1978   **
0018   0000             ;**   djrm MECB                                   **
0019   0000             ;***************************************************
0020   0000             ;***************************************************
0021   0000             ;       *=$1ffe
0022   0000             ;       .db $00, $20
0023   0000             
0024   0000             MECBIO          = $A400
0025   0000             MECB_USER       = MECBIO + $B0 ; 6522 $A000
0026   0000             MECB_RAM        = MECBIO + $00 ; 6532 $A400
0027   0000             MECB_KEYBOARD   = MECBIO + $E0 ; 6532 $A480
0028   0000             MECB_VIA        = MECBIO + $C0 ; 6522 $A800
0029   0000             MECB_DISPLAY    = MECBIO + $D0 ; 6520 $AC00
0030   0000             MECB_ACIA       = MECBIO + $D8 ; 6551 used in mecb_bios
0031   0000             MECB_SPARE      = MECBIO + $A0 ;  not used
0032   0000             
0033   0000             BIOS_START      = $A800
0034   0000             BIOS_INIT       = BIOS_START + $8
0035   0000             
0036   0000             ;ROCKWELL INTERNATIONAL
0037   0000             ;MICROELECTRONIC DEVICES
0038   0000             ;3310 MIRALOMA AVENUE
0039   0000             ;P. O. BOX 3669
0040   0000             ;ANAHEIM CA U.S.A. 92803
0041   0000             
0042   0000             ;     **************************************
0043   0000             ;     *  USER 6522 ADDRESSES (A000-A00F)   *
0044   0000             ;     **************************************
0045   A4B0                    *=MECB_USER
0046   A4B0             UDRB   .BLOCK 1        ;DATA REG B
0047   A4B1             UDRAH  .BLOCK 1        ;DATA REG A
0048   A4B2             UDDRB  .BLOCK 1        ;DATA DIR REG B
0049   A4B3             UDDRA  .BLOCK 1        ;DATA DIR REG A
0050   A4B4             UT1L   .BLOCK 1        ;TIMER 1 COUNTER LOW
0051   A4B5             UT1CH  .BLOCK 1        ;TIMER 1 COUNTER HIGH
0052   A4B6             UT1LL  .BLOCK 1        ;TIMER 1 LATCH LOW
0053   A4B7             UT1LH  .BLOCK 1        ;TIMER 1 LATCH HIGH
0054   A4B8             UT2L   .BLOCK 1        ;TIMER 2 LATCH & COUNTER LOW
0055   A4B9             UT2H   .BLOCK 1        ;TIMER 2 COUNTER HIGH
0056   A4BA             USR    .BLOCK 1        ;SHIFT REGISTER
0057   A4BB             UACR   .BLOCK 1        ;AUX CONTROL REGISTER
0058   A4BC             UPCR   .BLOCK 1        ;PERIPHERAL CONTROL REGISTER
0059   A4BD             UIFR   .BLOCK 1        ;INTERRUPT FLAG REGISTER
0060   A4BE             UIER   .BLOCK 1        ;INTERRUPT ENABLE REGISTER
0061   A4BF             UDRA   .BLOCK 1        ;DATA REGISTER A
0062   A4C0             
0063   A4C0             ASSEM  =$D000          ;ASSEMBLER ENTRY
0064   A4C0             BASIEN =$B000          ;BASIC ENTRY (COLD)
0065   A4C0             BASIRE =$B003          ;BASIC ENTRY (WARM)
0066   A4C0             
0067   A4C0             ;      MONITOR RAM
0068   A4C0             ;TEXT EDITOR EQUATES (PAG 0)
0069   A4C0             ;OVERLAPS TABUF2+50 (TAPE OUTPUT BUFFER $AD-$FF)
0070   00DF                    *=$00DF
0071   00DF             NOWLN  .BLOCK 2        ;CURRENT LINE
0072   00E1             BOTLN  .BLOCK 2        ;LAST ACTIVE , SO FAR
0073   00E3             TEXT   .BLOCK 2        ;LIMITS OF BUFFER (START)
0074   00E5             END    .BLOCK 2        ;LIMITS OF BUFFER (END)
0075   00E7             SAVE   .BLOCK 2        ;USED BY REPLACE
0076   00E9             OLDLEN .BLOCK 1        ;ORIG LENGTH
0077   00EA             LENGTH .BLOCK 1        ;NEW LENGTH
0078   00EB             STRING .BLOCK 20       ;FIND STRING
0079   00FF             
0080   0100                    *=$0100
0081   0100             ;BREAKPOINTS AND USER I/O HANDLERS
0082   0100             BKS    .BLOCK 8        ;BRK LOCATIONS
0083   0108             UIN    .BLOCK 2        ;USER INPUT HANDLER (VECTOR)
0084   010A             UOUT   .BLOCK 2        ;USER OUTPUT HANDLER (VECTOR)
0085   010C             
0086   010C             ;UNUSED KEYS TO GO TO USER ROUTINE
0087   010C             KEYF1  .BLOCK 3        ;USER PUTS A JMP INSTRUCTION TO...
0088   010F             KEYF2  .BLOCK 3        ;GO TO HIS ROUTINE ON EITHER KEY..
0089   0112             KEYF3  .BLOCK 3        ;ENTRY
0090   0115             
0091   0115             ;EQUATES FOR DISASSEMBLER (PAG 1)
0092   0116                    *=$0116         ;SAME AS TAPE BUFFER I/O (TABUFF)
0093   0116             FORMA  .BLOCK 1
0094   0117             LMNEM  .BLOCK 1
0095   0118             RMNEM  .BLOCK 14
0096   0126             
0097   0126             ;EQUATES FOR MNEMONIC ENTRY
0098   0126             MOVAD  .BLOCK 8
0099   012E             TYPE   .BLOCK 2
0100   0130             TMASK1 =MOVAD
0101   0130             TMASK2 =MOVAD+1
0102   0130             CH     .BLOCK 3
0103   0133             ADFLD  .BLOCK 20
0104   0147             ;HISTM  =$A42E          ;SHARE WITH NAME & HIST
0105   0147             ;BYTESM =HISTM+1
0106   0147             ;TEMPX  =HISTM+3
0107   0147             ;TEMPA  =HISTM+5
0108   0147             ;OPCODE =HISTM+6
0109   0147             ;CODFLG =HISTM+9
0110   0147             
0111   0147             ;      **********************************
0112   0147             ;      *  6532 ADDRESSES (A400-A7FF)    *
0113   0147             ;      **********************************
0114   A400                    *=MECB_RAM ; 6532 RAM 00-7F
0115   A400             MONRAM *=*
0116   A400             ;JUMP VECTORS
0117   A400             IRQV4  .BLOCK 2        ;IRQ AFTER MONITOR (NO BRK)
0118   A402             NMIV2  .BLOCK 2        ;NMI
0119   A404             IRQV2  .BLOCK 2        ;IRQ
0120   A406             
0121   A406             ;I/O DEVICES
0122   A406             DILINK .BLOCK 2        ;DISPL LINKAGE (TO ECHO TO DISP)
0123   A408             TSPEED .BLOCK 1        ;TAPE SPEED (C7,5B,5A)
0124   A409             GAP    .BLOCK 1        ;TIMING GAP BETWEEN BLOCKS
0125   A40A             ;END OF USER ALTERABLE LOCATIONS
0126   A40A             NPUL   .BLOCK 1        ;# OF HALF PULSES...
0127   A40B             TIMG   .BLOCK 3        ;FOR TAPE
0128   A40E             REGF   .BLOCK 1        ;REGS FLG FOR SINGLE STEP MODE
0129   A40F             DISFLG .BLOCK 1        ;DISASSEM FLG FOR SINGLE STEP MODE
0130   A410             BKFLG  .BLOCK 1        ;ENABLE OR DIS BREAKPOINTS
0131   A411             PRIFLG .BLOCK 1        ;ENABLE OR DIS PRINTER
0132   A412             INFLG  .BLOCK 1        ;INPUT DEVICE
0133   A413             OUTFLG .BLOCK 1        ;OUTPUT DEVICE
0134   A414             HISTP  .BLOCK 1        ;HISTORY PTR (SINGLE STEP) (Y)
0135   A415             CURPO2 .BLOCK 1        ;DISPLAY POINTER
0136   A416             CURPOS .BLOCK 1        ;PRINTER POINTER
0137   A417             CNTH30 .BLOCK 1        ;BAUD RATE &...
0138   A418             CNTL30 .BLOCK 1        ;DELAY FOR TTY
0139   A419             COUNT  .BLOCK 1        ;# OF LINES (0-99)
0140   A41A             S1     .BLOCK 2        ;START ADDRESS
0141   A41C             ADDR   .BLOCK 2        ;END ADDRESS
0142   A41E             CKSUM  .BLOCK 2        ;CHECKSUM
0143   A420             S2     =BKS+6          ;VERTICAL COUNT (ONLY ON DUMP)
0144   A420             
0145   A420             ;MONITOR REGISTERS
0146   A420             SAVPS  .BLOCK 1        ;STATUS
0147   A421             SAVA   .BLOCK 1        ;ACCUM
0148   A422             SAVX   .BLOCK 1        ;X REG
0149   A423             SAVY   .BLOCK 1        ;Y REG
0150   A424             SAVS   .BLOCK 1        ;STACK POINTER
0151   A425             SAVPC  .BLOCK 2        ;PROGR COUNTER
0152   A427             
0153   A427             ;WORK AREAS FOR PAGE ZERO SIMULATION
0154   A427             ;SIMULATE LDA (NNNN),Y ,WHERE NNNN IS ABSOLUTE
0155   A427             STIY   .BLOCK 3        ;STA NM,Y
0156   A42A             CPIY   .BLOCK 3        ;CMP NM,Y   OR  LDA NM,Y
0157   A42D                    .BLOCK 1        ;RTS
0158   A42E             LDIY   =CPIY           ;LDA NM,Y
0159   A42E             
0160   A42E             ;VARIABLES FOR TAPE
0161   A42E             NAME   .BLOCK 6        ;FILE NAME
0162   A434             TAPIN  .BLOCK 1        ;IN  FLG (TAPE 1 OR 2)
0163   A435             TAPOUT .BLOCK 1        ;OUT FLG (TAPE 1 OR 2)
0164   A436             TAPTR  .BLOCK 1        ;TAPE BUFF POINTER
0165   A437             TAPTR2 .BLOCK 1        ;TAPE OUTPUT BUFF PTR
0166   A438             HIST   =NAME           ;FOUR LAST ADDR + NEXT (SINGL STEP)`
0167   A438             BLK    =$0115          ;BLOCK COUNT
0168   A438             TABUFF =$0116          ;TAPE BUFFER (I/O)
0169   A438             BLKO   =$0168          ;OUTPUT BLOCK COUNT
0170   A438             TABUF2 =$00AD          ;OUTPUT BUFF WHEN ASSEMB (PAG0)
0171   A438             DIBUFF .BLOCK 40       ;DISPLAY BUFFER
0172   A460             
0173   A460             
0174   A460             ;EQUATES FOR MNEMONIC ENTRY (moved)
0175   A460             HISTM  =$NAME          ;SHARE WITH NAME & HIST
0176   A460             BYTESM =HISTM+1
0177   A460             TEMPX  =HISTM+3
0178   A460             TEMPA  =HISTM+5
0179   A460             OPCODE =HISTM+6
0180   A460             CODFLG =HISTM+9
0181   A460             
0182   A460             
0183   A460             
0184   A460             ;VARIABLES USED IN PRINTING
0185   A460             IBUFM  .BLOCK 20       ;PRINTER BUFFER
0186   A474             IDIR   .BLOCK 1        ;DIRECTION == 0=>+ , FF=>-
0187   A475             ICOL   .BLOCK 1        ;COLUMN  LEFTMOST=0,RIGHTMOST=4
0188   A476             IOFFST .BLOCK 1        ;OFFSET  0=LEFT DGT,1=RIGHT DGT
0189   A477             IDOT   .BLOCK 1        ;# OF LAST DOT ENCOUNTERED
0190   A478             IOUTL  .BLOCK 1        ;LOWER 8 OUTPUTS(8 COLS ON RIGHT)
0191   A479             IOUTU  .BLOCK 1        ;UPPER 2 DIGITS
0192   A47A             IBITL  .BLOCK 1        ;1 BIT MSK FOR CURRENT OUTPUT
0193   A47B             IBITU  .BLOCK 1
0194   A47C             IMASK  .BLOCK 1        ;MSK FOR CURRENT ROW
0195   A47D             JUMP   .BLOCK 2        ;INDIR & ADDR OF TABL FOR CURR ROW
0196   A47F             
0197   A47F             ;VARIABLES FOR KEYBOARD
0198   A47F             ROLLFL .BLOCK 1        ;SAVE LAST STROBE FOR ROLLOVER
0199   A480             KMASK  =CPIY           ;TO MASK OFF CTRL OR SHIFT
0200   A480             STBKEY =CPIY+1         ;STROBE KEY (1-8 COLUMNS)
0201   A480             
0202   A480             ;               I/O ASSIGNMENT
0203   A4E0                    *=MECB_KEYBOARD    ; 6532 I/0
0204   A4E0             DRA2   .BLOCK 1        ;DATA REG A
0205   A4E1             DDRA2  .BLOCK 1        ;DATA DIR REG A
0206   A4E2             DRB2   .BLOCK 1        ;DATA REG B
0207   A4E3             DDRB2  .BLOCK 1        ;DATA DIR REG B
0208   A4E4             
0209   A4E4             ;  WRITE EDGE DETECT CONTROL (NOT USED BECAUSE KB)
0210   A4E4                    *=MECB_KEYBOARD+4
0211   A4E4             DNPA7  .BLOCK 1        ;DISABLE PA7 INT ,NEG EDGE DET
0212   A4E5             DPPA7  .BLOCK 1        ;DIS PA7 INT ,POS EDGE DETE
0213   A4E6             ENPA7  .BLOCK 1        ;ENA PA7 INT ,NEG EDG DET
0214   A4E7             EPPA7  .BLOCK 1        ;ENA PA7 INT ,POS EDG DET
0215   A4E8             
0216   A4E8             ;          READ AND CLEAR INTERRUPT
0217   A4E5                    *=MECB_KEYBOARD+5
0218   A4E5             RINT   .BLOCK 1        ;BIT 7=TIMER FLG , BIT 6=PA7 FLG
0219   A4E6             
0220   A4E6             ;             TIMER INTERRUPT
0221   A4F4                    *=MECB_KEYBOARD+$14
0222   A4F4             ;WRITE COUNT TO INTERVAL TIMER
0223   A4F4             ;INTERRUPT DISABLE FOR THESE ADDRS
0224   A4F4             DIV1   .BLOCK 1        ;DIV BY 1 (DISABLE);ADD 8 TO ENA
0225   A4F5             DIV8   .BLOCK 1        ;DIV BY 8 (DIS) ; ADD 8 TO ENA
0226   A4F6             DIV64  .BLOCK 1        ;DIV BY 64 (DIS) ; ADD 8 TO ENA
0227   A4F7             DI1024 .BLOCK 1        ;DIV BY 1024 (DIS) ; ADD 8 TO ENA
0228   A4F8             
0229   A4F8             ;     *********************************************
0230   A4F8             ;     *    6522 ADDRESSES (MONIT) (A800-ABFF)     *
0231   A4F8             ;     *********************************************
0232   A4C0                    *=MECB_VIA
0233   A4C0             DRB    .BLOCK 1        ;DATA REG B
0234   A4C1             DRAH   .BLOCK 1        ;DATA REG A
0235   A4C2             DDRB   .BLOCK 1        ;DATA DIR REG B
0236   A4C3             DDRA   .BLOCK 1        ;DATA DIR REG A
0237   A4C4             T1L    .BLOCK 1        ;TIMER 1 COUNTER LOW
0238   A4C5             T1CH   .BLOCK 1        ;TIMER 1 COUNTER HIGH
0239   A4C6             T1LL   .BLOCK 1        ;TIMER 1 LATCH LOW
0240   A4C7             T1LH   .BLOCK 1        ;TIMER 1 LATCH HIGH
0241   A4C8             T2L    .BLOCK 1        ;TIMER 2 LATCH & COUNTER LOW
0242   A4C9             T2H    .BLOCK 1        ;TIMER 2 COUNTER HIGH
0243   A4CA             SR     .BLOCK 1        ;SHIFT REGISTER
0244   A4CB             ACR    .BLOCK 1        ;AUX CONTROL REGISTER
0245   A4CC             PCR    .BLOCK 1        ;PERIPHERAL CONTROL REGISTER
0246   A4CD             IFR    .BLOCK 1        ;INTERRUPT FLAG REGISTER
0247   A4CE             IER    .BLOCK 1        ;INTERRUPT ENABLE REGISTER
0248   A4CF             DRA    .BLOCK 1        ;DATA REGISTER A
0249   A4D0             
0250   A4D0             ;DEFINE I/O CONTROL FOR PCR (CA1,CA2,CB1,CB2)
0251   A4D0             DATIN  =$0E            ;DATA IN CA2=1
0252   A4D0             DATOUT =$0C            ;DATA OUT CA2=0
0253   A4D0             PRST   =$00            ;PRINT START (CB1) ,NEG DETEC
0254   A4D0             SP12   =$01            ;STROBE P1,P2  (CA1) ,POS DETEC
0255   A4D0             MON    =$C0            ;MOTOR ON (CB2=0)
0256   A4D0             MOFF   =$E0
0257   A4D0             ;MSKS TO OBTAIN EACH INTERRUPT
0258   A4D0             MPRST  =$10            ;INT FLG FOR CB1
0259   A4D0             MSP12  =$02            ;INT FLG FOR CA1
0260   A4D0             MT2    =$20            ;INT FLG FOR T2
0261   A4D0             
0262   A4D0             ;DEFINE I/O CONTROL FOR ACR  (TIMERS,SR)
0263   A4D0             PRTIME =1700           ; PRINTING TIME =1.7M MSEC
0264   A4D0             DEBTIM =5000           ; DEBOUNCE TIME (5 MSEC)
0265   A4D0             T2I    =$00            ;T2 AS ONE SHOT (PRI,KB,TTY,TAPE)
0266   A4D0             T1I    =$00            ;T1 AS ONE SHOT,PB7 DIS (TAPES)
0267   A4D0             T1FR   =$C0            ;T1 IN FREE RUNNING (TAPE)
0268   A4D0             
0269   A4D0             ;         ******************************
0270   A4D0             ;         *    DISPLAY   (AC00-AFFF)   *
0271   A4D0             ;         ******************************
0272   A4D0             ; REGISTERS FOR DISPLAY (6520)
0273   A4D0                    *=MECB_DISPLAY
0274   A4D0             RA     .BLOCK 1        ;REGISTER A
0275   A4D1             CRA    .BLOCK 1        ;CONTROL REG A
0276   A4D2             RB     .BLOCK 1        ;REG B
0277   A4D3             CRB    .BLOCK 1        ;CONTROL REG B
0278   A4D4             
0279   A4D4             ;CHR 00-03 ENA BY $AC04-AC07
0280   A4D4             ;CHR 04-07 ENA BY $AC08-AC0B
0281   A4D4             ;CHR 08-11 ENA BY $AC10-AC13
0282   A4D4             ;CHR 12-15 ENA BY $AC20-AC23
0283   A4D4             ;CHR 16-19 ENA BY $AC40-AC43
0284   A4D4             
0285   A4D4             NULLC  =$FF
0286   A4D4             CR     =$0D
0287   A4D4             LF     =$0A
0288   A4D4             ESCAPE =$1B
0289   A4D4             RUB    =$08
0290   A4D4             EQS    =$BD
0291   A4D4             ;.FILE A1
0292   A4D4             
0293   A4D4             ; E=ENTER EDITOR
0294   A4D4             ; T=RE-ENTER EDITOR TO RE-EDIT SOURCE
0295   A4D4             ; R=SHOW REGISTERS
0296   A4D4             ; M=DISPLAY MEMORY
0297   A4D4             ;  =SHOW NEXT 4 ADDRESSES
0298   A4D4             ; G=GO AT CURRENT P.C. (COUNT)
0299   A4D4             ; /=ALTER CURRENT MEMORY
0300   A4D4             ; L=LOAD OBJECT
0301   A4D4             ; D=DUMP OBJECT
0302   A4D4             ; N=ASSEMBLE
0303   A4D4             ; *=ALTER P.C.
0304   A4D4             ; A=ALTER ACCUMULATOR
0305   A4D4             ; X=ALTER X REGISTER
0306   A4D4             ; Y=ALTER Y REGISTER
0307   A4D4             ; P=ALTER PROCESSOR STATUS
0308   A4D4             ; S=ALTER STACK POINTER
0309   A4D4             ; B=SET BREAK ADDR
0310   A4D4             ; ?=SHOW BREAK ADDRESSES
0311   A4D4             ; #=CLEAR BREAK ADDRESSES
0312   A4D4             ; H=SHOW TRACE HISTORY STACK
0313   A4D4             ; V=TOGGLE REGISTER PRINT WITH DIS.
0314   A4D4             ; Z=TOGGLE DISASSEMBLER TRACE
0315   A4D4             ; \=TURN ON/OFF PRINTER
0316   A4D4             ;  =ADV PAPER
0317   A4D4             ; I=MNEMONIC ENTRY
0318   A4D4             ; K=DISASSEMBLE MEMORY
0319   A4D4             ; 1=TOGGLE TAPE 1 CONTRL (ON OR OFF)
0320   A4D4             ; 2=TOGGLE TAPE 2 CONTRL
0321   A4D4             ; 3=VERIFY CKSUM FOR TAPES
0322   A4D4             ; 4=ENABLE BREAKS
0323   A4D4             ; 5=BASIC ENTRY (COLD)
0324   A4D4             ; 6=BASIC REENTRY (WARM)
0325   A4D4             
0326   A4D4             ;FOLLOWING KEYS ARE UNUSED BUT 'HOOKS'
0327   A4D4             ;ARE PROVIDED IN LOCATIONS 010C-0114
0328   A4D4             ;
0329   A4D4             ; KEYF1,KEYF2,KEYF3
0330   A4D4             
0331   E000                    *=$E000
0332   E000             ;ALL MSGS HAVE MSB=1 OF LAST CHAR TO END IT
0333   E000 46 52 4F 4D M1     .DB "FROM",EQS
0333   E004 BD 
0334   E005 54 4F BD    M3     .DB "TO",EQS
0335   E008 20 2A 2A 2A M4     .DB " **** PS AA XX YY S",$D3
0335   E00C 2A 20 50 53 
0335   E010 20 41 41 20 
0335   E014 58 58 20 59 
0335   E018 59 20 53 D3 
0336   E01C 4D 4F 52 45 M5     .DB "MORE",$BF
0336   E020 BF 
0337   E021 4F 4E A0    M6     .DB "ON",$A0     ;"ON "
0338   E024 4F 46 C6    M7     .DB "OF",$C6     ;"OFF"
0339   E027 42 52 CB    M8     .DB "BR",$CB     ;"BRK"
0340   E02A 49 4E BD    M9     .DB "IN",EQS
0341   E02D 4F 55 54 BD M10    .DB "OUT",EQS
0342   E031 20 4D 45 4D M11    .DB " MEM FAIL",$A0
0342   E035 20 46 41 49 
0342   E039 4C A0 
0343   E03B 20 50 52 49 M12    .DB " PRINTER DOW",$CE
0343   E03F 4E 54 45 52 
0343   E043 20 44 4F 57 
0343   E047 CE 
0344   E048 20 53 52 43 TMSG0  .DB " SRCH"
0344   E04C 48 
0345   E04D 20 46 BD    TMSG1  .DB " F",EQS
0346   E050 54 BD       TMSG2  .DB "T",EQS
0347   E052 A0 C5 D2 D2 TMSG3  .DB $A0,$C5,$D2,$D2  ;PRINT " ERROR" ,MSB=1
0348   E056 CF D2 A0 A0        .DB $CF,$D2,$A0,$A0,$A0,$A0,$A0,$A0,";"
0348   E05A A0 A0 A0 A0 
0348   E05E 3B 
0349   E05F 41 BD       TMSG5  .DB "A",EQS
0350   E061 42 4C 4B 3D TMSG6  .DB "BLK=",$A0
0350   E065 A0 
0351   E066 A0 CC CF C1 TMSG7  .DB $A0,$CC,$CF,$C1,$C4,";"
0351   E06A C4 3B 
0352   E06C 45 44 49 54 EMSG1  .DB "EDITO",$D2 ;EDITOR MESSAGES
0352   E070 4F D2 
0353   E072 45 4E C4    EMSG2  .DB "EN",$C4
0354   E075             
0355   E075             ;VECTORS COME HERE FIRST AFTER JUMP THRU FFFA-FFFF
0356   E075 6C 02 A4    NMIV1  JMP (NMIV2)     ;NMIV2 IS A VECTOR TO NMIV3
0357   E078 6C 04 A4    IRQV1  JMP (IRQV2)     ;IRQV2 IS A VECTOR TO IRQV3
0358   E07B             
0359   E07B             ;SINGLE STEP ENTRY POINT (NMI)
0360   E07B 8D 21 A4    NMIV3  STA SAVA        ;SAVE ACCUM
0361   E07E 68                 PLA
0362   E07F 8D 20 A4           STA SAVPS       ;SAVE PROCESSOR STATUS
0363   E082 D8                 CLD
0364   E083 8E 22 A4           STX SAVX        ;SAVE X
0365   E086 8C 23 A4           STY SAVY
0366   E089 68                 PLA
0367   E08A 8D 25 A4           STA SAVPC       ;PROGRAM COUNTER
0368   E08D 68                 PLA
0369   E08E 8D 26 A4           STA SAVPC+1
0370   E091 BA                 TSX             ;GET STACK PTR & SAVE IT
0371   E092 8E 24 A4           STX SAVS
0372   E095             ;TRACE THE ADDRESS
0373   E095 AC 14 A4           LDY HISTP       ;GET POINTER TO HISTORY STACK
0374   E098 AD 26 A4           LDA SAVPC+1     ;SAVE HALT ADDR IN HISTORY STACK
0375   E09B 99 2E A4           STA HIST,Y
0376   E09E AD 25 A4           LDA SAVPC
0377   E0A1 99 2F A4           STA HIST+1,Y
0378   E0A4 20 88 E6           JSR NHIS        ;UPDATE POINTER
0379   E0A7 AD 10 A4           LDA BKFLG       ;SOFT BREAKS ON?
0380   E0AA F0 08              BEQ NMI5        ;NO ,DONT CHCK BRKPOINT LIST
0381   E0AC 20 6B E7           JSR CKB         ;CHECK BREAKPOINT LIST
0382   E0AF 90 03              BCC NMI5        ;DID NOT HIT BREAKPOINT
0383   E0B1 4C 7F E1    NMI4   JMP IRQ2        ;HIT A BREAK-TRAP TO MONITOR
0384   E0B4 20 90 E7    NMI5   JSR DONE        ;COUNT =0 ?
0385   E0B7 F0 F8              BEQ NMI4        ;YES,TRAP TO MONITOR
0386   E0B9 20 07 E9           JSR RCHEK       ;CHK IF HE WANTS TO INTERR
0387   E0BC 4C 6D E2           JMP GOBK        ;NOT DONE-RESUME EXECUTION
0388   E0BF             
0389   E0BF             ;POWER UP AND RESET ENTRY POINT (RST TRANSFERS HERE)
0390   E0BF D8          RSET   CLD             ;CLEAR DEC MODE
0391   E0C0 78                 SEI             ;DISABLE INTERRUPT
0392   E0C1 A2 FF              LDX #$FF        ;INIT STACK PTR
0393   E0C3 9A                 TXS
0394   E0C4 8E 24 A4           STX SAVS        ;ALSO INIT SAVED STACK PTR
0395   E0C7             ;INITIALIZE 6522
0396   E0C7 A2 0E              LDX #14
0397   E0C9 BD 43 E7    RS1    LDA INTAB1,X    ;PB1-PB0,PA7-PA0 FOR PRNTR
0398   E0CC 9D C0 A4           STA DRB,X       ;PB2=TTO,PB6=TTI
0399   E0CF CA                 DEX             ;PB4-PB5=TAPE CONTROL,PB7=DATA
0400   E0D0 10 F7              BPL RS1         ;PB3 =SWITCH KB/TTY
0401   E0D2             ;INITIALIZE 6532 ; DJRM NOW USER 6522
0402   E0D2 20 B2 EF           JSR  PS2KB_Init
0403   E0D5 EA                 NOP
0404   E0D6 EA                 NOP ;       
0405   E0D7             
0406   E0D7 20 08 A8           JSR  BIOS_INIT  ; cutom bios extensions
0407   E0DA             ;       NOP
0408   E0DA             ;       NOP
0409   E0DA             ;       NOP
0410   E0DA             
0411   E0DA EA                 NOP
0412   E0DB EA                 NOP
0413   E0DC EA                 NOP
0414   E0DD             ;       LDX #3          ;PORTS USED FOR KB
0415   E0DD             ;RS2    LDA INTAB2,X    ;PA0-PA7 AS OUTPUT
0416   E0DD             ;       STA DRA2,X      ;PB0-PB7 AS INPUT
0417   E0DD             ;       DEX
0418   E0DD             ;       BPL RS2
0419   E0DD             ;INITIALIZE MONITOR RAM (6532)
0420   E0DD AD 56 E7           LDA INTAB3      ;CHECK IF NMIV2 HAS BEEN CHANGED
0421   E0E0 CD 02 A4           CMP NMIV2       ;IF IT HAS THEN ASSUME A COLD
0422   E0E3 D0 0C              BNE RS3A        ;START AND INITIALIZE EVERYTHING
0423   E0E5 AD 57 E7           LDA INTAB3+1
0424   E0E8 CD 03 A4           CMP NMIV2+1
0425   E0EB D0 04              BNE RS3A
0426   E0ED A2 10              LDX #16         ;THEY ARE EQUAL ,IT'S A WARM RESET
0427   E0EF D0 02              BNE RS3
0428   E0F1 A2 00       RS3A   LDX #0          ;INIT EVERYTHING (POWER UP)
0429   E0F3 BD 56 E7    RS3    LDA INTAB3,X
0430   E0F6 9D 02 A4           STA NMIV2,X
0431   E0F9 E8                 INX
0432   E0FA E0 15              CPX #21
0433   E0FC 90 F5              BCC RS3
0434   E0FE             ;INITIALIZE DISPLAY (6520)
0435   E0FE A9 00              LDA #0          ;SET CONTR REG FOR DATA DIR REG
0436   E100 A2 01              LDX #1
0437   E102 20 13 E1           JSR SETREG
0438   E105 A9 FF              LDA #$FF        ;SET DATA DIR REG FOR OUTPUT
0439   E107 CA                 DEX
0440   E108 20 13 E1           JSR SETREG
0441   E10B A9 04              LDA #$04        ;SET CONTR REG FOR PORTS
0442   E10D E8                 INX
0443   E10E 20 13 E1           JSR SETREG
0444   E111 D0 07              BNE RS3B
0445   E113 9D D0 A4    SETREG STA RA,X
0446   E116 9D D2 A4           STA RB,X
0447   E119 60                 RTS
0448   E11A 58          RS3B   CLI             ;CLEAR INTERRUPT
0449   E11B             
0450   E11B             ;KB/TTY SWITCH TEST AND BIT RATE MEASUREMENT
0451   E11B A9 08              LDA #$08        ;PB3=SWITCH KB/TTY
0452   E11D 2C C0 A4    RS4    BIT DRB         ;A^M ,PB6-> V (OVERFLOW FLG)
0453   E120 D0 22              BNE RS7         ;BRANCH ON KB
0454   E122 70 F9              BVS RS4         ;START BIT=PB6=0?
0455   E124 A9 FF              LDA #$FF        ;YES ,INITIALIZE TIMER T2
0456   E126 8D C9 A4           STA T2H
0457   E129 2C C0 A4    RS5    BIT DRB         ;END OF START BIT ?
0458   E12C 50 FB              BVC RS5         ;NO ,WAIT UNTIL PB6 BACK TO 1
0459   E12E AD C9 A4           LDA T2H         ;STORE TIMING
0460   E131 49 FF              EOR #$FF        ;COMPLEMENT
0461   E133 8D 17 A4           STA CNTH30
0462   E136 AD C8 A4           LDA T2L
0463   E139 49 FF              EOR #$FF
0464   E13B 20 7C FE           JSR PATCH1      ;ADJUST IT
0465   E13E 20 13 EA    RS6    JSR CRLOW       ;CLEAR DISPLAY
0466   E141 4C 72 FF           JMP PAT21
0467   E144 A2 13       RS7    LDX #19         ;CLEAR HARDWARE CURSORS
0468   E146 8A          RS8    TXA
0469   E147 48                 PHA
0470   E148 A9 00              LDA #0
0471   E14A 20 7B EF           JSR OUTDD1
0472   E14D 68                 PLA
0473   E14E AA                 TAX
0474   E14F CA                 DEX
0475   E150 10 F4              BPL RS8
0476   E152 30 EA              BMI RS6
0477   E154             
0478   E154             ;BRK INSTR (00) OR IRQ ENTRY POINT
0479   E154 8D 21 A4    IRQV3  STA SAVA
0480   E157 68                 PLA
0481   E158 48                 PHA             ;GET STATUS
0482   E159 29 10              AND #$10        ;SEE IF 'BRK' , ISOLATE B FLG
0483   E15B D0 06              BNE IRQ1        ;TRAP WAS CAUSED BY "BRK" INSTRUC
0484   E15D AD 21 A4           LDA SAVA        ;TRAP CAUSED BY IRQ SO TRANSFER
0485   E160 6C 00 A4           JMP (MONRAM)    ;CONTROL TO USER THRU VECTOR
0486   E163             ;IS 'BRK' INSTR ,SHOW PC & DATA
0487   E163             ;PC IS OFF BY ONE , SO ADJUST IT
0488   E163 68          IRQ1   PLA
0489   E164 8D 20 A4           STA SAVPS       ;SAVE PROCESSOR STATUS
0490   E167 8E 22 A4           STX SAVX
0491   E16A 8C 23 A4           STY SAVY
0492   E16D D8                 CLD
0493   E16E 68                 PLA             ;PROGR CNTR
0494   E16F 38                 SEC             ;SUBTRACT ONE FROM RETURN ADDR
0495   E170 E9 01              SBC #1
0496   E172 8D 25 A4           STA SAVPC
0497   E175 68                 PLA
0498   E176 E9 00              SBC #0
0499   E178 8D 26 A4           STA SAVPC+1
0500   E17B BA                 TSX             ;GET STACK PTR & SAVE IT
0501   E17C 8E 24 A4           STX SAVS
0502   E17F             ;SHOW PC AND DATA
0503   E17F 20 61 F4    IRQ2   JSR REGQ        ;SHOW NEXT INSTRUCTION & CONTINUE
0504   E182             
0505   E182             ;THIS ROUTINE WILL GET A CHR WITH "( )" FROM
0506   E182             ;KB/TTY & THEN WILL GO TO THE RESPECTIVE COMMAND
0507   E182 4C 59 FF    START  JMP PAT19       ;CLEAR DEC MODE & <CR>
0508   E185 A9 BC       STA1   LDA #'<'+$80    ;"<" CHR WITH MSB=1 FOR DISP
0509   E187 20 7A E9           JSR OUTPUT
0510   E18A 20 96 FE           JSR RED1        ;GET CHR & ECHO FROM KB/TTY
0511   E18D 48                 PHA
0512   E18E A9 3E              LDA #'>'
0513   E190 20 7A E9           JSR OUTPUT
0514   E193 68                 PLA             ;SCAN LIST OF CMDS FOR ENTERED CHR
0515   E194 A2 20              LDX #MCNT       ;COUNT OF COMMANDS
0516   E196 DD C4 E1    MCM2   CMP COMB,X      ;CHECK NEXT COMMAND IN LIST
0517   E199 F0 11              BEQ MCM3        ;MATCH , SO PROCESS THIS COMMAND
0518   E19B CA                 DEX
0519   E19C 10 F8              BPL MCM2
0520   E19E             ;IS BAD COMMAND
0521   E19E 20 D4 E7           JSR QM
0522   E1A1 D8          COMIN  CLD
0523   E1A2 20 FE E8           JSR LL
0524   E1A5 AE 24 A4           LDX SAVS
0525   E1A8 9A                 TXS
0526   E1A9 4C 82 E1           JMP START
0527   E1AC             ;HAVE VALID COMMAND
0528   E1AC 8A          MCM3   TXA             ;CONVERT TO WORD (MULT BY 2)
0529   E1AD 0A                 ASL A           ;2 BYTES (ADDR)
0530   E1AE AA                 TAX
0531   E1AF BD E5 E1           LDA MONCOM,X    ;GET ADDRESS OF COMMAND PROCESSOR
0532   E1B2 8D 7D A4           STA JUMP
0533   E1B5 BD E6 E1           LDA MONCOM+1,X
0534   E1B8 8D 7E A4           STA JUMP+1
0535   E1BB 20 C1 E1           JSR JMPR        ;CMD PROCESSORS CAN EXIT WITH 'RTS'
0536   E1BE 4C 82 E1           JMP START
0537   E1C1 6C 7D A4    JMPR   JMP (JUMP)      ;GO TO COMMAND
0538   E1C4             
0539   E1C4             ;VALID COMMANDS
0540   E1C4             MCNT   =32             ;COUNT
0541   E1C4 45 54 52 4D COMB   .DB "ETRMG/LDN*AXYPS "
0541   E1C8 47 2F 4C 44 
0541   E1CC 4E 2A 41 58 
0541   E1D0 59 50 53 20 
0542   E1D4 42 3F 23 48        .DB "B?#HVZIK123456[]",$5E
0542   E1D8 56 5A 49 4B 
0542   E1DC 31 32 33 34 
0542   E1E0 35 36 5B 5D 
0542   E1E4 5E 
0543   E1E5             
0544   E1E5 39 F6 CF F6 MONCOM .DW EDIT,REENTR,REG,MEM,GO
0544   E1E9 27 E2 48 E2 
0544   E1ED 61 E2 
0545   E1EF A0 E2 E6 E2        .DW CHNGG,LOAD,DUMP,ASSEM,CGPC,CGA
0545   E1F3 3B E4 00 D0 
0545   E1F7 D4 E5 EE E5 
0546   E1FB F2 E5 F6 E5        .DW CGX,CGY,CGPS,CGS,NXT5,BRKA
0546   E1FF EA E5 FA E5 
0546   E203 0D E6 1B E6 
0547   E207 4D E6 FE E6        .DW SHOW,CLRBK,SHIS,REGT,TRACE
0547   E20B 65 E6 D9 E6 
0547   E20F DD E6 
0548   E211 9E FB 0A E7        .DW MNEENT,KDISA,TOGTA1,TOGTA2,VECKSM
0548   E215 BD E6 CB E6 
0548   E219 94 E6 
0549   E21B E5 E6 00 B0        .DW BRKK,BASIEN,BASIRE
0549   E21F 03 B0 
0550   E221             ;USER DEFINED FUNCTIONS
0551   E221 0C 01 0F 01        .DW KEYF1,KEYF2,KEYF3
0551   E225 12 01 
0552   E227             
0553   E227             ;***** R COMMAND-DISPLAY REGISTERS *****
0554   E227 20 13 EA    REG    JSR CRLOW       ;CLEAR DISP IF KB
0555   E22A A0 08              LDY #M4-M1      ;MESSAG & <CR>
0556   E22C 20 AF E7           JSR KEP
0557   E22F 20 24 EA           JSR CRCK
0558   E232 20 3E E8    REG1   JSR BLANK
0559   E235 A0 09              LDY #SAVPC-ADDR ;OUTPUT PGR CNTR (SAVEPC+1,SAVEPC)
0560   E237 20 DD E2           JSR WRITAD
0561   E23A A9 20              LDA #SAVPS%256      ;NOW THE OTHER 5 REGS
0562   E23C 8D 1C A4           STA ADDR
0563   E23F A9 A4              LDA #SAVPS/256
0564   E241 8D 1D A4           STA ADDR+1
0565   E244 A2 05              LDX #5          ;COUNT
0566   E246 D0 07              BNE MEM1        ;SHARE CODE
0567   E248             
0568   E248             ;***** M COMMAND-DISPLAY MEMORY *****
0569   E248 20 AE EA    MEM    JSR ADDIN       ;GET START ADDDRESS IN ADDR
0570   E24B B0 13              BCS MEM3
0571   E24D A2 04       MEIN   LDX #4
0572   E24F A0 00       MEM1   LDY #0
0573   E251 20 3E E8    MEM2   JSR BLANK
0574   E254 A9 1C              LDA #ADDR%256
0575   E256 20 58 EB           JSR LDAY        ;LOAD CONTENTS OF CURR LOCATION
0576   E259 20 46 EA           JSR NUMA        ;AND DISPLAY IT AS 2 HEX DIGITS
0577   E25C C8                 INY
0578   E25D CA                 DEX             ;DECR COUNTER
0579   E25E D0 F1              BNE MEM2
0580   E260 60          MEM3   RTS             ;GET NEXT COMMAND
0581   E261             
0582   E261             ;***** G COMMAND-RESTART PROCESSOR *****
0583   E261 20 37 E8    GO     JSR PSL1        ;"/"
0584   E264 20 85 E7           JSR GCNT        ;GET COUNT
0585   E267 20 F0 E9           JSR CRLF
0586   E26A 4C 86 E2           JMP GOBK1       ;RESUME EXECUTION
0587   E26D AD 0E A4    GOBK   LDA REGF        ;DISPLAY REGISTERS ?
0588   E270 F0 06              BEQ GOBK0       ;NO,BRANCH
0589   E272 20 32 E2           JSR REG1        ;SHOW THE SIX REG
0590   E275 20 24 EA           JSR CRCK        ;<CR>
0591   E278 20 07 E9    GOBK0  JSR RCHEK       ;SEE IF HE WANTS TO INTERRUPT
0592   E27B AD 0F A4           LDA DISFLG      ;DISASSEMBLE CURRENT INSTR ?
0593   E27E F0 06              BEQ GOBK1       ;NO,BRANCH
0594   E280 20 6C F4           JSR DISASM      ;DISASM THIS INSTRUCTION
0595   E283 20 13 EA           JSR CRLOW
0596   E286 AE 24 A4    GOBK1  LDX SAVS        ;RESTORE SAVED REGS FOR RTI
0597   E289 9A                 TXS
0598   E28A AC 23 A4           LDY SAVY
0599   E28D AE 22 A4           LDX SAVX
0600   E290 AD 26 A4           LDA SAVPC+1
0601   E293 48                 PHA             ;PUT PC ON STACK
0602   E294 AD 25 A4           LDA SAVPC
0603   E297 48                 PHA
0604   E298 AD 20 A4           LDA SAVPS       ;STATUS ALSO
0605   E29B 48                 PHA
0606   E29C AD 21 A4           LDA SAVA
0607   E29F 40                 RTI             ;AND AWAY WE GO...
0608   E2A0             
0609   E2A0             ;***** / COMMAND-ALTER MEMORY *****
0610   E2A0 20 3E E8    CHNGG  JSR BLANK
0611   E2A3 20 DB E2           JSR WRITAZ      ;WRITE ADDR
0612   E2A6 20 3E E8    CHNG1  JSR BLANK
0613   E2A9 20 5D EA           JSR RD2         ;GET VALUE
0614   E2AC 90 0A              BCC CH2         ;ISN'T SKIP OR DONE
0615   E2AE C9 20              CMP #' '
0616   E2B0 D0 13              BNE CH3         ;NOT BLANK SO MUST BE DONE
0617   E2B2             ;SKIP THIS LOCATION
0618   E2B2 20 3E E8           JSR BLANK
0619   E2B5 4C C0 E2           JMP CH4
0620   E2B8             ;IS ALTER
0621   E2B8 20 78 EB    CH2    JSR SADDR       ;STORE ENTERED VALUE INTO MEMORY
0622   E2BB F0 03              BEQ CH4         ;NO ERROR IN STORE
0623   E2BD 4C 33 EB           JMP MEMERR      ;MEMORY WRITE ERROR
0624   E2C0 C8          CH4    INY
0625   E2C1 C0 04              CPY #4
0626   E2C3 D0 E1              BNE CHNG1       ;GO AGAIN
0627   E2C5             ;HAVE DONE LINE OR HAVE <CR>
0628   E2C5 20 CD E2    CH3    JSR NXTADD      ;UPDATE THE ADDRESS
0629   E2C8 A9 0D              LDA #CR         ;CLEAR DISPL
0630   E2CA 4C E9 FE           JMP PATC10      ;ONLY ONE <CR> & BACK TO MONITOR
0631   E2CD             
0632   E2CD 98          NXTADD TYA             ;ADD Y TO ADDR+1,ADDR
0633   E2CE 18                 CLC
0634   E2CF 6D 1C A4           ADC ADDR
0635   E2D2 8D 1C A4           STA ADDR
0636   E2D5 90 03              BCC NXTA1
0637   E2D7 EE 1D A4           INC ADDR+1
0638   E2DA 60          NXTA1  RTS
0639   E2DB             
0640   E2DB             ;WRITE CURRENT VALUE OF ADDR
0641   E2DB             ;PART OF / & SPACE COMM
0642   E2DB A0 00       WRITAZ LDY #0
0643   E2DD B9 1D A4    WRITAD LDA ADDR+1,Y
0644   E2E0 BE 1C A4           LDX ADDR,Y
0645   E2E3 4C 42 EA           JMP WRAX
0646   E2E6             
0647   E2E6             ;***** L COMMAND-GENERAL LOAD *****
0648   E2E6             ;LOAD OBJECT FROM TTY,USER,TYPE OR TAPE IN KIM-1 FORMAT
0649   E2E6 20 48 E8    LOAD   JSR WHEREI      ;WHERE INPUT
0650   E2E9             ;GET ";"  , # OF BYTES AND SA
0651   E2E9 20 93 E9    LOAD1  JSR INALL       ;GET FIRST CHAR
0652   E2EC C9 3B              CMP #SEMICOLON  ;LOOK FOR BEGINNING
0653   E2EE D0 F9              BNE LOAD1       ;IGNORE ALL CHARS BEFORE ";"
0654   E2F0 20 4D EB           JSR CLRCK       ;CLEAR CHECHSUM
0655   E2F3 20 4B E5           JSR CHEKAR      ;READ RECORD LENGTH
0656   E2F6 AA                 TAX             ;SAVE IN X THE # BYTES
0657   E2F7 20 4B E5           JSR CHEKAR      ;READ UPPER HALF OF ADDRESS
0658   E2FA 8D 1D A4           STA ADDR+1
0659   E2FD 20 4B E5           JSR CHEKAR      ;READ LOWER HALF OF ADDRESS
0660   E300 8D 1C A4           STA ADDR
0661   E303 8A                 TXA
0662   E304 F0 1B              BEQ LOAD4       ;LAST RECORD (RECORD LENGTH=0)
0663   E306             ;GET DATA
0664   E306 20 FD E3    LOAD2  JSR RBYTE       ;READ NEXT BYTE OF DATA
0665   E309 20 13 E4           JSR STBYTE      ;STORE AT LOC (ADDR+1,ADDR)
0666   E30C CA                 DEX             ;DECR RECORD LENGTH
0667   E30D D0 F7              BNE LOAD2
0668   E30F             ;COMPARE CKSUM
0669   E30F 20 FD E3           JSR RBYTE       ;READ UPPER HALF OF CHCKSUM
0670   E312 CD 1F A4           CMP CKSUM+1     ;COMPARE TO COMPUTED VALUE
0671   E315 D0 6E              BNE CKERR       ;CKSUM ERROR
0672   E317 20 FD E3           JSR RBYTE       ;READ LOWER HALF OF CHECKSUM
0673   E31A CD 1E A4           CMP CKSUM
0674   E31D D0 66              BNE CKERR
0675   E31F F0 C8              BEQ LOAD1       ;UNTIL LAST RECORD
0676   E321 A2 05       LOAD4  LDX #5          ;READ 4 MORE ZEROS
0677   E323 20 FD E3    LOAD5  JSR RBYTE
0678   E326 CA                 DEX
0679   E327 D0 FA              BNE LOAD5
0680   E329 20 93 E9           JSR INALL       ;READ LAST <CR>
0681   E32C 4C 20 E5           JMP DU13        ;SET DEFAULT DEV & GO BACK
0682   E32F             
0683   E32F             ;LOAD ROUTINE FROM TAPE BY BLOCKS
0684   E32F             ;CHECK FOR RIGHT FILE & LOAD FIRST BLOCK
0685   E32F A9 00       LOADTA LDA #$00        ;CLEAR BLOCK COUNT
0686   E331 8D 15 01           STA BLK
0687   E334 20 53 ED           JSR TIBY1       ;LOAD BUFFER WITH A BLOCK
0688   E337 CA                 DEX             ;SET X=0
0689   E338 8E 15 A4           STX CURPO2      ;CLEAR DISPLAY PTR
0690   E33B BD 16 01           LDA TABUFF,X    ;BLK COUNT SHOULD BE ZERO
0691   E33E D0 EF              BNE LOADTA      ;NO, READ ANOTHER BLOCK
0692   E340 E8                 INX
0693   E341             ;AFTER FIRST BLOCK OUTPUT FILE NAME
0694   E341 EE 11 A4           INC PRIFLG      ;SO DO NOT GO TO PRINT.
0695   E344 A0 48              LDY #TMSG0-M1   ;PRINT "F="
0696   E346 20 AF E7           JSR KEP
0697   E349 BD 16 01    LOAD1A LDA TABUFF,X    ;OUTPUT FILE NAME
0698   E34C 20 7A E9           JSR OUTPUT      ;ONLY TO DISPLAY
0699   E34F E8                 INX
0700   E350 E0 06              CPX #6
0701   E352 D0 F5              BNE LOAD1A
0702   E354 20 3E E8           JSR BLANK
0703   E357 A0 61              LDY #TMSG6-M1   ;PRINT "BLK=  "
0704   E359 20 AF E7           JSR KEP
0705   E35C CE 11 A4           DEC PRIFLG      ;RESTORE PRINTR FLG
0706   E35F 20 BD ED           JSR ADDBK1      ;JUST OUTPUT BLK CNT
0707   E362 A2 01              LDX #1          ;RESTORE X
0708   E364             ;CHECK IF FILE IS CORRECT
0709   E364 BD 16 01    LOADT2 LDA TABUFF,X    ;NOW CHCK FILE NAME
0710   E367 DD 2D A4           CMP NAME-1,X
0711   E36A D0 C3              BNE LOADTA      ;IF NO FILENAME GET
0712   E36C E8                 INX             ;ANOTHER BLOCK
0713   E36D E0 06              CPX #6          ;FILENAME=5 CHRS
0714   E36F D0 F3              BNE LOADT2
0715   E371 8E 36 A4           STX TAPTR       ;SAVE TAPE BUFF PTR
0716   E374 EE 11 A4           INC PRIFLG      ;OUTPUT MSG ONLY TO DISPLAY
0717   E377 A9 00              LDA #0          ;CLEAR DISPLAY POINTER
0718   E379 8D 15 A4           STA CURPO2
0719   E37C A0 66              LDY #TMSG7-M1   ;PRINT "LOAD " WITHOUT CLR DISPL
0720   E37E 20 96 E3           JSR CKER1
0721   E381 CE 11 A4           DEC PRIFLG
0722   E384 60                 RTS
0723   E385             
0724   E385             ;LINE CKSUM ERROR
0725   E385 20 8E E3    CKERR  JSR CKER0       ;SUBR SO MNEM ENTRY CAN USE IT
0726   E388 20 DB E2           JSR WRITAZ      ;WRITE ADDR
0727   E38B 4C A1 E1           JMP COMIN
0728   E38E 20 FE E8    CKER0  JSR LL          ;SET DEFAULT DEVICES
0729   E391 20 24 EA           JSR CRCK        ;<CR>
0730   E394 A0 52       CKER00 LDY #TMSG3-M1   ;PRINT "ERROR"
0731   E396 B9 00 E0    CKER1  LDA M1,Y        ;DONT CLR DISPLAY TO THE RIGHT
0732   E399 C9 3B              CMP #SEMICOLON
0733   E39B F0 06              BEQ CKER2
0734   E39D 20 7A E9           JSR OUTPUT      ;ONLY TO TERMINAL
0735   E3A0 C8                 INY
0736   E3A1 D0 F3              BNE CKER1
0737   E3A3 60          CKER2  RTS
0738   E3A4             
0739   E3A4             ;LOAD ROUTINE FROM TAPE WITH KIM-1 FORMAT
0740   E3A4 20 4D EB    LOADKI JSR CLRCK       ;CLEAR CKSUM
0741   E3A7 20 EA ED    LOADK1 JSR TAISET      ;SET TAPE FOR INPUT
0742   E3AA 20 29 EE    LOADK2 JSR GETTAP      ;READ CHARACTER FROM TAPE
0743   E3AD C9 2A              CMP #'*'        ;BEGINNING OF FILE?
0744   E3AF F0 06              BEQ LOADK3      ;YES,BRNCH
0745   E3B1 C9 16              CMP #$16        ;IF NOT *  SHOULD BE SYN
0746   E3B3 D0 F2              BNE LOADK1
0747   E3B5 F0 F3              BEQ LOADK2
0748   E3B7 20 FD E3    LOADK3 JSR RBYTE       ;READ ID FROM TAPE
0749   E3BA 8D 21 A4           STA SAVA        ;SAVE ID
0750   E3BD             ;NOW GET ADDR TO DISPLAY
0751   E3BD             ;& COMPARE ID AFTERWARDS
0752   E3BD 20 4B E5           JSR CHEKAR      ;GET START ADDR LOW
0753   E3C0 8D 1C A4           STA ADDR
0754   E3C3 20 4B E5           JSR CHEKAR      ;GET START ADDR HIGH
0755   E3C6 8D 1D A4           STA ADDR+1
0756   E3C9 20 25 E4           JSR GETID       ;ID FROM HIM
0757   E3CC CD 21 A4           CMP SAVA        ;DO IDS MATCH?
0758   E3CF D0 D3              BNE LOADKI      ;NO ,GET ANOTHER FILE
0759   E3D1 A2 02       LOADK5 LDX #$02        ;GET 2 CHARS
0760   E3D3 20 29 EE    LOADK6 JSR GETTAP      ;1 CHAR FROM TAPE
0761   E3D6 C9 2F              CMP #'/'        ;LAST CHAR ?
0762   E3D8 F0 0E              BEQ LOADK7      ;YES,BRNCH
0763   E3DA 20 84 EA           JSR PACK        ;CONVERT TO HEX
0764   E3DD B0 A6              BCS CKERR       ;NOT HEX CHAR SO ERROR
0765   E3DF CA                 DEX
0766   E3E0 D0 F1              BNE LOADK6
0767   E3E2 20 13 E4           JSR STBYTE      ;STORE & CHCK MEM FAIL
0768   E3E5 4C D1 E3           JMP LOADK5      ;NEXT
0769   E3E8 20 FD E3    LOADK7 JSR RBYTE       ;END OF DATA CMP CKSUM
0770   E3EB CD 1E A4           CMP CKSUM       ;LOW
0771   E3EE D0 95              BNE CKERR
0772   E3F0 20 FD E3           JSR RBYTE
0773   E3F3 CD 1F A4           CMP CKSUM+1     ;HIGH
0774   E3F6 D0 8D              BNE CKERR
0775   E3F8 68                 PLA             ;CORRECT RTN INSTEAD OF WHEREI
0776   E3F9 68                 PLA
0777   E3FA 4C 20 E5           JMP DU13        ;TELL HIM & GO BACK TO COMMAN
0778   E3FD             
0779   E3FD             ;GET 2 ASCII CHRS INTO 1 BYTE
0780   E3FD             ;FOR TAPE (T) GET ONLY ONE HEX CHR
0781   E3FD AD 12 A4    RBYTE  LDA INFLG       ;INPUT DEVICE
0782   E400 C9 54              CMP #'T'
0783   E402 D0 03              BNE RBYT1
0784   E404 4C 93 E9           JMP INALL       ;ONLY ONE BYTE FOR T (INPUT DEV)
0785   E407 20 93 E9    RBYT1  JSR INALL
0786   E40A 20 84 EA           JSR PACK
0787   E40D 20 93 E9           JSR INALL
0788   E410 4C 84 EA           JMP PACK
0789   E413             
0790   E413             ;STORE AND CHECK MEMORY FAIL
0791   E413 20 4E E5    STBYTE JSR CHEKA       ;ADD TO CKSUM
0792   E416 A0 00              LDY #0
0793   E418 20 78 EB           JSR SADDR       ;STORE AND CHCK
0794   E41B F0 03              BEQ *+5
0795   E41D 4C 33 EB           JMP MEMERR      ;MEMORY WRITE ERROR
0796   E420 A0 01              LDY #1          ;INC ADDR+1,ADDR BY 1
0797   E422 4C CD E2           JMP NXTADD
0798   E425             
0799   E425             ;GET ID FROM LAST 2 CHR OF FILENAM
0800   E425 A2 04       GETID  LDX #4          ;SEE WHAT HE GAVE US
0801   E427 BD 2E A4    GID1   LDA NAME,X      ;GET LAST 2 CHARS
0802   E42A CA                 DEX
0803   E42B C9 20              CMP #' '        ;<SPACE> ?
0804   E42D F0 F8              BEQ GID1
0805   E42F BD 2E A4           LDA NAME,X      ;CONVERT TO BINARY
0806   E432 20 84 EA           JSR PACK
0807   E435 BD 2F A4           LDA NAME+1,X
0808   E438 4C 84 EA           JMP PACK        ;ID IS IN STIY
0809   E43B             
0810   E43B             ;***** D COMMAND-GENERAL DUMP *****
0811   E43B             ;TO TTY,PRINTR,USER,X ,TAPE,TAKIM-1
0812   E43B AD 10 A4    DUMP   LDA BKFLG       ;SAVE IT TO USE IT
0813   E43E 48                 PHA
0814   E43F A9 00              LDA #00
0815   E441 8D 10 A4           STA BKFLG
0816   E444 20 24 EA    DU1    JSR CRCK        ;<CR>
0817   E447 20 A3 E7    DU0    JSR FROM        ;GET START ADDR
0818   E44A B0 FB              BCS DU0         ;IN CASE OF ERROR DO IT AGAIN
0819   E44C 20 3E E8           JSR BLANK
0820   E44F 20 10 F9           JSR ADDRS1      ;TRANSFER ADDR TO S1
0821   E452 20 A7 E7    DU1B   JSR TO          ;GET END ADDR
0822   E455 B0 FB              BCS DU1B
0823   E457 20 13 EA           JSR CRLOW
0824   E45A AD 10 A4           LDA BKFLG       ;EXECUTE WHEREO ONLY ONCE
0825   E45D D0 0E              BNE DU1A
0826   E45F 20 71 E8           JSR WHEREO      ;WHICH DEV (OUTFLG)
0827   E462 A9 00              LDA #0
0828   E464 8D 06 01           STA S2          ;CLEAR RECORD COUNT
0829   E467 8D 07 01           STA S2+1
0830   E46A EE 10 A4           INC BKFLG       ;SET FLG
0831   E46D             ;CHCK OUTPUT DEV
0832   E46D AD 13 A4    DU1A   LDA OUTFLG
0833   E470 C9 4B              CMP #'K'        ;TAPE FOR KIM?
0834   E472 D0 04              BNE *+6
0835   E474 68                 PLA             ;PULL FLG
0836   E475 4C 87 E5           JMP DUMPKI      ;YES, GO OUTPUT WHOLE FILE
0837   E478 A0 01              LDY #1          ;OUTPUT ONE MORE BYTE
0838   E47A 20 CD E2           JSR NXTADD
0839   E47D 20 F0 E9    DU2    JSR CRLF
0840   E480 20 07 E9           JSR RCHEK       ;SEE IF HE WANTS TO INTERRUPT
0841   E483             ;CALCULATE # OF BYTES YET TO BE DUMPED
0842   E483 20 4D EB           JSR CLRCK       ;CLEAR CKSUM
0843   E486 AD 1C A4           LDA ADDR        ;END ADDRESS-CURRENT ADDRESS
0844   E489 38                 SEC
0845   E48A ED 1A A4           SBC S1
0846   E48D 48                 PHA             ;# OF BYTES LOW
0847   E48E AD 1D A4           LDA ADDR+1
0848   E491 ED 1B A4           SBC S1+1
0849   E494 D0 09              BNE DU6         ;# OF BYTES HIGH
0850   E496             ;SEE IF 24 OR MORE BYTES TO GO
0851   E496 68                 PLA             ;# BYTES HIGH WAS ZERO
0852   E497 F0 42              BEQ DU10        ;ARE DONE
0853   E499 C9 18              CMP #24         ;# BYTES > 24 ?
0854   E49B 90 05              BCC DU8         ;NO ,ONLY OUTPUT REMAINING BYTES
0855   E49D B0 01              BCS DU7         ;YES ,24 BYTES IN NEXT RECORD
0856   E49F 68          DU6    PLA
0857   E4A0 A9 18       DU7    LDA #24 
0858   E4A2             ;OUTPUT ";" ,# OF BYTES AND SA
0859   E4A2 48          DU8    PHA
0860   E4A3 20 BA E9           JSR SEMI        ;SEMICOLON
0861   E4A6 68                 PLA
0862   E4A7 8D 19 A4           STA COUNT       ;SAVE # OF BYTES
0863   E4AA 20 38 E5           JSR OUTCK       ;OUTPUT # OF BYTES
0864   E4AD AD 1B A4           LDA S1+1        ;OUTPUT ADDRESS
0865   E4B0 20 38 E5           JSR OUTCK
0866   E4B3 AD 1A A4           LDA S1
0867   E4B6 20 38 E5           JSR OUTCK
0868   E4B9             ;OUTPUT DATA
0869   E4B9 20 31 E5    DU9    JSR OUTCKS      ;GET CHAR SPEC BY S1 (NO PAG 0)
0870   E4BC A9 00              LDA #0          ;CLEAR DISP PTR
0871   E4BE 8D 15 A4           STA CURPO2
0872   E4C1 20 5D E5           JSR ADDS1       ;INCR S1+1,S1
0873   E4C4 CE 19 A4           DEC COUNT       ;DECREMENT BYTE COUNT
0874   E4C7 D0 F0              BNE DU9         ;NOT DONE WITH THIS RECORD
0875   E4C9             ;OUTPUT CKSUM
0876   E4C9 AD 1F A4           LDA CKSUM+1
0877   E4CC 20 3B E5           JSR OUTCK1      ;WITHOUT CHEKA
0878   E4CF AD 1E A4           LDA CKSUM
0879   E4D2 20 3B E5           JSR OUTCK1
0880   E4D5 20 66 E5           JSR INCS2       ;INC VERTICAL COUNT
0881   E4D8 4C 7D E4           JMP DU2         ;NEXT RECORD
0882   E4DB             ;ALL DONE
0883   E4DB A0 1C       DU10   LDY #M5-M1      ;PRINT "MORE ?#
0884   E4DD 20 70 E9           JSR KEPR        ;OUTPUT MSG AND GET AN ANSWER
0885   E4E0 C9 59              CMP #'Y'
0886   E4E2 D0 03              BNE *+5
0887   E4E4 4C 44 E4           JMP DU1         ;DUMP MORE DATA
0888   E4E7 68                 PLA             ;RESTORE FLG
0889   E4E8 8D 10 A4           STA BKFLG
0890   E4EB             ;OUTPUT LAST RECORD
0891   E4EB 20 66 E5           JSR INCS2
0892   E4EE 20 BA E9           JSR SEMI        ;OUTPUT ';'
0893   E4F1 A2 02              LDX #2
0894   E4F3 A9 00              LDA #0          ;OUTPUT # OF BYTES (0-LAST RECORD)
0895   E4F5 20 3B E5           JSR OUTCK1
0896   E4F8 AD 07 01    DU10A  LDA S2+1        ;OUTPUT RECORD COUNT
0897   E4FB 20 3B E5           JSR OUTCK1      ;CHECKCUM IS THE SAME
0898   E4FE AD 06 01           LDA S2
0899   E501 20 3B E5           JSR OUTCK1
0900   E504 CA                 DEX
0901   E505 D0 F1              BNE DU10A
0902   E507 20 F0 E9           JSR CRLF
0903   E50A             ;CLOSE TAPE BLOCK IF ACTIVE
0904   E50A AD 13 A4    DU11   LDA OUTFLG
0905   E50D C9 54              CMP #'T'
0906   E50F D0 0F              BNE DU13        ;NO ,BRANCH
0907   E511 AD 37 A4    DU12   LDA TAPTR2      ;TAP OUTPUT BUFF PTR
0908   E514 C9 01              CMP #1          ;BECAUSE FIRST ONE IS BLK CNT
0909   E516 F0 08              BEQ DU13        ;NO DATA TO WRITE
0910   E518 A9 00              LDA #0          ;FILL REST BUFF ZEROS
0911   E51A 20 8B F1           JSR TOBYTE      ;OUTPUT TO BUFF
0912   E51D 4C 11 E5           JMP DU12        ;FINISH THIS BLOCK
0913   E520 20 13 EA    DU13   JSR CRLOW
0914   E523 18                 CLC             ;ENABLE INTERR
0915   E524 A9 00              LDA #T1I        ;T1 FROM FREE RUNNING TO 1 SHOT
0916   E526 8D CB A4           STA ACR
0917   E529 A9 34       DU14   LDA #$34        ;SET BOTH TAPES ON
0918   E52B 8D C0 A4           STA DRB
0919   E52E 4C FE E8           JMP LL
0920   E531             
0921   E531             ;GET CHAR SPECIFIED BY START ADDR (S1)
0922   E531 A9 1A       OUTCKS LDA #S1%256
0923   E533 A0 00              LDY #0
0924   E535 20 58 EB           JSR LDAY
0925   E538             
0926   E538             ;ADD TO CHECKSUM AND PRINT
0927   E538 20 4E E5    OUTCK  JSR CHEKA       ;CHCKSUM
0928   E53B 48          OUTCK1 PHA
0929   E53C AD 13 A4           LDA OUTFLG      ;IF TAPE DO NOT CNVRT
0930   E53F C9 54              CMP #'T'        ;TO TWO ASCII CHRS
0931   E541 D0 04              BNE OUTCK2
0932   E543 68                 PLA
0933   E544 4C 8B F1           JMP TOBYTE      ;OUTPUT TO TAP BUFF
0934   E547 68          OUTCK2 PLA
0935   E548 4C 46 EA           JMP NUMA        ;TWO ASCII REPRE
0936   E54B             
0937   E54B 20 FD E3    CHEKAR JSR RBYTE       ;TWO ASCII CHR---> 1 BYTE
0938   E54E 48          CHEKA  PHA             ;ADD TO CHECKSUM
0939   E54F 18                 CLC
0940   E550 6D 1E A4           ADC CKSUM
0941   E553 8D 1E A4           STA CKSUM
0942   E556 90 03              BCC *+5
0943   E558 EE 1F A4           INC CKSUM+1
0944   E55B 68                 PLA
0945   E55C 60                 RTS
0946   E55D             
0947   E55D             ;ADD ONE TO START ADDR (S1)
0948   E55D EE 1A A4    ADDS1  INC S1
0949   E560 D0 03              BNE ADD1
0950   E562 EE 1B A4           INC S1+1
0951   E565 60          ADD1   RTS
0952   E566             
0953   E566 EE 06 01    INCS2  INC S2          ;INCR VERTICAL COUNT
0954   E569 D0 03              BNE *+5
0955   E56B EE 07 01           INC S2+1
0956   E56E 60                 RTS
0957   E56F             
0958   E56F             ;OPEN A FILE FOR OUTPUT TO TAPE BY BLOCKS
0959   E56F             ;OUTPUT FILENAME GIVEN BY JSR WHEREO TO TAPE BUFF
0960   E56F A2 00       DUMPTA LDX #0          ;INITIALIZE TAPTR
0961   E571 8A                 TXA             ;TO OUTPUT
0962   E572 8E 68 01           STX BLKO        ;BLOCK COUNTER
0963   E575 8E 37 A4           STX TAPTR2      ;TAP OUTPUT BUFF PTR
0964   E578 20 8B F1           JSR TOBYTE      ;TWO START OF FILE CHRS
0965   E57B BD 2E A4    DUMPT1 LDA NAME,X      ;OUTPUT FILENAME
0966   E57E 20 8B F1           JSR TOBYTE
0967   E581 E8                 INX
0968   E582 E0 05              CPX #5
0969   E584 D0 F5              BNE DUMPT1      ;5 FILENAME CHRS ?
0970   E586 60                 RTS
0971   E587             
0972   E587             ;DUMP ROUTINE TO TAPE WITH KIM-1 FORMAT
0973   E587 20 1D F2    DUMPKI JSR TAOSET      ;SET TAPE FOR OUTPUT
0974   E58A A9 2A              LDA #'*'        ;TO EITHER 1 OR 2
0975   E58C 20 4A F2           JSR OUTTAP      ;DIRECTLY TO TAPE
0976   E58F             ;ID FROM LAST 2 CHRS OF FILENAME
0977   E58F 20 25 E4           JSR GETID
0978   E592 20 3B E5           JSR OUTCK1
0979   E595 20 4D EB           JSR CLRCK
0980   E598             ;STARTING ADDR
0981   E598 AD 1A A4           LDA S1
0982   E59B 20 38 E5           JSR OUTCK       ;WITH CHCKSUM
0983   E59E AD 1B A4           LDA S1+1
0984   E5A1 20 38 E5           JSR OUTCK
0985   E5A4             ;OUTPUT DATA
0986   E5A4 20 31 E5    DUK2   JSR OUTCKS      ;OUTPUT CHR SPECIFIED BY S1+1,S1
0987   E5A7 20 5D E5           JSR ADDS1       ;INCREM S1+1,S1
0988   E5AA AD 1A A4           LDA S1          ;CHCK FOR LAST BYTE
0989   E5AD CD 1C A4           CMP ADDR        ;LSB OF END ADDR
0990   E5B0 AD 1B A4           LDA S1+1
0991   E5B3 ED 1D A4           SBC ADDR+1
0992   E5B6 90 EC              BCC DUK2        ;NEXT CHR
0993   E5B8             ;NOW SEND END CHR "/"
0994   E5B8 A9 2F              LDA #'/'
0995   E5BA 20 4A F2           JSR OUTTAP      ;DIRECTLY TO TAPE
0996   E5BD             ;CHECKSUM
0997   E5BD AD 1E A4           LDA CKSUM
0998   E5C0 20 46 EA           JSR NUMA        ;ASCII REPRES
0999   E5C3 AD 1F A4           LDA CKSUM+1
1000   E5C6 20 46 EA           JSR NUMA
1001   E5C9             ;TWO EOT CHRS
1002   E5C9 A9 04              LDA #$04
1003   E5CB 20 4A F2           JSR OUTTAP
1004   E5CE 20 4A F2           JSR OUTTAP
1005   E5D1             ;TURN TAPES ON
1006   E5D1 4C 20 E5           JMP DU13
1007   E5D4             
1008   E5D4             ;***** * COMMAND-ALTER PROGRAM COUNTER *****
1009   E5D4 20 AE EA    CGPC   JSR ADDIN       ;ADDR <=ADDRESS ENTERED FROM KB
1010   E5D7 20 DD E5    CGPC0  JSR CGPC1       ;TRANSFER ADDR TO SAVPC
1011   E5DA 4C 13 EA           JMP CRLOW
1012   E5DD AD 1D A4    CGPC1  LDA ADDR+1      ;THIS WAY MNEMONICS CAN USE IT
1013   E5E0 8D 26 A4           STA SAVPC+1
1014   E5E3 AD 1C A4           LDA ADDR
1015   E5E6 8D 25 A4           STA SAVPC
1016   E5E9 60                 RTS
1017   E5EA             
1018   E5EA             ;***** P COMMAND-ALTER PROCESSOR STATUS *****
1019   E5EA A2 00       CGPS   LDX #0
1020   E5EC F0 0E              BEQ CGALL
1021   E5EE             
1022   E5EE             ;***** A COMMAND-ALTER ACCUMULATOR *****
1023   E5EE A2 01       CGA    LDX #1
1024   E5F0 D0 0A              BNE CGALL
1025   E5F2             
1026   E5F2             ;***** X COMMAND-ALTER X REGISTER *****
1027   E5F2 A2 02       CGX    LDX #2
1028   E5F4 D0 06              BNE CGALL
1029   E5F6             
1030   E5F6             ;***** Y COMMAND-ALTER Y REGISTER *****
1031   E5F6 A2 03       CGY    LDX #3
1032   E5F8 D0 02              BNE CGALL
1033   E5FA             
1034   E5FA             ;***** S COMMAND-ALTER STACK POINTER *****
1035   E5FA A2 04       CGS    LDX #4
1036   E5FC 20 D8 E7    CGALL  JSR EQUAL       ;PRINT PROMPT
1037   E5FF 20 5D EA           JSR RD2         ;GET VALUE FROM KEYBOARD
1038   E602 B0 04              BCS GOERR
1039   E604 9D 20 A4           STA SAVPS,X
1040   E607 60                 RTS
1041   E608 20 D4 E7    GOERR  JSR QM
1042   E60B D0 EF              BNE CGALL
1043   E60D             
1044   E60D             ;***** <SPACE> COMMAND-SHOW NEXT 5 MEMORY LOC *****
1045   E60D 20 3E E8    NXT5   JSR BLANK
1046   E610 A0 04              LDY #4          ;UPDATE ADDR FROM
1047   E612 20 CD E2           JSR NXTADD      ;<M>=XXXX
1048   E615 20 DB E2           JSR WRITAZ      ;OUTPUT ADDRESS
1049   E618 4C 4D E2           JMP MEIN        ;DISPLAY CONTENTS OF NEXT 4 LOCS
1050   E61B             
1051   E61B             ;***** B COMMAND-SET BREAKPOINT ADDR *****
1052   E61B A0 27       BRKA   LDY #M8-M1      ;PRINT "BRK"
1053   E61D 20 AF E7           JSR KEP
1054   E620 20 37 E8    BRK1   JSR PSL1        ;PRINT "/"
1055   E623 20 73 E9           JSR REDOUT      ;GET BREAK NUMBER
1056   E626 38                 SEC
1057   E627 E9 30              SBC #'0'        ;0 THRU 3
1058   E629 30 04              BMI BKERR       ;CHARACTER < '0' -ILLEGAL
1059   E62B C9 04              CMP #4          ;FOUR BRK POINTS
1060   E62D 30 05              BMI BKOK        ;0 < CHARACTER < 4 -OK
1061   E62F 20 D4 E7    BKERR  JSR QM          ;ERROR
1062   E632 D0 EC              BNE BRK1        ;ALLOW REENTRY OF BREAK NUMBER
1063   E634 0A          BKOK   ASL A           ;*2 TO FORM WORD OFFSET
1064   E635 48                 PHA             ;SAVE IT
1065   E636 20 AE EA           JSR ADDIN       ;GET ADDRESS FOR BREAKPOINT
1066   E639 68                 PLA
1067   E63A B0 10              BCS BKO2        ;BAD ADDRESS ENTERED
1068   E63C 20 3D FF           JSR PATC18      ;<CR> & CLR BUFFERS
1069   E63F AA                 TAX             ;# OF BRK
1070   E640 AD 1C A4           LDA ADDR        ;STORE ENTERED ADDR IN BRKPT LIST
1071   E643 9D 00 01           STA BKS,X
1072   E646 AD 1D A4           LDA ADDR+1
1073   E649 9D 01 01           STA BKS+1,X
1074   E64C 60          BKO2   RTS             ;ALL DONE
1075   E64D             
1076   E64D             ;***** ? COMMAND-SHOW CURRENT BREAKPOINTS *****
1077   E64D A0 00       SHOW   LDY #0
1078   E64F 20 13 EA           JSR CRLOW
1079   E652 20 3E E8    SH1    JSR BLANK
1080   E655 BE 00 01           LDX BKS,Y       ;ADDRESS OF NEXT BREAKPOINT
1081   E658 B9 01 01           LDA BKS+1,Y
1082   E65B 20 42 EA           JSR WRAX        ;SHOW BREAKPOINT ADDRESS
1083   E65E C8                 INY
1084   E65F C8                 INY
1085   E660 C0 08              CPY #8
1086   E662 D0 EE              BNE SH1
1087   E664 60                 RTS
1088   E665             
1089   E665             ;***** H COMMAND-SHOW TRACE STACK HISTORY *****
1090   E665             ;LAST FIVE INSTR ADDRS
1091   E665 A2 05       SHIS   LDX #5          ;NUMBER OF ENTRIES
1092   E667 8E 29 A4           STX STIY+2
1093   E66A AC 14 A4    SH11   LDY HISTP       ;POINTER TO LATEST ENTRY
1094   E66D 20 13 EA           JSR CRLOW
1095   E670 20 3E E8           JSR BLANK
1096   E673 B9 2E A4           LDA HIST,Y      ;OUTPUT ADDRESS OF ENTRY
1097   E676 20 46 EA           JSR NUMA
1098   E679 B9 2F A4           LDA HIST+1,Y
1099   E67C 20 46 EA           JSR NUMA
1100   E67F 20 88 E6           JSR NHIS        ;UPDATE POINTER
1101   E682 CE 29 A4           DEC STIY+2
1102   E685 D0 E3              BNE SH11
1103   E687 60                 RTS
1104   E688             
1105   E688             ;UPDATE HISTORY POINTER (PART OF H)
1106   E688 C8          NHIS   INY
1107   E689 C8                 INY
1108   E68A C0 0A              CPY #10
1109   E68C D0 02              BNE NH1
1110   E68E A0 00              LDY #0          ;WRAPAROUND AT 10
1111   E690 8C 14 A4    NH1    STY HISTP
1112   E693 60                 RTS
1113   E694             
1114   E694             ;***** 3 COMMAND-VERIFY TAPES *****
1115   E694             ;VERIFY CKSUM OF BLOCKS
1116   E694 20 48 E8    VECKSM JSR WHEREI      ;GET THE FILE
1117   E697 20 93 E9           JSR INALL       ;CHCK OBJ OR SOURCE
1118   E69A C9 0D              CMP #CR         ;FIRST CHR IS <CR> IF OBJ
1119   E69C D0 0E              BNE VECK2       ;ASSUME SOURCE CODE
1120   E69E 20 93 E9    VECK1  JSR INALL       ;OBJECT FILE
1121   E6A1 C9 3B              CMP #SEMICOLON
1122   E6A3 D0 F9              BNE VECK1       ;IGNORE ALL CHARS BEFORE ';'
1123   E6A5 20 93 E9           JSR INALL
1124   E6A8 4C 60 FF           JMP PAT20
1125   E6AB EA                 NOP
1126   E6AC 20 93 E9    VECK2  JSR INALL       ;IT IS TEXT
1127   E6AF C9 0D              CMP #CR
1128   E6B1 D0 F9              BNE VECK2
1129   E6B3 20 93 E9           JSR INALL       ;NEED TO <CR> TO FINISH
1130   E6B6 C9 0D              CMP #CR
1131   E6B8 D0 F2              BNE VECK2
1132   E6BA 4C 20 E5           JMP DU13        ;CLOSE FILE, IT IS OKAY
1133   E6BD             
1134   E6BD             ;***** 1 COMMAND-TOGGLE TAPE 1 CONTROL *****
1135   E6BD AD C0 A4    TOGTA1 LDA DRB
1136   E6C0 49 10              EOR #$10        ;INVERT PB4
1137   E6C2 8D C0 A4           STA DRB
1138   E6C5 29 10              AND #$10
1139   E6C7 F0 28              BEQ BRK3        ;IF 0 TAPE CNTRL IS ON
1140   E6C9 D0 2F              BNE BRK4        ;IF $10 TAPE CNTRL IS OFF
1141   E6CB             
1142   E6CB             ;***** 2 COMMAND-TOGGLE TAPE 2 CONTROL *****
1143   E6CB AD C0 A4    TOGTA2 LDA DRB
1144   E6CE 49 20              EOR #$20        ;INVERT PB5
1145   E6D0 8D C0 A4           STA DRB
1146   E6D3 29 20              AND #$20
1147   E6D5 F0 1A              BEQ BRK3
1148   E6D7 D0 21              BNE BRK4
1149   E6D9             
1150   E6D9             ;***** V COMMAND-TOGGLE REGISTER DISP FLG *****
1151   E6D9             ;DISPLAY REGIST BEFORE EXEC
1152   E6D9 A2 0E       REGT   LDX #REGF%256
1153   E6DB D0 0A              BNE TOGL
1154   E6DD             
1155   E6DD             ;****** Z COMMAND-TOGGLE DIS TRACE FLG *****
1156   E6DD             ;DISPL NEXT INSTR BEFORE EXEC
1157   E6DD A2 0F       TRACE  LDX #DISFLG%256
1158   E6DF D0 06              BNE TOGL
1159   E6E1             
1160   E6E1             ;***** \ COMMAND-TOGGLE PRINTER FLAG *****
1161   E6E1 A2 11       PRITR  LDX #PRIFLG%256
1162   E6E3 D0 02              BNE TOGL
1163   E6E5             
1164   E6E5             ;***** 4 COMMAND-TOGGLE SOFT BRK ENABL FLG *****
1165   E6E5 A2 10       BRKK   LDX #BKFLG%256
1166   E6E7             
1167   E6E7 BD 00 A4    TOGL   LDA MONRAM,X    ;LOAD FLAG
1168   E6EA F0 0A              BEQ TOGL1       ;FLAG IS OFF ,SO TURN ON
1169   E6EC A9 00              LDA #0          ;FLAG IS ON ,SO TURN OFF
1170   E6EE 9D 00 A4           STA MONRAM,X
1171   E6F1 A0 24       BRK3   LDY #M7-M1      ;PRINT "OFF"
1172   E6F3 4C AF E7    BRK2   JMP KEP
1173   E6F6 38          TOGL1  SEC             ;TURN FLAG ON BY SETTING NON-ZERO
1174   E6F7 7E 00 A4           ROR MONRAM,X    ;FLAG IS ON MSB
1175   E6FA A0 21       BRK4   LDY #M6-M1      ;PRINT "ON"
1176   E6FC D0 F5              BNE BRK2
1177   E6FE             
1178   E6FE             ;***** # COMMAND-CLEAR ALL BREAKS *****
1179   E6FE A9 00       CLRBK  LDA #0          ;STORE ZEROS INTO BRKPT LIST
1180   E700 A2 07              LDX #7
1181   E702 9D 00 01    RS20   STA BKS,X
1182   E705 CA                 DEX
1183   E706 10 FA              BPL RS20
1184   E708 30 E7              BMI BRK3        ;PRINT "OFF"
1185   E70A             
1186   E70A             ;***** K COMMAND-DISASSEMBLE MEMORY *****
1187   E70A A9 2A       KDISA  LDA #'*'        ;GET START ADDRESS
1188   E70C 20 7A E9           JSR OUTPUT
1189   E70F 20 AE EA           JSR ADDIN
1190   E712 B0 F6              BCS KDISA       ;IF ERROR DO IT AGAIN
1191   E714 20 D7 E5           JSR CGPC0       ;GET IT INTO PROG CNTR
1192   E717 20 37 E8           JSR PSL1        ;PRINT "/"
1193   E71A 20 85 E7           JSR GCNT        ;GET COUNT
1194   E71D 20 24 EA           JSR CRCK
1195   E720 4C 2B E7           JMP JD2
1196   E723 20 07 E9    JD1    JSR RCHEK       ;SEE IF HE WANTS TO INTERRUPT
1197   E726 20 90 E7           JSR DONE
1198   E729 F0 17              BEQ JD4
1199   E72B 20 6C F4    JD2    JSR DISASM      ;GO TO DISASSEMBLER
1200   E72E AD 25 A4           LDA SAVPC       ;POINT TO NEXT INSTRUC LOCAT
1201   E731 38                 SEC             ;ONE MORE TO PROG CNTR
1202   E732 65 EA              ADC LENGTH
1203   E734 8D 25 A4           STA SAVPC
1204   E737 90 03              BCC JD3
1205   E739 EE 26 A4           INC SAVPC+1
1206   E73C 20 24 EA    JD3    JSR CRCK        ;<CR>
1207   E73F 4C 23 E7           JMP JD1
1208   E742 60          JD4    RTS
1209   E743             
1210   E743             ;INITIALIZATION TABLE FOR 6522
1211   E743 34 00 37 FF INTAB1 .DB $34,$00,$37,$FF,$25,$FF,$25,$FF
1211   E747 25 FF 25 FF 
1212   E74B             ;INTAB1 .DB $34,$00,$37,$00,$25,$FF,$25,$FF ;djrm ddra=in
1213   E74B FF FF 00 00        .DB $FF,$FF,$00,T1I+T2I
1214   E74F E1 FF 7F           .DB MOFF+PRST+SP12,$FF,$7F
1215   E752             ;       .DB $08,$7F,$7F ; djrm PCR=8
1216   E752             ;INITIALIZATION TABLE FOR 6532
1217   E752 FF FF 00 00 INTAB2 .DB $FF,$FF,$00,$00
1218   E756             ;INITIALIZATION TABLE FOR MONITOR RAM
1219   E756 7B E0 54 E1 INTAB3 .DW NMIV3,IRQV3,OUTDIS
1219   E75A 05 EF 
1220   E75C C7 08 02 CA        .DB $C7,$08,$02,$CA,$03,$80,$00,$00
1220   E760 03 80 00 00 
1221   E764             ;       .DB $00,$80,$0D,$0D,$00,$00,$00
1222   E764 00 00 0D 0D        .DB $00,$00,$0D,$0D,$00,$00,$00 ; prflg=0
1222   E768 00 00 00 
1223   E76B             ;SEE IF WE HIT A SOFT BREAKPOINT (PART OF NMV3)
1224   E76B A2 07       CKB    LDX #7          ;COMPARE BRKPT LIST TO TRAP ADDR
1225   E76D BD 00 01    CKB2   LDA BKS,X       ;GET ADDRESS OF NEXT BREAKPOINT
1226   E770 CA                 DEX
1227   E771 CD 26 A4           CMP SAVPC+1     ;COMPARE TO SAVED PROGRAM COUNTER
1228   E774 D0 0A              BNE CKB1
1229   E776 BD 00 01           LDA BKS,X
1230   E779 CD 25 A4           CMP SAVPC
1231   E77C D0 02              BNE CKB1        ;NO MATCH SO TRY NEXT BREAKPOINT
1232   E77E 38                 SEC             ;MATCH-SET MATCH FLAG
1233   E77F 60                 RTS
1234   E780 CA          CKB1   DEX
1235   E781 10 EA              BPL CKB2        ;MORE TO GO
1236   E783 18                 CLC             ;NO MATCH -RESET MATCH FLAG
1237   E784 60                 RTS
1238   E785             
1239   E785             ;GET # OF LINES COUNT FOR GO-COMMAND,LIST-COMM
1240   E785 20 5D EA    GCNT   JSR RD2
1241   E788 90 02              BCC GCN1
1242   E78A 49 0C              EOR #$0C        ;<SPACE>---> $2C ,<CR>---> $01
1243   E78C 8D 19 A4    GCN1   STA COUNT
1244   E78F 60                 RTS
1245   E790             
1246   E790             ;CHECK IF COUNT HAS REACHED ZERO
1247   E790             ;COUNT=$2C MEANS FOREVER
1248   E790 AD 19 A4    DONE   LDA COUNT       ;IF COUNT=0 WE ARE DONE
1249   E793 C9 2C              CMP #$2C        ;THIS MEANS FOR EVER
1250   E795 F0 09              BEQ DON1        ;SET ACC DIFF FROM ZERO
1251   E797 F8                 SED             ;DECREMENT COUNT IN DECIMAL
1252   E798 38                 SEC
1253   E799 E9 01              SBC #1
1254   E79B D8                 CLD
1255   E79C 8D 19 A4           STA COUNT
1256   E79F 60                 RTS
1257   E7A0 A9 2C       DON1   LDA #$2C
1258   E7A2 60                 RTS
1259   E7A3             
1260   E7A3 A0 00       FROM   LDY #0          ;PRINT "FR="
1261   E7A5 F0 02              BEQ TO1
1262   E7A7             
1263   E7A7 A0 05       TO     LDY #M3-M1      ;PRINT "TO="
1264   E7A9 20 AF E7    TO1    JSR KEP
1265   E7AC 4C B1 EA           JMP ADDNE       ;GET ADDRESS
1266   E7AF             
1267   E7AF             ;PRINT MSG POINTED TO BY Y REG
1268   E7AF B9 00 E0    KEP    LDA M1,Y
1269   E7B2 48                 PHA
1270   E7B3 29 7F              AND #$7F        ;STRIP OFF MSB
1271   E7B5 20 7A E9           JSR OUTPUT
1272   E7B8 C8                 INY
1273   E7B9 68                 PLA
1274   E7BA 10 F3              BPL KEP         ;MSB =1 ?
1275   E7BC 60                 RTS
1276   E7BD             
1277   E7BD             ;PRINT "*" ,BUT NOT TO TAPE RECORDER, NOR LOADING....
1278   E7BD             ;PAPER TAPE OR TO DISPLAY
1279   E7BD AD 12 A4    PROMPT LDA INFLG       ;WHICH DEV (FOR EDITOR)
1280   E7C0 C9 54              CMP #'T'        ;NO PROMPT IF "T" OR "L"
1281   E7C2 4C EF FE           JMP PATC11
1282   E7C5 20 42 E8    PROMP1 JSR TTYTST      ;PROMPT ONLY TO TTY
1283   E7C8 D0 05              BNE PR2         ;BRANCH ON KB
1284   E7CA A9 2A              LDA #'*'
1285   E7CC 4C 7A E9    PR1    JMP OUTPUT      ;ONLY TO TERMIN
1286   E7CF A9 0D       PR2    LDA #CR         ;CLR DISP
1287   E7D1 4C 05 EF           JMP OUTDIS
1288   E7D4             
1289   E7D4 A9 3F       QM     LDA #'?'        ;PRINT "?"
1290   E7D6 D0 F4              BNE PR1
1291   E7D8             
1292   E7D8 A9 3D       EQUAL  LDA #'='        ;PRINT "="
1293   E7DA D0 F0              BNE PR1
1294   E7DC             
1295   E7DC             ;ON DELETE KEY OUTPUT SLASH IF TTY & ....
1296   E7DC             ;BACK UP CURSOR IF KB (MAY NEED SCROLLING)
1297   E7DC 20 42 E8    PSLS   JSR TTYTST      ;TTY OR KB ?
1298   E7DF F0 56              BEQ PSL1        ;BRANCH ON TTY
1299   E7E1 20 9E EB           JSR PHXY        ;SAVE X,Y
1300   E7E4 CE 15 A4           DEC CURPO2      ;DECR DISP PNTR
1301   E7E7 AE 15 A4           LDX CURPO2
1302   E7EA E0 14              CPX #20         ;IF MORE THAN 20 JUST SCROLL THEM
1303   E7EC B0 0D              BCS PSL0
1304   E7EE A9 20              LDA #' '        ;< 20 ,SO CLR CUR
1305   E7F0 20 02 EF           JSR OUTDP1
1306   E7F3 CE 15 A4           DEC CURPO2
1307   E7F6 4C 02 E8           JMP PSL00
1308   E7F9 EA                 NOP
1309   E7FA EA                 NOP
1310   E7FB 20 F8 FE    PSL0   JSR PATC12      ;CLR PRIFLG
1311   E7FE CA                 DEX             ;ONE CHR LESS
1312   E7FF 20 2F EF           JSR OUTD2A      ;SCROLL THEM
1313   E802 AD 15 A4    PSL00  LDA CURPO2      ;DISBUF---> PRIBUFF
1314   E805 C9 15              CMP #21
1315   E807 90 13              BCC PSL0B
1316   E809 C9 29              CMP #41
1317   E80B 90 07              BCC PSL0A
1318   E80D A0 28              LDY #40         ;CHR 40-59
1319   E80F E9 28              SBC #40 
1320   E811 4C 1E E8           JMP PSL0C
1321   E814 A0 14       PSL0A  LDY #20         ;CHR 20-39
1322   E816 38                 SEC
1323   E817 E9 14              SBC #20 
1324   E819 4C 1E E8           JMP PSL0C
1325   E81C A0 00       PSL0B  LDY #0          ;CHR 00-19
1326   E81E 8D 16 A4    PSL0C  STA CURPOS
1327   E821 A2 00              LDX #0
1328   E823 B9 38 A4    PSL0D  LDA DIBUFF,Y    ;TRANSFER THEM
1329   E826 9D 60 A4           STA IBUFM,X
1330   E829 E8                 INX
1331   E82A C8                 INY
1332   E82B EC 16 A4           CPX CURPOS      ;PRI PNTR
1333   E82E 90 F3              BCC PSL0D
1334   E830 20 38 F0           JSR OUTPR       ;CLR PRI BUFF TO THE RIGHT
1335   E833 20 AC EB           JSR PLXY        ;RESTORE X,Y
1336   E836 60                 RTS
1337   E837 A9 2F       PSL1   LDA #'/'        ;PRINT "/"
1338   E839 D0 91              BNE PR1
1339   E83B             
1340   E83B 20 3E E8    BLANK2 JSR BLANK       ;TWO SPACES
1341   E83E A9 20       BLANK  LDA #' '
1342   E840 D0 8A              BNE PR1
1343   E842             
1344   E842             ;CHECK TTY/KBD SWITCH (Z=1 FOR TTY)
1345   E842 A9 08       TTYTST LDA #$08        ;CHECK IF TTY OR KB
1346   E844 2C C0 A4           BIT DRB         ;TTY OR KB SWICTH =PB3
1347   E847 60                 RTS
1348   E848             
1349   E848             ;WHERE IS INPUT COMING FROM?
1350   E848             ;SET UP FOR INPUT ACTIVE DEVICE
1351   E848 A0 2A       WHEREI LDY #M9-M1      ;PRINT "IN"
1352   E84A 20 70 E9           JSR KEPR        ;OUTPUT MSG AND INPUT CHR
1353   E84D 8D 12 A4           STA INFLG
1354   E850 C9 54              CMP #'T'
1355   E852 D0 08              BNE WHE1
1356   E854 A2 00              LDX #0          ;FOR INPUT FILE FLG
1357   E856 20 A2 E8           JSR FNAM        ;OPEN FILE FOR TAPE (1 OR 2)
1358   E859 4C 2F E3           JMP LOADTA      ;GET FILE
1359   E85C C9 4B       WHE1   CMP #'K'        ;TAPE WITH KIM FORMAT
1360   E85E D0 08              BNE WHE2
1361   E860 A2 00              LDX #0          ;FOR INPUT FILE FLG
1362   E862 20 A2 E8           JSR FNAM        ;OPEN FILE FOR TAP (1 OR 2)
1363   E865 4C A4 E3           JMP LOADKI      ;THE WHOLE FILE
1364   E868 C9 55       WHE2   CMP #'U'        ;USER RTN?
1365   E86A D0 04              BNE WHE3
1366   E86C 18                 CLC             ;SET FLG FOR INITIALIZATION
1367   E86D 6C 08 01           JMP (UIN)       ;USER INPUT SETUP
1368   E870 60          WHE3   RTS
1369   E871             
1370   E871             ;WHERE IS OUTPUT GOING TO?
1371   E871             ;SET UP FOR OUTPUT ACTIVE DEVICE
1372   E871 A0 2D       WHEREO LDY #M10-M1     ;PRINT "OUT"
1373   E873 20 70 E9           JSR KEPR        ;OUTPUT MSG & INPUT CHR
1374   E876 8D 13 A4           STA OUTFLG      ;DEVICE FLG
1375   E879             ;TAPES
1376   E879 C9 54              CMP #'T'
1377   E87B D0 08              BNE WHRO1
1378   E87D A2 01              LDX #1          ;FOR OUTPUT FILE FLG
1379   E87F 20 A2 E8           JSR FNAM        ;FILENAME & TAPE (1 OR 2)
1380   E882 4C 6F E5           JMP DUMPTA      ;INITIALIZE FILE
1381   E885 C9 4B       WHRO1  CMP #'K'        ;TAPE WITH KIM FORMAT
1382   E887 D0 05              BNE WHRO2
1383   E889 A2 01              LDX #1          ;FOR OUTPUT FILE FLG
1384   E88B 4C A2 E8           JMP FNAM
1385   E88E             ;PRINTER
1386   E88E C9 50       WHRO2  CMP #'P'        ;PRINTER?
1387   E890 D0 05              BNE WHRO3
1388   E892 A9 0D              LDA #CR         ;OUTPUT LAST LINE IF ON
1389   E894 4C 00 F0           JMP OUTPRI      ;& CLEAR PRINTER PTR
1390   E897             ;USER SET UP
1391   E897 C9 55       WHRO3  CMP #'U'        ;USR RTN?
1392   E899 D0 04              BNE WHRO4
1393   E89B 18                 CLC             ;CLR FLG FOR INITIALIZATION
1394   E89C 6C 0A 01           JMP (UOUT)      ;USER OUTPUT SETUP
1395   E89F             ;ANY OTHER
1396   E89F 4C 13 EA    WHRO4  JMP CRLOW
1397   E8A2             
1398   E8A2             ;GET FILE NAME & TAPE UNIT
1399   E8A2 20 9E EB    FNAM   JSR PHXY        ;SAVE IN/OUT FLG (X)
1400   E8A5 20 CF E8           JSR NAMO        ;GET NAME
1401   E8A8 A0 50       WHICHT LDY #TMSG2-M1   ;PRINT "T="
1402   E8AA 20 70 E9           JSR KEPR        ;OUTPUT MSG & INPUT CHR
1403   E8AD C9 0D              CMP #CR
1404   E8AF D0 02              BNE TAP1
1405   E8B1 A9 31              LDA #'1'        ;<CR> ==> TAPE 1
1406   E8B3 38          TAP1   SEC
1407   E8B4 E9 31              SBC #'1'        ;SUBTRACT 31
1408   E8B6 30 04              BMI TAP2        ;ONLY 1,2 OK
1409   E8B8 C9 02              CMP #2
1410   E8BA 30 06              BMI TAP3        ;OK
1411   E8BC 20 D4 E7    TAP2   JSR QM          ;ERROR
1412   E8BF 4C A8 E8           JMP WHICHT
1413   E8C2 20 AC EB    TAP3   JSR PLXY        ;IN/OUT FLG
1414   E8C5 9D 34 A4           STA TAPIN,X     ;IF X=0 --> TAPIN (TAPE 1 OR 2)
1415   E8C8 20 83 FE           JSR CUREAD      ;GET ANYTHING
1416   E8CB 20 24 EA           JSR CRCK        ;<CR>
1417   E8CE 60                 RTS             ;IF X=1 --> TAPOUT (TAPE 1 OR 2)
1418   E8CF             
1419   E8CF             ;GET FILE NAME
1420   E8CF A0 4D       NAMO   LDY #TMSG1-M1   ;PRINT "F="
1421   E8D1 20 AF E7           JSR KEP         ;NO CRLF
1422   E8D4 A0 00              LDY #0
1423   E8D6 20 5F E9    NAMO1  JSR RDRUP       ;GET CHAR
1424   E8D9 C9 0D              CMP #CR         ;DONE?
1425   E8DB F0 0C              BEQ NAMO2
1426   E8DD C9 20              CMP #' '
1427   E8DF F0 08              BEQ NAMO2
1428   E8E1 99 2E A4           STA NAME,Y      ;STORE
1429   E8E4 C8                 INY
1430   E8E5 C0 05              CPY #5
1431   E8E7 D0 ED              BNE NAMO1
1432   E8E9             ;BLANK REST OF NAME
1433   E8E9 A9 20       NAMO2  LDA #' '
1434   E8EB C0 05       NAMO3  CPY #5
1435   E8ED F0 06              BEQ NAMO4
1436   E8EF 99 2E A4           STA NAME,Y
1437   E8F2 C8                 INY
1438   E8F3 D0 F6              BNE NAMO3
1439   E8F5 4C 3E E8    NAMO4  JMP BLANK
1440   E8F8             
1441   E8F8             ;SET INPUT FROM TERMINAL (KB OR TTY)
1442   E8F8 A9 0D       INLOW  LDA #CR
1443   E8FA 8D 12 A4           STA INFLG
1444   E8FD 60                 RTS
1445   E8FE             
1446   E8FE             ;SET I/O  TO TERMINAL (KB & D/P ,OR TTY)
1447   E8FE 20 F8 E8    LL     JSR INLOW
1448   E901             
1449   E901             ;SET OUTPUT TO TERMINAL (D/P OR TTY)
1450   E901 A9 0D       OUTLOW LDA #CR
1451   E903 8D 13 A4           STA OUTFLG
1452   E906 60          OUTL1  RTS
1453   E907             
1454   E907             ;ON <ESCAPE> STOPS EXECUTION & BACK TO MONITOR
1455   E907             ;ON <SPACE> STOPS EXECUTION & CONTINUE ON ANY OTHER KEY
1456   E907 20 42 E8    RCHEK  JSR TTYTST      ;TTY OR KB ?
1457   E90A F0 1A              BEQ RCHTTY
1458   E90C 20 EF EC           JSR ROONEK      ;CLR MSK & GET A KEY
1459   E90F 88                 DEY
1460   E910 30 13              BMI RCH3        ;RTN ON NO KEY
1461   E912 A2 00              LDX #0
1462   E914 20 82 EC           JSR GETK2       ;GET THE KEY
1463   E917 C9 1B              CMP #ESCAPE
1464   E919 F0 3B              BEQ REA1        ;TO COMMAN & SET I/O TO TERMINAL
1465   E91B C9 20              CMP #' '        ;WAIT KEY
1466   E91D D0 06              BNE RCH3        ;RTN, IGNORE OTHER KEYS
1467   E91F 20 EF EC    RCH2   JSR ROONEK      ;WAIT TILL HE RELEASE IT &
1468   E922 88                 DEY             ;QUIT WAITING ON NEXT KEY
1469   E923 30 FA              BMI RCH2
1470   E925 60          RCH3   RTS
1471   E926 70 13       RCHTTY BVS RCHT1       ;TTI=PB6 ---> V (OVERFL FLG)
1472   E928 2C C0 A4    RCHT2  BIT DRB         ;WAIT TILL HE RELEASE IT
1473   E92B 50 FB              BVC RCHT2
1474   E92D 20 0F EC           JSR DELAY
1475   E930 20 DB EB           JSR GETTTY      ;GET A CHAR
1476   E933 C9 1B              CMP #ESCAPE
1477   E935 F0 1F              BEQ REA1        ;TO COMMAN
1478   E937 C9 20              CMP #' '
1479   E939 D0 ED              BNE RCHT2
1480   E93B 60          RCHT1  RTS             ;QUIT WAITING ON ANY KEY
1481   E93C             
1482   E93C             ;READ ONE CHAR FROM KB/TTY & PRESERVE X,Y
1483   E93C 20 9E EB    READ   JSR PHXY        ;PUSH X & Y
1484   E93F 20 42 E8           JSR TTYTST      ;TTY OR KB ?
1485   E942 D0 06              BNE READ1
1486   E944 20 DB EB           JSR GETTTY
1487   E947 4C 4D E9           JMP READ2
1488   E94A 20 40 EC    READ1  JSR GETKEY
1489   E94D 20 AC EB    READ2  JSR PLXY        ;PULL X & Y
1490   E950 29 7F              AND #$7F        ;STRIP PARITY
1491   E952 C9 1B              CMP #ESCAPE
1492   E954 D0 E5              BNE RCHT1       ;RTN
1493   E956 20 3D FF    REA1   JSR PATC18      ;<CR> & CLR BUFFERS
1494   E959 4C A1 E1           JMP COMIN       ;BOTH I/O TO TERMINAL
1495   E95C             
1496   E95C             ;READ WITH RUBOUT OR DELETE POSSIBLE
1497   E95C 20 DC E7    RB2    JSR PSLS        ;SLASH OR BACK SPACE
1498   E95F 20 83 FE    RDRUP  JSR CUREAD
1499   E962 C9 08              CMP #RUB        ;RUBOUT
1500   E964 F0 04              BEQ RDR1
1501   E966 C9 7F              CMP #$7F        ;ALSO DELETE
1502   E968 D0 0C              BNE RED2        ;ECHO IF NOT <CR>
1503   E96A             ;RUBOUT TO DELETE CHAR
1504   E96A 88          RDR1   DEY
1505   E96B 10 EF              BPL RB2
1506   E96D C8                 INY
1507   E96E F0 EF              BEQ RDRUP
1508   E970             
1509   E970             ;OUTPUT MESSAGE THEN INPUT CHR
1510   E970 20 AF E7    KEPR   JSR KEP
1511   E973             
1512   E973             ;READ AND ECHO A CHAR FROM KB OR TTY
1513   E973 20 83 FE    REDOUT JSR CUREAD
1514   E976 C9 0D       RED2   CMP #CR
1515   E978 F0 C1              BEQ RCHT1       ;DO NOT ECHO <CR>
1516   E97A             
1517   E97A             ;OUTPUTS A CHAR TO EITHER TTY OR D/P
1518   E97A 48          OUTPUT PHA             ;SAVE IT
1519   E97B AD 11 A4    OUT1   LDA PRIFLG      ;IF LSB=1 OUTPUT ONLY TO DISP
1520   E97E 29 01              AND #$01
1521   E980 F0 04              BEQ OUT1A
1522   E982 68                 PLA
1523   E983 4C 02 EF           JMP OUTDP1      ;ONLY TO DISPL
1524   E986 20 42 E8    OUT1A  JSR TTYTST      ;TTY OR KB ?
1525   E989 D0 04              BNE OUT2
1526   E98B 68                 PLA
1527   E98C 4C A8 EE           JMP OUTTTY      ;TO TTY
1528   E98F 68          OUT2   PLA
1529   E990 4C FC EE           JMP OUTDP       ;TO DISP & PRINTR
1530   E993             
1531   E993             ;GET A CHR FROM CURRENT INPUT DEVICE (SET ON INFLG)
1532   E993 AD 12 A4    INALL  LDA INFLG
1533   E996 C9 54              CMP #'T'
1534   E998 D0 03              BNE *+5
1535   E99A 4C 3B ED           JMP TIBYTE      ;CHAR FROM BUFFER
1536   E99D C9 4B              CMP #'K'        ;WITH KIM FORMAT
1537   E99F D0 03              BNE *+5
1538   E9A1 4C 29 EE           JMP GETTAP      ;DIRECTLY FROM TAPE
1539   E9A4 C9 4D              CMP #'M'        ;MEMORY FOR ASM?
1540   E9A6 D0 03              BNE *+5
1541   E9A8 4C D0 FA           JMP MREAD
1542   E9AB C9 55              CMP #'U'        ;USER ROUTINE?
1543   E9AD D0 04              BNE *+6
1544   E9AF 38                 SEC             ;SET FLG FOR NORMAL INPUT
1545   E9B0 6C 08 01           JMP (UIN)
1546   E9B3 C9 4C              CMP #'L'        ;TO LOAD PPR TAPE
1547   E9B5 D0 A8              BNE RDRUP
1548   E9B7 4C DB EB           JMP GETTTY      ; FROM TTY
1549   E9BA             
1550   E9BA             ;.FILE A2
1551   E9BA A9 3B       SEMI   LDA #SEMICOLON  ;OUTPUT A ";"
1552   E9BC             ;WRITE A CHR TO OUTPUT DEVICE (SET ON OUTFLG)
1553   E9BC 48          OUTALL PHA
1554   E9BD AD 13 A4           LDA OUTFLG
1555   E9C0             ;TAPE BY BLOCKS
1556   E9C0 C9 54              CMP #'T'        ;TAPES ?
1557   E9C2 D0 04              BNE OUTA1
1558   E9C4 68                 PLA
1559   E9C5 4C 8B F1           JMP TOBYTE      ;OUTPUT ONE CHAR TO TAPE BUFFER
1560   E9C8             ;TAPE KIM FORMAT
1561   E9C8 C9 4B       OUTA1  CMP #'K'        ;KIM-1 ?
1562   E9CA D0 04              BNE OUTA2
1563   E9CC 68                 PLA
1564   E9CD 4C 4A F2           JMP OUTTAP
1565   E9D0             ;PRINTER
1566   E9D0 C9 50       OUTA2  CMP #'P'        ;PRINTER ?
1567   E9D2 D0 0E              BNE OUTA3
1568   E9D4 38                 SEC             ;TURN PRINTER ON
1569   E9D5 6E 11 A4           ROR PRIFLG
1570   E9D8 68                 PLA
1571   E9D9 08                 PHP
1572   E9DA 20 00 F0           JSR OUTPRI
1573   E9DD 28                 PLP
1574   E9DE 2E 11 A4           ROL PRIFLG      ;RESTORE FLG
1575   E9E1 60                 RTS
1576   E9E2             ;USER DEFINED
1577   E9E2 C9 55       OUTA3  CMP #'U'        ;USER ROUTINE?
1578   E9E4 D0 04              BNE OUTA4
1579   E9E6 38                 SEC             ;SET FLG FOR NORMAL OUTPUT
1580   E9E7 6C 0A 01           JMP (UOUT)      ;YES
1581   E9EA             ;NOWHERE OR TO TTY ,D/P
1582   E9EA C9 58       OUTA4  CMP #'X'        ;EAT IT?
1583   E9EC D0 8D              BNE OUT1        ;OUTPUT TO TTY OR D/P
1584   E9EE 68                 PLA
1585   E9EF 60                 RTS
1586   E9F0             
1587   E9F0             ;THIS ROUTINE OUTPUTS A CRLF TO ANY OUTPUT DEV
1588   E9F0             ;LF AND NULL IS SENT ONLY TO TTY
1589   E9F0 A9 0D       CRLF   LDA #CR
1590   E9F2 20 BC E9           JSR OUTALL
1591   E9F5 20 42 E8           JSR TTYTST      ;TTY OR KB ?
1592   E9F8 D0 29              BNE CR2J
1593   E9FA AD 13 A4           LDA OUTFLG      ;LF ONLY TO TTY
1594   E9FD C9 54              CMP #'T'
1595   E9FF F0 22              BEQ CR2J
1596   EA01 C9 4B              CMP #'K'
1597   EA03 F0 1E              BEQ CR2J
1598   EA05 C9 50              CMP #'P'
1599   EA07 F0 1A              BEQ CR2J
1600   EA09 A9 0A              LDA #LF
1601   EA0B 20 BC E9           JSR OUTALL
1602   EA0E A9 FF              LDA #NULLC
1603   EA10 4C BC E9           JMP OUTALL
1604   EA13             
1605   EA13             ;CRLF TO TERMINAL (TTY OR D/P) ONLY
1606   EA13 48          CRLOW  PHA             ;SAVE A
1607   EA14 AD 13 A4           LDA OUTFLG
1608   EA17 48                 PHA
1609   EA18 20 01 E9           JSR OUTLOW
1610   EA1B 20 F0 E9           JSR CRLF
1611   EA1E 68                 PLA
1612   EA1F 8D 13 A4           STA OUTFLG
1613   EA22 68                 PLA
1614   EA23 60          CR2J   RTS
1615   EA24             
1616   EA24             ;OUTPUT <CR> TO TTY IF SWITCH ON TTY & INFLG NOT L
1617   EA24             ;DONT CLR DISPLAY BUT CLEARS PNTRS FOR NEXT LINE
1618   EA24             ;IF PRNTR HAS PRINTED ON 21RST CHR DONT OUTPUT <CR>
1619   EA24 AD 12 A4    CRCK   LDA INFLG       ;NO <CR> IF "L"
1620   EA27 C9 4C              CMP #'L'
1621   EA29 D0 01              BNE CRCK1
1622   EA2B 60                 RTS
1623   EA2C 20 42 E8    CRCK1  JSR TTYTST      ;CHECK IF TTY OR KB
1624   EA2F F0 E2              BEQ CRLOW       ;BRNCH IF TTY
1625   EA31             ;IF PRINTR PTR=0 ,DO NOT CLR PRI
1626   EA31 AD 16 A4           LDA CURPOS
1627   EA34 F0 05              BEQ CRCK2       ;IF PTR=0 ,NO <CR>
1628   EA36 A9 0D              LDA #CR
1629   EA38 20 00 F0           JSR OUTPRI
1630   EA3B A9 8D       CRCK2  LDA #CR+$80     ;<CR> ONLY FOR TV
1631   EA3D 4C 02 EF           JMP OUTDP1
1632   EA40 EA                 NOP
1633   EA41 EA                 NOP
1634   EA42             
1635   EA42             ;WRITE A THEN X IN ASCII TO THE OUTPUT DEV
1636   EA42 20 46 EA    WRAX   JSR NUMA
1637   EA45 8A                 TXA
1638   EA46             
1639   EA46             ;PRINT ONE BYTE=TWO ASCII CHARS TO OUTPUT DEVICE
1640   EA46 48          NUMA   PHA
1641   EA47 4A                 LSR A
1642   EA48 4A                 LSR A
1643   EA49 4A                 LSR A
1644   EA4A 4A                 LSR A
1645   EA4B 20 51 EA           JSR NOUT
1646   EA4E 68                 PLA
1647   EA4F 29 0F              AND #$F
1648   EA51 18          NOUT   CLC
1649   EA52 69 30              ADC #'0'
1650   EA54 C9 3A              CMP #'9'+1
1651   EA56 90 02              BCC LT10
1652   EA58 69 06              ADC #6          ;CARRY IS SET
1653   EA5A 4C BC E9    LT10   JMP OUTALL
1654   EA5D             
1655   EA5D             ;READ TWO CHR & PACK THEM INTO ONE BYTE
1656   EA5D             ;PART OF ALTER MEMORY , / COMM
1657   EA5D 20 73 E9    RD2    JSR REDOUT
1658   EA60 C9 0D              CMP #CR         ;<CR>?
1659   EA62 F0 17              BEQ RSPAC
1660   EA64 C9 20              CMP #' '        ;FOR MEMORY ALTER
1661   EA66 F0 13              BEQ RSPAC
1662   EA68 C9 2E              CMP #'.'        ;TREAT "." AS <SPACE>
1663   EA6A D0 04              BNE RD1
1664   EA6C A9 20              LDA #' '
1665   EA6E D0 0B              BNE RSPAC
1666   EA70 20 84 EA    RD1    JSR PACK
1667   EA73 B0 06              BCS RSPAC
1668   EA75 20 73 E9           JSR REDOUT
1669   EA78 4C 84 EA           JMP PACK
1670   EA7B             ;WAS SPACE OR <CR>
1671   EA7B 38          RSPAC  SEC
1672   EA7C 60                 RTS
1673   EA7D             
1674   EA7D             ;CONVERT ACC IN ASCII TO ACC IN HEX (4 MSB=0)
1675   EA7D 48          HEX    PHA             ;SAVE A
1676   EA7E A9 00              LDA #0          ;CLEAR STIY IF HEX
1677   EA80 8D 29 A4           STA STIY+2      ;BECAUSE ONLY ONCE
1678   EA83 68                 PLA
1679   EA84             ;PACK TWO ASCII INTO ONE HEX (CALL SUBR TWO TIMES)
1680   EA84             ;RESULT IS GIVEN ON ACC WITH FIRST CHR INTO 4 MSB
1681   EA84 C9 30       PACK   CMP #'0'        ;< 30 ?
1682   EA86 90 F3              BCC RSPAC
1683   EA88 C9 47              CMP #'F'+1      ; > 47 ?
1684   EA8A B0 EF              BCS RSPAC
1685   EA8C C9 3A              CMP #'9'+1      ; < $10
1686   EA8E 90 06              BCC PAK1
1687   EA90 C9 40              CMP #'A'-1      ; > $10 ?
1688   EA92 90 E7              BCC RSPAC
1689   EA94 69 08              ADC #8          ;ADD 9 IF LETTER (C IS SET)
1690   EA96 2A          PAK1   ROL A           ;SHIFT A 4 TIMES
1691   EA97 2A                 ROL A
1692   EA98 2A                 ROL A
1693   EA99 2A                 ROL A
1694   EA9A 8E 2D A4           STX CPIY+3      ;SAVE X
1695   EA9D A2 04              LDX #4
1696   EA9F 2A          PAK2   ROL A           ;TRANSFER A TO STIY
1697   EAA0 2E 29 A4           ROL STIY+2      ; THRU CARRY
1698   EAA3 CA                 DEX
1699   EAA4 D0 F9              BNE PAK2
1700   EAA6 AE 2D A4           LDX CPIY+3      ;REST X
1701   EAA9 AD 29 A4           LDA STIY+2
1702   EAAC 18                 CLC
1703   EAAD 60                 RTS
1704   EAAE             
1705   EAAE             ;GET FOUR BYTE ADDR ,TAKE LAST FOUR CHR TO...
1706   EAAE             ;CALCULATE ADDR .ALLOW DELETE ALSO
1707   EAAE 20 D8 E7    ADDIN  JSR EQUAL
1708   EAB1 AD 15 A4    ADDNE  LDA CURPO2      ;SAVE POSITION
1709   EAB4 48                 PHA
1710   EAB5 A0 00              LDY #0
1711   EAB7 20 5F E9    ADDN1  JSR RDRUP
1712   EABA C9 0D              CMP #CR
1713   EABC F0 09              BEQ ADDN2
1714   EABE C9 20              CMP #' '
1715   EAC0 F0 05              BEQ ADDN2
1716   EAC2 C8                 INY
1717   EAC3 C0 0B              CPY #11         ;ALLOW 10
1718   EAC5 90 F0              BCC ADDN1
1719   EAC7 68          ADDN2  PLA
1720   EAC8 8D 2D A4           STA CPIY+3      ;SAVE
1721   EACB C0 00              CPY #0          ;IF FIRST CHR PUT DEFAULT VALUES
1722   EACD D0 0D              BNE ADDN3
1723   EACF A9 02              LDA #$02
1724   EAD1 8D 1D A4           STA ADDR+1      ;DEFAULT OF 0200
1725   EAD4 8D 1E A4           STA CKSUM       ;DEFAULT
1726   EAD7 8C 1C A4           STY ADDR
1727   EADA 18                 CLC
1728   EADB 60                 RTS
1729   EADC A2 00       ADDN3  LDX #0
1730   EADE 88                 DEY             ;Y-4
1731   EADF 88                 DEY
1732   EAE0 88                 DEY
1733   EAE1 88                 DEY
1734   EAE2 10 13              BPL ADDN5       ;BRANCH IF > 4 CHR
1735   EAE4 98                 TYA
1736   EAE5 49 FF              EOR #$FF
1737   EAE7 A8                 TAY             ;# OF LEADING 0
1738   EAE8 A9 30       ADDN4  LDA #$30
1739   EAEA 9D 1C A4           STA ADDR,X
1740   EAED E8                 INX
1741   EAEE 88                 DEY
1742   EAEF 10 F7              BPL ADDN4
1743   EAF1 AC 2D A4           LDY CPIY+3      ;NOW THE CHR
1744   EAF4 4C FD EA           JMP ADDN6
1745   EAF7 98          ADDN5  TYA             ;PUT CHR
1746   EAF8 18                 CLC
1747   EAF9 6D 2D A4           ADC CPIY+3
1748   EAFC A8                 TAY
1749   EAFD B9 38 A4    ADDN6  LDA DIBUFF,Y    ;FROM DISP BUFF
1750   EB00 9D 1C A4           STA ADDR,X
1751   EB03 C8                 INY
1752   EB04 E8                 INX
1753   EB05 E0 04              CPX #4
1754   EB07 D0 F4              BNE ADDN6
1755   EB09 A2 01              LDX #1
1756   EB0B A0 00              LDY #0          ;CNVRT CHR TO HEX
1757   EB0D B9 1C A4    ADDN7  LDA ADDR,Y
1758   EB10 20 7D EA           JSR HEX
1759   EB13 B0 16              BCS ADDN8
1760   EB15 C8                 INY
1761   EB16 B9 1C A4           LDA ADDR,Y
1762   EB19 C8                 INY
1763   EB1A 20 84 EA           JSR PACK        ;PACK TWO CHRS INTO 1 BYTE
1764   EB1D B0 0C              BCS ADDN8       ;BRCNH IF ERROR
1765   EB1F 9D 1C A4           STA ADDR,X
1766   EB22 CA                 DEX
1767   EB23 10 E8              BPL ADDN7
1768   EB25 E8                 INX             ;X=0
1769   EB26 8E 1E A4           STX CKSUM       ;TO INDICATE WE GOT AN ADDR
1770   EB29 18                 CLC             ;NO INVALID CHARS
1771   EB2A 60                 RTS
1772   EB2B 20 94 E3    ADDN8  JSR CKER00      ;OUTPUT ERROR MSG
1773   EB2E 20 24 EA           JSR CRCK        ;<CR>
1774   EB31 38                 SEC             ;SET CARRY FOR INVALID CHR
1775   EB32 60                 RTS
1776   EB33             
1777   EB33             ;MEMORY FAIL TO WRITE MSG & SPECIFIC ADDRESS
1778   EB33 20 24 EA    MEMERR JSR CRCK
1779   EB36 20 CD E2           JSR NXTADD      ;ADD Y TO ADDR+1,ADDR
1780   EB39 A0 31              LDY #M11-M1     ;PRINT "MEM FAIL"
1781   EB3B 20 AF E7           JSR KEP         ;FAIL MSG
1782   EB3E 20 DB E2           JSR WRITAZ      ;PRINT ADDR+1 , ADDR
1783   EB41 4C A1 E1           JMP COMIN
1784   EB44             
1785   EB44             ;CLEAR DISPLAY & PRINTER POINTERS
1786   EB44 A9 00       CLR    LDA #0
1787   EB46 8D 15 A4           STA CURPO2      ;DISP PNTR
1788   EB49 8D 16 A4           STA CURPOS      ;PRINTR PNTR
1789   EB4C 60                 RTS
1790   EB4D             
1791   EB4D             ;CLEAR CKSUM
1792   EB4D A9 00       CLRCK  LDA #0
1793   EB4F 8D 1F A4           STA CKSUM+1
1794   EB52 8D 1E A4           STA CKSUM
1795   EB55 60                 RTS
1796   EB56             
1797   EB56             ;CODE FOR PAGE ZERO SIMULATION
1798   EB56             ;SUBR LDAY-SIMULATES LDA (N),Y INSTR WITHOUT PAG 0
1799   EB56             ;BY PUTTING INDIR ADDR INTO RAM & THEN EXEC LDA NM,Y
1800   EB56 A9 25       PCLLD  LDA #SAVPC%256      ;FOR DISASSEMBLER
1801   EB58 8C 2D A4    LDAY   STY CPIY+3      ;SAVE Y
1802   EB5B A8                 TAY
1803   EB5C B9 00 A4           LDA MONRAM,Y    ;MONRAM=MONITOR RAM
1804   EB5F 8D 2B A4           STA LDIY+1
1805   EB62 B9 01 A4           LDA MONRAM+1,Y
1806   EB65 8D 2C A4           STA LDIY+2
1807   EB68 AC 2D A4           LDY CPIY+3      ;REST Y
1808   EB6B A9 B9              LDA #$B9        ;INST FOR LDA NM,Y
1809   EB6D 8D 2A A4           STA LDIY
1810   EB70 A9 60              LDA #$60        ;RTS
1811   EB72 8D 2D A4           STA LDIY+3
1812   EB75 4C 2A A4           JMP LDIY        ;START EXECUTING LDA (),Y
1813   EB78             
1814   EB78             ;SUBR STORE AT ADDR & CMP WITHOUT PAG 0
1815   EB78             ;REPLACES STA (ADDR),Y  &  CMP (ADDR),Y
1816   EB78             ;LOOK THAT ADDR & ADDR+1 ARE NOT ON PAG 0
1817   EB78 48          SADDR  PHA
1818   EB79 AD 1C A4           LDA ADDR
1819   EB7C 8D 28 A4           STA STIY+1
1820   EB7F 8D 2B A4           STA CPIY+1
1821   EB82 AD 1D A4           LDA ADDR+1
1822   EB85 8D 29 A4           STA STIY+2
1823   EB88 8D 2C A4           STA CPIY+2
1824   EB8B A9 99              LDA #$99        ;STA INSTR
1825   EB8D 8D 27 A4           STA STIY
1826   EB90 A9 D9              LDA #$D9        ;CMP INSTR
1827   EB92 8D 2A A4           STA CPIY
1828   EB95 A9 60              LDA #$60        ;RTS
1829   EB97 8D 2D A4           STA LDIY+3
1830   EB9A 68                 PLA
1831   EB9B 4C 27 A4           JMP STIY        ;START EXECUTING STA (),Y
1832   EB9E             
1833   EB9E             ;PUSH X & Y WITHOUT CHANGING THE REGS
1834   EB9E 8D 2D A4    PHXY   STA CPIY+3      ;SAVE ACC
1835   EBA1 98                 TYA
1836   EBA2 48                 PHA             ;PUSH Y
1837   EBA3 8A                 TXA
1838   EBA4 48                 PHA             ;PUSH X
1839   EBA5 20 BA EB           JSR SWSTAK      ;SWAP X , Y WITH RTRN ADDR FROM S`
1840   EBA8 AD 2D A4           LDA CPIY+3
1841   EBAB 60                 RTS
1842   EBAC             
1843   EBAC             ;PULL X & Y WITHOUT CHANGING ACC
1844   EBAC             ;IT HAS TO BE CALLED BY JSR & NOT BY JMP INSTR
1845   EBAC             ;SINCE IT SWAPS THE STACK
1846   EBAC 8D 2D A4    PLXY   STA CPIY+3
1847   EBAF 20 BA EB           JSR SWSTAK      ;SWAP X , Y WITH RTRN ADDR FROM`
1848   EBB2 68                 PLA
1849   EBB3 AA                 TAX             ;PULL X
1850   EBB4 68                 PLA
1851   EBB5 A8                 TAY             ;PULL Y
1852   EBB6 AD 2D A4           LDA CPIY+3
1853   EBB9 60                 RTS
1854   EBBA             
1855   EBBA             ;SWAP STACK
1856   EBBA BA          SWSTAK TSX
1857   EBBB A9 02              LDA #2
1858   EBBD 48          SWST1  PHA
1859   EBBE BD 06 01           LDA $0106,X     ;GET PCH OR PCL
1860   EBC1 BC 04 01           LDY $0104,X     ;GET Y OR X REGS
1861   EBC4 9D 04 01           STA $0104,X
1862   EBC7 98                 TYA
1863   EBC8 9D 06 01           STA $0106,X
1864   EBCB CA                 DEX
1865   EBCC 68                 PLA
1866   EBCD 38                 SEC
1867   EBCE E9 01              SBC #1
1868   EBD0 D0 EB              BNE SWST1
1869   EBD2 BD 08 01           LDA $0108,X     ;RESTORE Y & X FROM STACK
1870   EBD5 A8                 TAY
1871   EBD6 BD 07 01           LDA $0107,X
1872   EBD9 AA                 TAX
1873   EBDA 60                 RTS
1874   EBDB             
1875   EBDB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1876   EBDB             ;GET A CHAR FROM TTY SUBR INTO ACC ,SAVES X
1877   EBDB 8A          GETTTY TXA             ;SAVE X
1878   EBDC 48                 PHA
1879   EBDD A2 07              LDX #$07        ;SET UP FOR 8 BIT CNT
1880   EBDF 8E 2A A4           STX CPIY        ;CLR MSB
1881   EBE2 2C C0 A4    GET1   BIT DRB         ;A^M ,  PB6->V
1882   EBE5 70 FB              BVS GET1        ;WAIT FOR START BIT
1883   EBE7 20 0F EC           JSR DELAY       ;DELAY 1 BIT
1884   EBEA 20 23 EC           JSR DEHALF      ;DELAY 1/2 BIT TIME
1885   EBED AD C0 A4    GET3   LDA DRB         ;GET 8 BITS
1886   EBF0 29 40              AND #$40        ;MASK OFF OTHER BITS,ONLY PB6
1887   EBF2 4E 2A A4           LSR CPIY        ;SHIFT RIGHT CHARACTER
1888   EBF5 0D 2A A4           ORA CPIY
1889   EBF8 8D 2A A4           STA CPIY
1890   EBFB 20 0F EC           JSR DELAY       ;DELAY 1 BIT TIME
1891   EBFE CA                 DEX
1892   EBFF D0 EC              BNE GET3        ;GET NEXT BIT
1893   EC01 20 0F EC           JSR DELAY       ;DO NOT CARE FOR PARITY BIT
1894   EC04 20 23 EC           JSR DEHALF      ;UNTIL WE GET BACK TO ONE AGAIN
1895   EC07 68                 PLA             ;RESTORE X
1896   EC08 AA                 TAX
1897   EC09 AD 2A A4           LDA CPIY
1898   EC0C 29 7F              AND #$7F        ;CLEAR PARITY BIT
1899   EC0E 60                 RTS
1900   EC0F             
1901   EC0F             ;DELAY 1 BIT TIME AS GIVEN BY BAUD RATE
1902   EC0F AD 18 A4    DELAY  LDA CNTL30      ;START TIMER T2
1903   EC12 8D C8 A4           STA T2L
1904   EC15 AD 17 A4           LDA CNTH30
1905   EC18 8D C9 A4    DE1    STA T2H
1906   EC1B AD CD A4    DE2    LDA IFR         ;GET INT FLG FOR T2
1907   EC1E 29 20              AND #MT2
1908   EC20 F0 F9              BEQ DE2         ;TIME OUT ?
1909   EC22 60                 RTS
1910   EC23             
1911   EC23             ;DELAY HALF BIT TIME
1912   EC23             ;TOTAL TIME DIVIDED BY 2
1913   EC23 AD 17 A4    DEHALF LDA CNTH30
1914   EC26 4A                 LSR A           ;LSB TO CARRY
1915   EC27 AD 18 A4           LDA CNTL30
1916   EC2A 6A                 ROR A           ;SHIFT WITH CARRY
1917   EC2B 8D C8 A4           STA T2L
1918   EC2E AD 17 A4           LDA CNTH30
1919   EC31 4A                 LSR A
1920   EC32 8D C9 A4           STA T2H
1921   EC35 4C 1B EC           JMP DE2
1922   EC38             
1923   EC38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1924   EC38 A9 00       GETKD0 LDA #0
1925   EC3A 8D 77 A4           STA IDOT        ;GO ANOTHER 90 DOTS
1926   EC3D 20 4A F0           JSR IPO0        ;OUTPUT 90 DOTS TO PRI (ZEROS)
1927   EC40             
1928   EC40             ;GET A CHAR FROM KB SUBROUTINE
1929   EC40             ;FROM KB Y=ROW ,STBKEY=COLUMNS (STROBE)
1930   EC40             ;X=CTRL OR SHIFT ,OTHERWISE X=0
1931   EC40             ;GETKEY  
1932   EC40             ;GETKY
1933   EC40             ;        JSR PS2KB_Input
1934   EC40             ;        JMP GETK8
1935   EC40 20 EF EC    GETKEY JSR ROONEK      ;WAIT IF LAST KEY STILL DOWN
1936   EC43 20 2A ED    GETKY  JSR DEBKEY      ;DEBOUNCE KEY (5 MSEC)
1937   EC46             ;CTRL OR SHIFT ?
1938   EC46 A9 8F              LDA #$8F        ;CHCK CLMN 5,6,7
1939   EC48 8D E0 A4           STA DRA2
1940   EC4B AD E2 A4           LDA DRB2        ;CHCK ROW 1
1941   EC4E 4A                 LSR A
1942   EC4F B0 20              BCS GETK1       ;IF=1 ,NO CTRL OR SHIFT
1943   EC51 A2 03              LDX #3          ;CLMN 5,6,7 (CNTRL,SHIFTL,SHIFTR)
1944   EC53 A9 7F              LDA #$7F        ;CTRL OR SHIFT ,SO WHICH ONE?
1945   EC55 38          GETK0  SEC
1946   EC56 6A                 ROR A
1947   EC57 48                 PHA
1948   EC58 20 0B ED           JSR ONEK2       ;LETS GET CTRL OR SHIFT INTO X
1949   EC5B AD E2 A4           LDA DRB2
1950   EC5E 4A                 LSR A           ;ONLY ROW 1
1951   EC5F 90 06              BCC GETK00      ;GOT YOU
1952   EC61 68                 PLA
1953   EC62 CA                 DEX
1954   EC63 D0 F0              BNE GETK0
1955   EC65 F0 DC              BEQ GETKY       ;THERE IS A MISTAKE CHECK AGAIN
1956   EC67 68          GETK00 PLA             ;NOW GET STBKEY INTO X
1957   EC68 AD 2B A4           LDA STBKEY      ;CLMN INTO X
1958   EC6B 49 FF              EOR #$FF        ;COMPLEMENT BECAUSE STRBS ARE 0
1959   EC6D AA                 TAX             ;CTRL OR SHIFT TO X
1960   EC6E EE 2A A4           INC KMASK       ;SET MSK=$01
1961   EC71             ;NOW GET ANY KEY
1962   EC71 20 05 ED    GETK1  JSR ONEKEY      ;GET A KEY
1963   EC74 88                 DEY             ;CHK THE ROW (1-8)
1964   EC75 D0 09              BNE GETK1B      ;CHK IF CTRL OR SHIFT
1965   EC77 AD 2B A4           LDA STBKEY      ;WERE ENTERED AT THE LAST MOMENT
1966   EC7A C9 F7              CMP #$F7        ;IF CLMN 5,6,7,8 TO IT AGAIN
1967   EC7C B0 04              BCS GETK2
1968   EC7E 90 C3              BCC GETKY       ;SEND IT TO GET CTRL OR SHIFT
1969   EC80 30 C1       GETK1B BMI GETKY       ;NO KEY ,CLEAR MSK
1970   EC82             ;WE HAVE A KEY ,DECODE IT
1971   EC82 20 2C ED    GETK2  JSR DEBK1       ;DEBOUNCE KEY (5 MSEC)
1972   EC85 98                 TYA             ;MULT BY 8
1973   EC86 0A                 ASL A
1974   EC87 0A                 ASL A
1975   EC88 0A                 ASL A
1976   EC89 A8                 TAY             ;NOW Y HAS ROW ADDR FROM ROW 1
1977   EC8A AD 2B A4           LDA STBKEY      ;ADD COLUMN TO Y
1978   EC8D 4A          GETK3  LSR A
1979   EC8E 90 03              BCC GETK4
1980   EC90 C8                 INY
1981   EC91 D0 FA              BNE GETK3
1982   EC93 B9 21 F4    GETK4  LDA ROW1,Y      ;GET THE CHR
1983   EC96 48                 PHA
1984   EC97 8A                 TXA             ;SEE IF CTRL OR SHIFT WAS USED
1985   EC98 F0 24              BEQ GETK7       ;BRCH IF NO CTRL OR SHIFT
1986   EC9A 29 10              AND #$10        ;CTRL ?
1987   EC9C F0 06              BEQ GETK5       ;NO ,GO GETKS
1988   EC9E 68                 PLA
1989   EC9F 29 3F              AND #$3F        ;MSK OFF 2 MSB FOR CONTROL
1990   ECA1 4C BF EC           JMP GETK8       ;EXIT
1991   ECA4 68          GETK5  PLA
1992   ECA5 48                 PHA             ;SAVE IT
1993   ECA6 29 40              AND #$40        ;IF ALPHA CHARS DO NOT SHIFT
1994   ECA8 D0 14              BNE GETK7
1995   ECAA 68                 PLA
1996   ECAB 48                 PHA
1997   ECAC 29 0F              AND #$0F        ;ONLY LSB
1998   ECAE F0 0E              BEQ GETK7       ;DO NOT INTERCHANGE <SPACE> OR 0
1999   ECB0 C9 0C              CMP #$0C        ;ACC>=$0C ?
2000   ECB2 B0 05              BCS GETK6       ;YES ACC>=$0C
2001   ECB4 68                 PLA             ;NO, ACC<$0C
2002   ECB5 29 EF              AND #$EF        ;STRIP OFF BIT 4
2003   ECB7 D0 06              BNE GETK8       ;EXIT
2004   ECB9 68          GETK6  PLA             ;ACC>=$0C
2005   ECBA 09 10              ORA #$10        ;BIT 4= 1
2006   ECBC D0 01              BNE GETK8       ;EXIT
2007   ECBE 68          GETK7  PLA
2008   ECBF             ;CHECK FOR "ADV PAP","PRI LINE", OR "TOGL PRIFLG"
2009   ECBF             ;IN THIS WAY WE DONT HAVE TO CHCK FOR THIS COMM
2010   ECBF C9 60       GETK8  CMP #$60        ;ADV PAPER COMM
2011   ECC1 D0 06              BNE GETK11
2012   ECC3 E0 00              CPX #0          ;IF SHIFT IS NOT ADV PAPER
2013   ECC5             ;       CMP #$40
2014   ECC5 F0 25              BEQ GETK10      ;NO SHIFT ,SO ADVPAPER
2015   ECC7 29 4F              AND #$4F        ;CONVRT TO "@"
2016   ECC9             ;        NOP
2017   ECC9             ;        NOP
2018   ECC9 C9 1C       GETK11 CMP #$1C         ;SEE IF TOGGL PRIFLG (CONTRL PRI)
2019   ECCB D0 14              BNE GETK13
2020   ECCD 20 E1 E6           JSR PRITR       ;GO TOGGLE FLG
2021   ECD0 A0 01              LDY #1          ;GET THE PTRS BACK 3 SPACES
2022   ECD2 B9 15 A4    GETK12 LDA CURPO2,Y
2023   ECD5 38                 SEC
2024   ECD6 E9 03              SBC #3          ;BECAUSE "ON ,OFF" MSGS
2025   ECD8 99 15 A4           STA CURPO2,Y
2026   ECDB 88                 DEY
2027   ECDC 10 F4              BPL GETK12
2028   ECDE 4C 40 EC           JMP GETKEY
2029   ECE1 C9 5C       GETK13 CMP #BACKSLASH  ;PRINT LINE COMMAND
2030   ECE3 D0 06              BNE GETK14
2031   ECE5 20 4A F0           JSR IPS0                 ;PRINT WHATEVER IS IN BUFFER
2032   ECE8 4C 40 EC           JMP GETKEY
2033   ECEB 60          GETK14 RTS
2034   ECEC 4C 38 EC    GETK10 JMP GETKD0
2035   ECEF             
2036   ECEF             ;WAIT IF LAST KEY STILL DOWN  (ROLLOVER)
2037   ECEF AD E2 A4    ROONEK LDA DRB2        ;SEE IF KEY STILL DOWN
2038   ECF2 C9 FF              CMP #$FF
2039   ECF4 F0 0A              BEQ ROO1        ;NO KEY AT ALL, CLR ROLLFL
2040   ECF6 0D 7F A4           ORA ROLLFL      ;ACCEPT ONLY LAST KEY
2041   ECF9 49 FF              EOR #$FF        ;STRBS ARE ZEROS TO INVER
2042   ECFB D0 F2              BNE ROONEK
2043   ECFD 20 2A ED           JSR DEBKEY      ;CLR KMASK & DEBOUNCE RELEASE
2044   ED00 A9 00       ROO1   LDA #0          ;CLR KMASK
2045   ED02 8D 2A A4           STA KMASK
2046   ED05             ;GO THRU KB ONCE AND RTN ,IF ANY
2047   ED05             ;KEY Y=ROW (1-8) & STBKEY=CLMN
2048   ED05             ;IF NO KEY Y=0 ,STBKEY=$FF
2049   ED05 A9 7F       ONEKEY LDA #$7F        ;FIRST STROBE TO MSB
2050   ED07 D0 02              BNE ONEK2       ;START AT ONEK2
2051   ED09 38          ONEK1  SEC             ;ONLY ONE PULSE (ZERO)
2052   ED0A 6A                 ROR A           ;SHIFT TO RIGHT
2053   ED0B 8D E0 A4    ONEK2  STA DRA2        ;OUTPUT CLMN STROBE
2054   ED0E 8D 2B A4           STA STBKEY      ;SAVE IT
2055   ED11 A0 08              LDY #8          ;CHECK 8 ROWS
2056   ED13 AD E2 A4           LDA DRB2        ;ANY KEY ?
2057   ED16 0D 2A A4           ORA KMASK       ;DISABLE ROW 1 IF CTRL OR SHIFT
2058   ED19 8D 7F A4           STA ROLLFL      ;SAVE WHICH KEY IT WAS
2059   ED1C 0A          ONEK3  ASL A
2060   ED1D 90 0A              BCC ONEK4       ;JUMP IF KEY (ZERO)
2061   ED1F 88                 DEY
2062   ED20 D0 FA              BNE ONEK3
2063   ED22 AD 2B A4           LDA STBKEY
2064   ED25 C9 FF              CMP #$FF        ;LAST CLMN ?
2065   ED27 D0 E0              BNE ONEK1       ;NO ,DO NEXT CLMN
2066   ED29 60          ONEK4  RTS
2067   ED2A             
2068   ED2A A2 00       DEBKEY LDX #0          ;CLEAR CNTRL OR SHIFT
2069   ED2C A9 00       DEBK1  LDA #0          ;CLR KMASK
2070   ED2E 8D 2A A4           STA KMASK
2071   ED31 A9 88              LDA #DEBTIM%256     ;DEBOUNCE TIME FOR KEYBOARD
2072   ED33 8D C8 A4           STA T2L
2073   ED36 A9 13              LDA #DEBTIM/256
2074   ED38 4C 18 EC           JMP DE1         ;WAIT FOR 5 MSEC
2075   ED3B             
2076   ED3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2077   ED3B             ;GET A CHAR FROM TAPE SUBROUTINE
2078   ED3B             ;A BUFFER IS USED TO GET BLOCKS OF DATA
2079   ED3B             ;FROM TAPE ,EXCEPT WHEN FORMAT EQUAL TO
2080   ED3B             ;KIM-1 (THE WHOLE FILE IS LOADED AT ONE TIME)
2081   ED3B 20 9E EB    TIBYTE JSR PHXY        ;PUSH X
2082   ED3E AE 36 A4           LDX TAPTR       ;POINTER FOR BUFFER
2083   ED41 E0 50              CPX #80         ;IS BUFFER EMPTY ?
2084   ED43 D0 03              BNE TIB1
2085   ED45 20 53 ED           JSR TIBY1       ;LOAD ANOTHER BLOCK
2086   ED48 BD 16 01    TIB1   LDA TABUFF,X
2087   ED4B E8                 INX
2088   ED4C 8E 36 A4           STX TAPTR
2089   ED4F 20 AC EB           JSR PLXY        ;PULL X
2090   ED52 60                 RTS
2091   ED53             ;LOAD A BLOCK FROM TAPE INTO BUFFER
2092   ED53 20 EA ED    TIBY1  JSR TAISET      ;SET TAPE FOR INPUT
2093   ED56 20 29 EE    TIBY3  JSR GETTAP      ;GET A CHAR FROM TAPE
2094   ED59 C9 23              CMP #'#'        ;CHECK FIRST CHR FOR
2095   ED5B F0 06              BEQ TIBY4       ;START OF BLOCK
2096   ED5D C9 16              CMP #$16        ;IF NOT # SHOULD BE SYN
2097   ED5F D0 F2              BNE TIBY1
2098   ED61 F0 F3              BEQ TIBY3
2099   ED63 A2 00       TIBY4  LDX #0
2100   ED65 20 29 EE    TIBY5  JSR GETTAP      ;NOW LOAD INTO BUFFER
2101   ED68 9D 16 01           STA TABUFF,X
2102   ED6B E8                 INX
2103   ED6C E0 52              CPX #82
2104   ED6E D0 F5              BNE TIBY5
2105   ED70 AD C0 A4           LDA DRB
2106   ED73 29 CF              AND #$CF
2107   ED75 8D C0 A4           STA DRB         ;TURN OFF TAPES
2108   ED78 58                 CLI             ;ENABL INTERR
2109   ED79 20 BD ED           JSR ADDBK1      ;DISPLAY BLK COUNT
2110   ED7C A2 00              LDX #0          ;TO CLEAR PTR IN TIBYTE
2111   ED7E AD 15 01           LDA BLK         ;CHECK THE BLOCK COUNT
2112   ED81 F0 05              BEQ TIBY5A      ;IF FIRST BLK ,DO NOT CMP
2113   ED83 DD 16 01           CMP TABUFF,X
2114   ED86 D0 28              BNE TIBY7       ;BRANCH IF WE MISSED ONE BLOCK
2115   ED88 E8          TIBY5A INX
2116   ED89 8E 36 A4           STX TAPTR
2117   ED8C EE 15 01           INC BLK         ;INCR BLK CONT
2118   ED8F AD 67 01           LDA TABUFF+81   ;STORE THIS BLK CKSUM
2119   ED92 48                 PHA
2120   ED93 AD 66 01           LDA TABUFF+80
2121   ED96 48                 PHA
2122   ED97 CE 12 A4           DEC INFLG       ;SET INFLG DIFF FROM OUTFLG
2123   ED9A 20 E7 F1           JSR BKCKSM      ;COMPUT BLK CKSUM FOR THIS BLK
2124   ED9D 68                 PLA
2125   ED9E CD 66 01           CMP TABUFF+80   ;DO THEY AGREE ?
2126   EDA1 D0 0C              BNE TIBY6
2127   EDA3 68                 PLA
2128   EDA4 CD 67 01           CMP TABUFF+81
2129   EDA7 D0 07              BNE TIBY7
2130   EDA9 EE 12 A4           INC INFLG       ;RESTORE INPUT DEVICE
2131   EDAC A2 01              LDX #1          ;TO GET FIRST CHR IN TIBYTE
2132   EDAE 60                 RTS
2133   EDAF 68          TIBY6  PLA             ;RESTORE STACK PTR
2134   EDB0 68          TIBY7  PLA
2135   EDB1 68                 PLA
2136   EDB2 68                 PLA
2137   EDB3 68                 PLA
2138   EDB4 20 8E E3           JSR CKER0
2139   EDB7 4C A1 E1           JMP COMIN
2140   EDBA             
2141   EDBA             ;ADD 1 TO BLK COUNT AND OUTPUT IT
2142   EDBA EE 15 01    ADDBLK INC BLK         ;INCR BLK CNT
2143   EDBD EE 11 A4    ADDBK1 INC PRIFLG      ;SO DONT OUTPUT TO PRINTR
2144   EDC0 A9 12              LDA #18         ;ONLY OUTPUT IN THIS POSITION
2145   EDC2 8D 15 A4           STA CURPO2
2146   EDC5 AD 4A A4           LDA DIBUFF+18   ;SAVE DISBUF (FOR EDIT)
2147   EDC8 48                 PHA
2148   EDC9 AD 4B A4           LDA DIBUFF+19
2149   EDCC 48                 PHA
2150   EDCD AE 13 A4           LDX OUTFLG      ;SAVE OUTFLG
2151   EDD0 A9 0D              LDA #CR
2152   EDD2 8D 13 A4           STA OUTFLG      ;TO OUTPUT TO TERMINAL
2153   EDD5 AD 16 01           LDA BLK+1       ;BLK CNT COMING FROM TAPE
2154   EDD8 20 46 EA           JSR NUMA        ;OUTPUT IN ASCII
2155   EDDB 8E 13 A4           STX OUTFLG      ;RESTORE OUTFLG
2156   EDDE 68                 PLA
2157   EDDF 8D 4B A4           STA DIBUFF+19
2158   EDE2 68                 PLA
2159   EDE3 8D 4A A4           STA DIBUFF+18
2160   EDE6 CE 11 A4           DEC PRIFLG      ;RESTORE PRI FLG
2161   EDE9 60                 RTS
2162   EDEA             
2163   EDEA             ;SET TAPE (1 OR 2) FOR INPUT
2164   EDEA A9 37       TAISET LDA #$37        ;SET PB7 FOR INPUT
2165   EDEC 8D C2 A4           STA DDRB
2166   EDEF AD 34 A4           LDA TAPIN       ;INPUT FLG (TAP 1=2 OR TAP 2=1)
2167   EDF2 20 1C EE           JSR TIOSET      ;RESET PB4 OR PB5
2168   EDF5 A9 EE              LDA #MOFF+DATIN ;SET CA2=1 (DATA IN)
2169   EDF7 8D CC A4           STA PCR
2170   EDFA A9 FF              LDA #$FF        ;PREPARE T2
2171   EDFC 8D C8 A4           STA T2L         ;LACTH
2172   EDFF             ;CHCK BIT BY BIT UNTIL $16
2173   EDFF 20 3B EE    SYNC   JSR RDBIT       ;GET A BIT IN MSB
2174   EE02 4E 2A A4           LSR CPIY        ;MAKE ROOM FOR BIT
2175   EE05 0D 2A A4           ORA CPIY        ;PUT BIT INTO MSB
2176   EE08 8D 2A A4           STA CPIY 
2177   EE0B C9 16              CMP #$16        ;SYN CHAR ?
2178   EE0D D0 F0              BNE SYNC
2179   EE0F A2 05              LDX #$05        ;TEST FOR 5 SYN CHARS
2180   EE11 20 29 EE    SYNC1  JSR GETTAP
2181   EE14 C9 16              CMP #$16
2182   EE16 D0 E7              BNE SYNC        ;IF NOT 2 CHAR RE-SYNC
2183   EE18 CA                 DEX
2184   EE19 D0 F6              BNE SYNC1
2185   EE1B 60                 RTS
2186   EE1C             
2187   EE1C             ;SET PB4 OR PB5 OFF
2188   EE1C             ;USED BY IN/OUT SET UPS
2189   EE1C D0 04       TIOSET BNE TIOS1       ;BRCH IF TAP1
2190   EE1E A9 14              LDA #$14        ;SET TAP 2 OFF (PB5=0)
2191   EE20 D0 02              BNE TIOS2
2192   EE22 A9 24       TIOS1  LDA #$24        ;SET TAP 1 OFF (PB4=0)
2193   EE24 8D C0 A4    TIOS2  STA DRB
2194   EE27 78                 SEI             ;DISABLE INTERR WHILE TAP
2195   EE28 60                 RTS
2196   EE29             
2197   EE29             ;GET 1 CHAR FROM TAPE AND RETURN
2198   EE29             ;WITH CHR IN ACC, USE CPIY TO ASM CHR ,USES Y
2199   EE29 A0 08       GETTAP LDY #$08        ;READ 8 BITS
2200   EE2B 20 3B EE    GETA1  JSR RDBIT       ;GET NEXT DATA BIT
2201   EE2E 4E 2A A4           LSR CPIY        ;MAKE ROOM FOR MSB
2202   EE31 0D 2A A4           ORA CPIY        ;OR IN SIGN BIT
2203   EE34 8D 2A A4           STA CPIY        ;REPLACE CHAR
2204   EE37 88                 DEY
2205   EE38 D0 F1              BNE GETA1
2206   EE3A 60                 RTS
2207   EE3B             ;GET ONE BIT FROM TAPE AND
2208   EE3B             ;RETURN IT IN SIGN OF A (MSB)
2209   EE3B AD 08 A4    RDBIT  LDA TSPEED      ;ARE WE IN C7 OR 5B,5A FREQUENC`
2210   EE3E 30 27              BMI RDBIT4      ;JUMP TO C7 FREQ FORMAT
2211   EE40 20 75 EE           JSR CKFREQ      ;START BIT IN HIGH FREQ
2212   EE43 20 75 EE    RDBIT1 JSR CKFREQ      ;HIGH TO LOW FREQ TRANS
2213   EE46 B0 FB              BCS RDBIT1
2214   EE48 AD F6 A4           LDA DIV64       ;GET HIGH FREQ TIMING
2215   EE4B 48                 PHA
2216   EE4C A9 FF              LDA #$FF        ;SET UP TIMER
2217   EE4E 8D F6 A4           STA DIV64
2218   EE51 20 75 EE    RDBIT2 JSR CKFREQ      ;LOW TO HIGH FREQ TRANS
2219   EE54 90 FB              BCC RDBIT2      ;WAIT TILL FREQ IS HIGH
2220   EE56 68                 PLA
2221   EE57 38                 SEC
2222   EE58 ED F6 A4           SBC DIV64       ;(256-T1) - (256-T2) =T2-T1
2223   EE5B 48                 PHA             ;LOW FREQ TIME-HIGH FREQ TIME
2224   EE5C A9 FF              LDA #$FF
2225   EE5E 8D F6 A4           STA DIV64       ;SET UP TIMER
2226   EE61 68                 PLA
2227   EE62 49 FF              EOR #$FF
2228   EE64 29 80              AND #$80
2229   EE66 60                 RTS
2230   EE67             ;EACH BIT STARTS WITH HALF PULSE OF 2400 & THEN
2231   EE67             ;3 HALF PULSES OF 1200 HZ FOR 0 ,3 PUSLES OF 2400 FOR 1
2232   EE67             ;THE READING IS MADE ON THE FOURTH 1/2 PULSE ,WHERE
2233   EE67             ;THE SIGNAL HAS STABILIZED
2234   EE67 20 75 EE    RDBIT4 JSR CKFREQ      ;SEE WHICH FREQ
2235   EE6A 90 FB              BCC RDBIT4
2236   EE6C 20 75 EE           JSR CKFREQ
2237   EE6F 20 75 EE           JSR CKFREQ
2238   EE72 4C B5 FF           JMP PATC24      ;NOW READ THE BIT
2239   EE75             
2240   EE75 2C C0 A4    CKFREQ BIT DRB         ;ARE WE HIGH OR LOW ?
2241   EE78 30 27              BMI CKF4
2242   EE7A 2C C0 A4    CKF1   BIT DRB         ;WAIT TILL HIGH
2243   EE7D 10 FB              BPL CKF1
2244   EE7F 65 00              ADC $00         ;EQUALIZER
2245   EE81 AD C9 A4    CKF2   LDA T2H         ;SAVE CNTR
2246   EE84 48                 PHA
2247   EE85 AD C8 A4           LDA T2L
2248   EE88 48                 PHA
2249   EE89 A9 FF              LDA #$FF
2250   EE8B 8D C9 A4           STA T2H         ;START CNTR
2251   EE8E AD 08 A4           LDA TSPEED
2252   EE91 30 06              BMI CKF3        ;SUPER SPEED ?
2253   EE93 68                 PLA
2254   EE94 CD 08 A4           CMP TSPEED      ;HIGH OR LOW FREC
2255   EE97 68                 PLA             ;C=1 IF HIGH ,C=0 IF LOW
2256   EE98 60                 RTS
2257   EE99 68          CKF3   PLA
2258   EE9A CD 08 A4           CMP TSPEED      ;CENTER FREQ
2259   EE9D 68          CKF3A  PLA
2260   EE9E E9 FE              SBC #$FE
2261   EEA0 60                 RTS
2262   EEA1 2C C0 A4    CKF4   BIT DRB         ;WAIT TILL LOW
2263   EEA4 30 FB              BMI CKF4
2264   EEA6 10 D9              BPL CKF2        ;GO GET TIMING
2265   EEA8             
2266   EEA8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2267   EEA8             ;OUTPUT ACC TO TTY SUBROUTINE
2268   EEA8             ;X,Y ARE PRESERVED
2269   EEA8 48          OUTTTY PHA             ;SAVE A
2270   EEA9 20 9E EB           JSR PHXY        ;PUSH X
2271   EEAC 8D 27 A4           STA STIY        ;PUT CHAR HERE
2272   EEAF 20 0F EC           JSR DELAY       ;STOP BIT FROM LAST CHAR
2273   EEB2 AD C0 A4           LDA DRB
2274   EEB5 29 FB              AND #$FB        ;START BIT PB2=0
2275   EEB7 8D C0 A4           STA DRB         ;TTO=PB2
2276   EEBA 8D 28 A4           STA STIY+1      ;SAVE THIS PATTERN
2277   EEBD 20 0F EC           JSR DELAY
2278   EEC0 A2 08              LDX #$08        ;8 BITS
2279   EEC2 2E 27 A4           ROL STIY        ;GET FIRST LSB INTO BIT 2
2280   EEC5 2E 27 A4           ROL STIY
2281   EEC8 2E 27 A4           ROL STIY
2282   EECB 6E 27 A4    OUTT1  ROR STIY
2283   EECE AD 27 A4           LDA STIY
2284   EED1 29 04              AND #$04        ;GET ONLY BIT 2 FOR PB2
2285   EED3 0D 28 A4           ORA STIY+1      ;PUT BIT INTO PATTERN
2286   EED6 8D C0 A4           STA DRB         ;NOW TO TTY
2287   EED9 08                 PHP             ;PRESERVE CARRY FOR ROTATE
2288   EEDA 20 0F EC           JSR DELAY
2289   EEDD 28                 PLP
2290   EEDE CA                 DEX
2291   EEDF D0 EA              BNE OUTT1
2292   EEE1 A9 04              LDA #$04        ;STOP BIT
2293   EEE3 0D 28 A4           ORA STIY+1
2294   EEE6 8D C0 A4           STA DRB
2295   EEE9 20 0F EC           JSR DELAY       ;STOP BIT
2296   EEEC 20 AC EB           JSR PLXY        ;PULL X
2297   EEEF 68                 PLA
2298   EEF0 C9 0A              CMP #LF
2299   EEF2 F0 07              BEQ OUTT2
2300   EEF4 C9 FF              CMP #NULLC
2301   EEF6 F0 03              BEQ OUTT2
2302   EEF8 4C 05 EF           JMP OUTDIS      ;USE THAT BUFF
2303   EEFB 60          OUTT2  RTS
2304   EEFC             
2305   EEFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2306   EEFC             ;OUTPUT A CHR TO D/P SUBR (SINGLE ENTRY FOR BOTH SUBR)
2307   EEFC             ;IF CHAR=<CR> CLEAR DISPLAY & PRINTER
2308   EEFC 20 00 F0    OUTDP  JSR OUTPRI      ;FIRST TO PRI THEN TO DISP
2309   EEFF EA                 NOP
2310   EF00 EA                 NOP
2311   EF01 EA                 NOP
2312   EF02 6C 06 A4    OUTDP1 JMP (DILINK)    ;HERE HE COULD ECHO SOMEWHERE ELSE`
2313   EF05             
2314   EF05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2315   EF05             ;OUTPUT ACC TO DISPLAY SUBROUTINE
2316   EF05             ;IF SIGN BIT (MSB)=1 DISP DO NOT CLR TO THE RIGHT
2317   EF05 48          OUTDIS PHA             ;SAVE A
2318   EF06 20 9E EB           JSR PHXY        ;PUSH X
2319   EF09 C9 0D              CMP #CR         ;<CR> ?
2320   EF0B D0 07              BNE OUTD1
2321   EF0D A2 00              LDX #0          ;YES
2322   EF0F 8E 15 A4           STX CURPO2      ;CLEAR DISP POINTER
2323   EF12 F0 42              BEQ OUTD5       ;GO CLEAR DISP
2324   EF14 4C 9C FE    OUTD1  JMP PATCH4
2325   EF17 E0 3C       OUTD1A CPX #60         ;LAST CHAR FOR DISP?
2326   EF19 90 05              BCC OUTD2
2327   EF1B 20 AC EB           JSR PLXY        ;GO BACK
2328   EF1E 68                 PLA             ;DO NOT STORE
2329   EF1F 60                 RTS
2330   EF20 9D 38 A4    OUTD2  STA DIBUFF,X    ;PUT CHAR IN BUFF
2331   EF23 EE 15 A4           INC CURPO2      ;INC POINTER
2332   EF26 E0 14              CPX #20         ;DISPLAY FULL?
2333   EF28 90 1E              BCC OUTD4
2334   EF2A 20 2F EF           JSR OUTD2A      ;THIS WAY SCROLL IS A SUBR
2335   EF2D 30 47              BMI OUTD7       ;EXIT DISP
2336   EF2F             ;YES, SCROLL CHARS TO THE LEFT
2337   EF2F 8A          OUTD2A TXA             ;X---> Y
2338   EF30 A8                 TAY
2339   EF31 A2 13              LDX #19         ;ADDR FOR DISP DO NOT
2340   EF33 8E 27 A4    OUTD3  STX STIY        ;DECREM IN BINARY
2341   EF36 B9 38 A4           LDA DIBUFF,Y    ;FROM BUFFER TO DISP
2342   EF39 09 80              ORA #$80        ;NO CURSOR
2343   EF3B 20 7B EF           JSR OUTDD1      ;CONVERT X INTO REAL ADDR
2344   EF3E 88                 DEY
2345   EF3F CE 27 A4           DEC STIY
2346   EF42 AE 27 A4           LDX STIY
2347   EF45 10 EC              BPL OUTD3       ;AGAIN UNTIL WHOLE DISP
2348   EF47 60                 RTS
2349   EF48 48          OUTD4  PHA
2350   EF49 09 80              ORA #$80        ;NO CURSOR
2351   EF4B 20 7B EF           JSR OUTDD1      ;X=<$19 ,CONVRT TO REAL ADDR
2352   EF4E 68                 PLA
2353   EF4F 29 80              AND #$80        ;IF MSB=0 CLEAR REST OF DISPLAY
2354   EF51 D0 23              BNE OUTD7
2355   EF53 AE 15 A4           LDX CURPO2
2356   EF56             ;CLEAR DISP TO THE RIGHT
2357   EF56 E0 14       OUTD5  CPX #20
2358   EF58 B0 1C              BCS OUTD7
2359   EF5A 8E 27 A4           STX STIY
2360   EF5D A9 A0              LDA #' '+$80    ;<SPACE>
2361   EF5F 20 7B EF           JSR OUTDD1      ;CONVRT TO REAL ADDR
2362   EF62 EE 27 A4           INC STIY
2363   EF65 AE 27 A4           LDX STIY
2364   EF68 D0 EC              BNE OUTD5       ;GO NEXT
2365   EF6A 4C 76 EF           JMP OUTD7
2366   EF6D EA                 NOP
2367   EF6E EA                 NOP
2368   EF6F EA                 NOP
2369   EF70 EA                 NOP
2370   EF71 EA                 NOP
2371   EF72 EA                 NOP
2372   EF73 EA                 NOP
2373   EF74 EA                 NOP
2374   EF75 EA                 NOP
2375   EF76 20 AC EB    OUTD7  JSR PLXY        ;REST ,SO PRINTR INDEPEN
2376   EF79 68                 PLA
2377   EF7A 60                 RTS
2378   EF7B             
2379   EF7B             ;CONVERT X INTO REAL ADDR FOR DISPLAY
2380   EF7B             ;AND OUTPUT IT  PB=DATA ; PA=W,CE ,A0 A1 (6520)
2381   EF7B 48          OUTDD1 PHA             ;SAVE DATA
2382   EF7C 8A                 TXA
2383   EF7D 48                 PHA             ;SAVE X
2384   EF7E 4A                 LSR A           ;DIVIDE X BY 4
2385   EF7F 4A                 LSR A           ;TO GET CHIP SELECT
2386   EF80 AA                 TAX             ;BACK TO X
2387   EF81 A9 04              LDA #4          ;FIRST CHIP SELECT
2388   EF83 E0 00              CPX #0          ;FIRST CHIP ?
2389   EF85 F0 04              BEQ OUTDD3
2390   EF87 0A          OUTDD2 ASL A
2391   EF88 CA                 DEX
2392   EF89 D0 FC              BNE OUTDD2      ;BACK TILL RIGH CS
2393   EF8B 8D 28 A4    OUTDD3 STA STIY+1      ;SAVE CS TEMPORARILY
2394   EF8E 68                 PLA             ;GET X AGAIN FOR CHAR
2395   EF8F 29 03              AND #$03        ;IN THAT CHIP
2396   EF91 0D 28 A4           ORA STIY+1      ;OR IN CS AND CHAR
2397   EF94             ;STORE ADDR AND DATA INTO DISPL
2398   EF94 49 FF              EOR #$FF        ;W=1 , CE=0 & A1,A0
2399   EF96 8D D0 A4           STA RA
2400   EF99 AA                 TAX             ;SAVE A IN X
2401   EF9A 68                 PLA             ;GET DATA
2402   EF9B 48                 PHA
2403   EF9C 8D D2 A4           STA RB
2404   EF9F 8A                 TXA
2405   EFA0 49 80              EOR #$80        ;SET W=0
2406   EFA2 8D D0 A4           STA RA
2407   EFA5 EA                 NOP
2408   EFA6 09 7C              ORA #$7C        ;SET CE=1
2409   EFA8 8D D0 A4           STA RA
2410   EFAB A9 FF              LDA #$FF        ;SET W=1
2411   EFAD 8D D0 A4           STA RA
2412   EFB0 68                 PLA             ;RETURN DATA
2413   EFB1 60                 RTS
2414   EFB2             
2415   EFB2 A9 C8       PS2KB_Init     lda      #$c8
2416   EFB4 8D BC A4                   sta      UPCR           ;Via1PCR
2417   EFB7 AD B1 A4                   lda	UDRAH          ;Via1PRA                              
2418   EFBA A2 03              LDX #3          ;PORTS USED FOR KB
2419   EFBC BD 52 E7    RS2    LDA INTAB2,X    ;PA0-PA7 AS OUTPUT
2420   EFBF 9D E0 A4           STA DRA2,X      ;PB0-PB7 AS INPUT
2421   EFC2 CA                 DEX
2422   EFC3 10 F7              BPL RS2
2423   EFC5 60                         rts                     ; done
2424   EFC6                            
2425   EFC6             PS2KB_Scan
2426   EFC6 AD BD A4                    lda     UIFR            ; LOAD STATUS REGISTER
2427   EFC9 4A                          lsr     A
2428   EFCA 4A                          lsr     A
2429   EFCB 90 03                       BCC     kcirtn          ; RETURN IF NOTHING
2430   EFCD AD B1 A4                    LDA     UDRAH           ; LOAD DATA BYTE
2431   EFD0 60          kcirtn          RTS                     ; RETURN TO CALLER
2432   EFD1             
2433   EFD1             PS2KB_Input
2434   EFD1 20 C6 EF                    JSR     PS2KB_Scan
2435   EFD4 90 FB                       BCC     PS2KB_Input
2436   EFD6 60                          RTS
2437   EFD7             
2438   EFF9                    *=$EFF9
2439   EFF9 EA                 .DB $EA
2440   F000                    *=$F000
2441   F000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2442   F000             ;OUTPUT ACC TO PRINTER SUBROUTINE
2443   F000             ;PRINTS ON 21RST CHAR OR WHEN <CR>
2444   F000             ;IT WILL PUT IT ON BUBFFER BUT WONT PRINT IF
2445   F000             ;PRIFLG=0
2446   F000 48          OUTPRI PHA             ;SAVE CHR TO BE OUTPUT
2447   F001 20 9E EB           JSR PHXY        ;SAVE X
2448   F004 C9 0D              CMP #CR         ;SEE IF CR
2449   F006 F0 07              BEQ OUT01       ;YES SO PRINT THE BUFF
2450   F008 AE 16 A4           LDX CURPOS      ;PTR TO NEXT POS IN BUFF
2451   F00B E0 14              CPX #20         ;SEE IF BUFF FULL
2452   F00D D0 16              BNE OUT04       ;NOT FULL SO RETURN
2453   F00F             ;<CR> SO FILL REST OF BUFFER WITH BLANKS
2454   F00F 48          OUT01  PHA
2455   F010 A9 00              LDA #0          ;CURPOS = 0
2456   F012 AE 16 A4           LDX CURPOS      ;SEE IF ANYTHING IN BUFFER
2457   F015 8D 16 A4           STA CURPOS
2458   F018 20 38 F0           JSR OUTPR       ;CLEAR PRIBUF TO THE RIGHT
2459   F01B             ;BUFFER FILLED SO PRINT IT
2460   F01B 20 45 F0           JSR IPST        ;START THE PRINT
2461   F01E A2 00              LDX #0          ;STORE CHR IN BUFF (FIRST LOC)
2462   F020 68                 PLA             ;GET IT
2463   F021 C9 0D              CMP #CR         ;DONT STORE IF <CR>
2464   F023 F0 0E              BEQ OUT05
2465   F025 9D 60 A4    OUT04  STA IBUFM,X     ;STORE CHR IN BUFF
2466   F028 EE 16 A4           INC CURPOS      ;INCR BUFF PNTR
2467   F02B E8                 INX
2468   F02C 29 80              AND #$80
2469   F02E D0 03              BNE OUT05       ;DONT CLR IF MSB=1
2470   F030 20 38 F0           JSR OUTPR       ;CLEAR PRIBUFF TO THE RIGHT
2471   F033 20 AC EB    OUT05  JSR PLXY        ;RESTORE REGS
2472   F036 68                 PLA
2473   F037 60                 RTS
2474   F038 A9 20       OUTPR  LDA #' '        ;FILL REST OF BUFF WITH BLANKS
2475   F03A E0 14       OUTPR1 CPX #20         ;SEE IF END OF BUFF
2476   F03C F0 06              BEQ OUTPR2
2477   F03E 9D 60 A4           STA IBUFM,X     ;NO SO STORE BLANK
2478   F041 E8                 INX             ;INCR BUFF PNTR
2479   F042 10 F6              BPL OUTPR1
2480   F044 60          OUTPR2 RTS
2481   F045             
2482   F045             ;SUB TO OUTPUT BUFFER, 70 DOTS (10 DOTS AT
2483   F045             ;A TIME BY 7 ROWS) FOR EACH LINE OF PRINTING
2484   F045 2C 11 A4    IPST   BIT PRIFLG      ;PRINT FLG ON ?
2485   F048 10 46              BPL IPO4
2486   F04A             ;----------------------------------------------------
2487   F04A             IPS0
2488   F04A             IPO0   
2489   F04A             ;    BRK
2490   F04A             ;    NOP
2491   F04A             ;        LDA #$24
2492   F04A 20 9E EB            JSR PHXY        ;PUSH X
2493   F04D 8D 27 A4           STA STIY        ;PUT CHAR HERE
2494   F050 20 0F EC           JSR DELAY       ;STOP BIT FROM LAST CHAR
2495   F053 AD C0 A4           LDA DRB
2496   F056             ;       AND #$FB        ;START BIT PB2=0
2497   F056 29 FE              AND #$FE        ;START BIT PB0=0
2498   F058 8D C0 A4           STA DRB         ;TTO=PB2
2499   F05B 8D 28 A4           STA STIY+1      ;SAVE THIS PATTERN
2500   F05E 20 0F EC           JSR DELAY
2501   F061 A2 08              LDX #$08        ;8 BITS
2502   F063 2E 27 A4           ROL STIY        ;GET FIRST LSB INTO BIT 2
2503   F066 2E 27 A4           ROL STIY
2504   F069 2E 27 A4           ROL STIY
2505   F06C 6E 27 A4    OUTP1  ROR STIY
2506   F06F AD 27 A4           LDA STIY
2507   F072             ;       AND #$04        ;GET ONLY BIT 2 FOR PB2
2508   F072 29 01              AND #$01        ;GET ONLY BIT 0 FOR PB2
2509   F074 0D 28 A4           ORA STIY+1      ;PUT BIT INTO PATTERN
2510   F077 8D C0 A4           STA DRB         ;NOW TO TTY
2511   F07A 08                 PHP             ;PRESERVE CARRY FOR ROTATE
2512   F07B 20 0F EC           JSR DELAY
2513   F07E 28                 PLP
2514   F07F CA                 DEX
2515   F080 D0 EA              BNE OUTP1
2516   F082             ;       LDA #$04        ;STOP BIT
2517   F082 A9 01              LDA #$01        ;STOP BIT
2518   F084 0D 28 A4           ORA STIY+1
2519   F087 8D C0 A4           STA DRB
2520   F08A 20 0F EC           JSR DELAY       ;STOP BIT
2521   F08D 20 AC EB           JSR PLXY        ;PULL X      
2522   F090             IPO3       
2523   F090             ;----------------------------------------------------
2524   F090             ;IPS0   JSR PINT        ;INITIALIZE VALUES
2525   F090             ;       JSR IPSU        ;SET UP FIRS OUTPUT PATTERN
2526   F090             ;IPO0   LDA #PRST+SP12+MON ;TURN MOTOR ON
2527   F090             ;       STA PCR
2528   F090             ;       JSR PAT23       ;TIME OUT ?
2529   F090             ;       BNE IPO2        ;NO, START SIGNAL RECEIVED
2530   F090             ;       JSR PAT23       ;YES, TRY AGAIN
2531   F090             ;       BNE IPO2        ;OK
2532   F090             ;       JMP PRIERR      ;TWO TIME OUTS - ERROR
2533   F090             ;       NOP
2534   F090             ;       NOP
2535   F090             ;       NOP
2536   F090             ;       NOP
2537   F090             ;IPO2   JSR PRNDOT      ;STRB P1=1 PRINT DOTS (1.7MSEC)
2538   F090             ;       JSR PRNDOT      ;STRB P2=1 PRINT DOTS (1.7MSEC)
2539   F090             ;CHECK FOR 90, WHEN 70 PRNDOT WILL OUTPUT ZEROS
2540   F090             ;       LDA IDOT
2541   F090             ;       CMP #90
2542   F090             ;       BCC IPO2        ;L.T. 90 THEN GO STROB P1
2543   F090             ;IPO3   LDA #PRST+SP12+MOFF ;TURN MOTOR OFF
2544   F090             ;       STA PCR
2545   F090             ;----------------------------------------------------
2546   F090 60          IPO4   RTS
2547   F091             
2548   F091 20 44 EB    PRIERR JSR CLR         ;CLEAR PRI PNTR
2549   F094 20 B1 FE           JSR PATCH5      ;TURN PRI OFF
2550   F097 A0 3B              LDY #M12-M1
2551   F099 20 AF E7           JSR KEP
2552   F09C 4C A1 E1           JMP COMIN       ;BACK WHERE SUBR WAS CALLED
2553   F09F             
2554   F09F             ;SUBR TO INCR DOT COUNTER,WHEN
2555   F09F             ;NEG TRANS OUTPUT CHR FOR 1.7 MSEC
2556   F09F             ;CLEAR & SET UP NEXT PATTERN
2557   F09F A9 00       PRNDOT LDA #0          ;CLR INTERRPTS
2558   F0A1 8D C1 A4           STA DRAH
2559   F0A4 AD CD A4    PRDOT0 LDA IFR
2560   F0A7             ;       AND #MSP12      ;ANY STROBES ?
2561   F0A7             ;       BEQ PRDOT0
2562   F0A7             ;       LDA PCR
2563   F0A7             ;       EOR #$01
2564   F0A7             ;       STA PCR
2565   F0A7             ;       INC IDOT
2566   F0A7             ;       LDA IOUTU       ;2 LEFT ELEM
2567   F0A7             ;       ORA DRB         ;DO NOT TURN TTY OUTPUT OFF
2568   F0A7             ;              STA DRB
2569   F0A7 AD 78 A4           LDA IOUTL       ;7 RIGHT ELEM, CLR CA1 INTER FLG
2570   F0AA 8D C1 A4           STA DRAH
2571   F0AD A9 A4              LDA #PRTIME%256
2572   F0AF 8D C8 A4           STA T2L
2573   F0B2 A9 06              LDA #PRTIME/256 ;START T2 FOR 1.7 MSEC
2574   F0B4 8D C9 A4           STA T2H
2575   F0B7 20 E3 F0           JSR IPSU        ;SET NEXT PATTERN WHILE WAITING
2576   F0BA 20 1B EC           JSR DE2         ;WAIT TILL TIME OUT
2577   F0BD A9 00              LDA #0          ;THERMAL ELEM OFF
2578   F0BF 8D C1 A4           STA DRAH
2579   F0C2 AD C0 A4           LDA DRB         ;BUT DONT CHANGE TAPE CONTROLS
2580   F0C5 29 FC              AND #$FC
2581   F0C7 8D C0 A4           STA DRB
2582   F0CA 60                 RTS
2583   F0CB             
2584   F0CB             ; SUBROUTINE PINT -- INIT VARS FOR PRINTER
2585   F0CB A9 FF       PINT   LDA #$FF
2586   F0CD 8D 74 A4           STA IDIR        ;DIRECTION <= -
2587   F0D0 A9 05              LDA #5
2588   F0D2 8D 75 A4           STA ICOL        ;COLUMN <= LEFTMOST +1
2589   F0D5 A9 01              LDA #1
2590   F0D7 8D 76 A4           STA IOFFST      ;OFFSET <= LEFT CHARACTER
2591   F0DA 8D 7C A4           STA IMASK
2592   F0DD A9 00              LDA #0
2593   F0DF 8D 77 A4           STA IDOT        ;DOT COUNTER <= 0
2594   F0E2 60                 RTS
2595   F0E3             
2596   F0E3             ;THE VARIABLES FOR THE PRINTER ARE AS FOLLOWS:
2597   F0E3             ;
2598   F0E3             ;IDIR   DIRECT HEAD IS CURRENTLY MOVING (0=+, $FF=-)
2599   F0E3             ;ICOL   CLMN TO BE PRNTED NEXT (LEFTMOST=0,RIGHTMOST=4)
2600   F0E3             ;IOFFST OFFSET N PRINT BUFF (0=LEFT CHR, 1=RIGHT CHR)
2601   F0E3             ;IDOT   COUNT OF NUMBER OF DOTS PRINTED THUS FAR
2602   F0E3             ;IOUTL  SOLENOID PATTERN (8 CHRS ON RIGHT)
2603   F0E3             ;IOUTU  SOLENOID PATTERN (2 CHRS ON LEFT)
2604   F0E3             ;IBITL  1 BIT MSK USED IN SETTING NEXT SOLENOID VALUE
2605   F0E3             ;IBITU  UPPER PART OF MASK
2606   F0E3             ;IBUFM  START OF PRINT BUFFER (LEFTMOST CHR FIRST)
2607   F0E3             ;IMASK  MASK FOR CURRENT ROW BEING PRINTED
2608   F0E3             ;JUMP   ADDRESS OF TABLE FOR CURRENT COLUMN
2609   F0E3             ;
2610   F0E3             ;   THE DOT PATTERNS FOR THE CHRS ARE STORED SO THAT...
2611   F0E3             ;EACH BYTE CONTAINS THE DOTS FOR ONE COLUMN OF ONE...
2612   F0E3             ;CHR. SINCE EACH COLUMN CONTAINS SEVEN DOTS ,
2613   F0E3             ;THIS MEANS THAT ONE BIT PER BYTE IS UNUSED.
2614   F0E3             ;    THE PATTERNS ARE ORGANIZED INTO 5 TABLES OF 64...
2615   F0E3             ;BYTES WHERE EACH TABLE CONTAINS ALL THE DOT...
2616   F0E3             ;PATTERNS FOR A PARTICULAR COLUMN. THE BYTES IN EACH...
2617   F0E3             ;TABLE ARE ORDERED ACCORDING TO THE CHR CODE OF...
2618   F0E3             ;THE CHR BEING REFERENCED. THE CHR CODE CAN...
2619   F0E3             ;THUS BE USED TO DIRECTLY INDEX INTO THE TABLE.
2620   F0E3             
2621   F0E3             ;SUBROUTINE IPSU -- SET UP OUTPUT PATTERN FOR PRINTER
2622   F0E3             ;   THIS ROUTINE IS CALLED IN ORDER TO
2623   F0E3             ;SET UP THE NEXT GROUP OF SOLENOIDS TO
2624   F0E3             ;BE OUTPUT TO THE PRINTER.
2625   F0E3             ;   ON ENTRY THE CONTENTS OF ALL REGISTERS
2626   F0E3             ;ARE ARBITRARY
2627   F0E3             ;   ON EXIT THE CONTENTS OF A,X,Y ARE UNDEFINED
2628   F0E3 A2 00       IPSU   LDX #0          ;X POINTS TO VAR BLOCK FOR PRNTR
2629   F0E5 20 21 F1           JSR INCP        ;ADVANCE PTRS TO NXT DOT POSITION
2630   F0E8             ;X NOW CONTAINS INDEX INTO PRINT BUFFER
2631   F0E8 BD 60 A4    IPS1   LDA IBUFM,X     ;LOAD NEXT CHAR FROM BUFFER
2632   F0EB 29 3F              AND #$3F
2633   F0ED A8                 TAY
2634   F0EE A9 7D              LDA #JUMP%256       ;A<= DOT PATTERN FOR CHAR & COL
2635   F0F0 20 58 EB           JSR LDAY
2636   F0F3 2C 7C A4           BIT IMASK       ;SEE IF DOT IS SET
2637   F0F6 F0 16              BEQ IPS2        ;NO SO GO ON TO NEXT CHAR
2638   F0F8 AD 7A A4           LDA IBITL       ;DOT ON SO SET THE CURR SOLENOID
2639   F0FB F0 08              BEQ IPS3        ;LSB OF SOL MASK IS 0 , DO MSB
2640   F0FD 0D 78 A4           ORA IOUTL       ;SET THE SOLENOID IN THE PATTERN
2641   F100 8D 78 A4           STA IOUTL
2642   F103 D0 09              BNE IPS2        ;BRANCH ALWAYS
2643   F105 AD 7B A4    IPS3   LDA IBITU       ;SOLENOID IS ONE OF THE 2 MSD
2644   F108 0D 79 A4           ORA IOUTU       ;SET THE BIT IN THE PATTERN
2645   F10B 8D 79 A4           STA IOUTU
2646   F10E 0E 7A A4    IPS2   ASL IBITL       ;SHIFT MSK TO NXT CHR POSITION
2647   F111 2E 7B A4           ROL IBITU
2648   F114 CA                 DEX             ;DECR PTR INTO BUFFER
2649   F115 CA                 DEX
2650   F116 10 D0              BPL IPS1        ;NOT END YET
2651   F118             ;SOLENOID PATTERN IS SET UP IN IOUTU,IOUTL
2652   F118 AD 79 A4           LDA IOUTU       ;LEFTMOST 2
2653   F11B 29 03              AND #$03        ;DISABLE FOR SEGMENTS
2654   F11D 8D 79 A4           STA IOUTU
2655   F120 60                 RTS
2656   F121             
2657   F121             ; SUBROUTINE INCP
2658   F121             ;THIS SUBROUTINE IS USED TO UPDATE THE PRINTER VARIABLES
2659   F121             ;TO POINT TO THE NEXT DOT POSITION TO BE PRINTED
2660   F121             ;X REG IS USED TO POINT TO THE VARIABLE BLOCK OF
2661   F121             ;BEING UPDATED
2662   F121             ;ON EXIT X CONTAINS THE POINTER TO THE LAST CHARACTER IN
2663   F121             ;THE PRINT BUFFER
2664   F121             ;CONTENTS OF A,Y ON EXIT ARE ARBITRARY
2665   F121 BD 74 A4    INCP   LDA IDIR,X      ;EXAMINE DIRECTION(+ OR -)
2666   F124 10 1E              BPL OP03        ;DIRECTION = +
2667   F126             ;*DIRECTION = -
2668   F126 BD 75 A4           LDA ICOL,X      ;SEE WHAT THE COLUMN IS
2669   F129 F0 05              BEQ OP04        ;COLUMN = 0 SO END OF DIGIT
2670   F12B             ;**COLUMN # 0 SO JUST DECREMENT COLUMN
2671   F12B DE 75 A4           DEC ICOL,X
2672   F12E 10 33              BPL NEWCOL      ;BRANCH ALWAYS
2673   F130             ;**COLUMN = 0 SO SEE IF EVEN OR ODD DIGIT
2674   F130 BD 76 A4    OP04   LDA IOFFST,X
2675   F133 F0 0A              BEQ OP07        ;OFFSET = 0 SO DIRECTION CHANGE
2676   F135             ;***OFFSET = 1 SO MOVE TO RIGHT DIGIT
2677   F135 DE 76 A4           DEC IOFFST,X    ;OFFSET <= 0 (LEFT CHARACTER)
2678   F138 A9 04              LDA #4          ;COLUMN <= 4
2679   F13A 9D 75 A4           STA ICOL,X
2680   F13D 10 24              BPL NEWCOL      ;BRANCH ALWAYS
2681   F13F             ;***OFFSET = 0 SO CHANGE DIRECTION TO +
2682   F13F FE 74 A4    OP07   INC IDIR,X      ;DIRECTION <= $00 (+)
2683   F142 10 1C              BPL NEWROW      ;BRANCH ALWAYS
2684   F144             ;*DIRECTION = +
2685   F144 BD 75 A4    OP03   LDA ICOL,X      ;SEE IF LAST COLUMN IN DIGIT
2686   F147 C9 04              CMP #4
2687   F149 F0 05              BEQ OP05        ;COLUMN = 4 SO GO TO NEXT DIGIT
2688   F14B FE 75 A4           INC ICOL,X      ;JUST INCR COLUMN-NOT END OF DIGIT
2689   F14E 10 13              BPL NEWCOL      ;BRANCH ALWAYS
2690   F150             ;**AT COLUMN 4 -- SEE IF LEFT OR RIGHT DIGIT
2691   F150 BD 76 A4    OP05   LDA IOFFST,X
2692   F153 D0 08              BNE OP06        ;OFFSET # 0 SO RIGHT DIGIT
2693   F155 9D 75 A4           STA ICOL,X      ;COLUMN <= 0
2694   F158 FE 76 A4           INC IOFFST,X    ;OFFSET <= 1 (RIGHT CHARACTER)
2695   F15B 10 06              BPL NEWCOL      ;BRANCH ALWAYS
2696   F15D             ;***OFFSET = 1 SO DIRECTION CHANGE
2697   F15D DE 74 A4    OP06   DEC IDIR,X      ;DIRECTION <= $FF (-)
2698   F160             
2699   F160             ;START OF NEW PRINT ROW
2700   F160 1E 7C A4    NEWROW ASL IMASK,X     ;UPDATE ROW MASK FOR DOT PATTERNS
2701   F163             ;START OF NEW PRINT COLUMN
2702   F163 A9 00       NEWCOL LDA #0          ;CLEAR OUTPUT PATTERN
2703   F165 9D 78 A4           STA IOUTL,X     ;PATTERN FOR 8 RIGHT CHRS
2704   F168 9D 79 A4           STA IOUTU,X     ;PATTERN FOR 2 LEFT SOLEN
2705   F16B 9D 7B A4           STA IBITU,X     ;OUTPUT MSK FOR LEFTMOST SOLEN
2706   F16E A9 01              LDA #1
2707   F170 9D 7A A4           STA IBITL,X     ;OUTPUT MSK FOR RIGHTMOST SOLEN
2708   F173             ;GET ADDRESS OF DOT PATTERN TABLE FOR NEXT COLUMN
2709   F173 BD 75 A4           LDA ICOL,X      ;GET COLUMN NUMBER (0-4)
2710   F176 0A                 ASL A           ;*2 ,INDEX INTO TBL OF TBL ADDRS
2711   F177 A8                 TAY
2712   F178 B9 D7 F2           LDA MTBL,Y      ;LSB OF ADDR OF TABLE
2713   F17B 9D 7D A4           STA JUMP,X      ;PTR TO TBL WITH DOT PATTERNS
2714   F17E B9 D8 F2           LDA MTBL+1,Y    ;MSB OF TABLE ADDRESS
2715   F181 9D 7E A4           STA JUMP+1,X
2716   F184 A9 12              LDA #18         ;COMPUTE INDEX INTO PRNTR BUFFER
2717   F186 1D 76 A4           ORA IOFFST,X    ;+1 IF RIGHT CHR
2718   F189 AA                 TAX
2719   F18A 60                 RTS
2720   F18B             
2721   F18B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2722   F18B             ;OUTPUT ACC TO TAPE BUFFER SUBROUTINE
2723   F18B             ; & WHEN FULL OUTPUT BUFF TO TAPE.
2724   F18B             ; IF INFLG=OUTFLG= T USE TWO BUFFERS
2725   F18B             ;OTHERWISE USE SAME BUFFER FOR INPUT
2726   F18B             ;AND OUTPUT (MONIT BUFFER)
2727   F18B 20 9E EB    TOBYTE JSR PHXY        ;SAVE X
2728   F18E AE 37 A4           LDX TAPTR2      ;TAPE BUFFER POINTER FOR OUTPUT
2729   F191 20 0F F2           JSR BKCK2       ;STORE IN BUFFER
2730   F194 E8                 INX
2731   F195 8E 37 A4           STX TAPTR2      ;FOR NEXT
2732   F198 E0 50              CPX #80         ;BUFFER FULL?
2733   F19A D0 32              BNE TABY3       ;NO , GO BACK
2734   F19C             ;OUTPUT A BLOCK FROM BUFFER TO TAPE
2735   F19C 20 E7 F1           JSR BKCKSM      ;COMPUT BLOCK CHECKSUM
2736   F19F 20 1D F2           JSR TAOSET      ;SET TAPE FOR OUTPUT
2737   F1A2 A9 23              LDA #'#'        ;CHAR FOR BEGINNING
2738   F1A4 20 4A F2           JSR OUTTAP      ;OF BLOCK
2739   F1A7             ;OUTPUT CHRS FROM ACTIVE BUFFER
2740   F1A7 20 D2 F1    TABY2  JSR CKBUFF      ;LOAD CHR FROM ACTIVE BUFFER
2741   F1AA 20 4A F2           JSR OUTTAP      ; FROM BUFFER
2742   F1AD E8                 INX
2743   F1AE E0 53              CPX #83         ;2 BLOCK CKSUM CHR + 1 EXTRA CHR..
2744   F1B0 D0 F5              BNE TABY2       ;OTHERWISE ERROR
2745   F1B2 AD C0 A4           LDA DRB
2746   F1B5 29 CF              AND #$CF        ;TURN TAPES OFF PB5,PB4
2747   F1B7 8D C0 A4           STA DRB
2748   F1BA 58                 CLI             ;ENABLE INTERRUPT
2749   F1BB A9 00              LDA #0
2750   F1BD 8D 37 A4           STA TAPTR2      ;CLR TAPE BUFF PTR
2751   F1C0 A9 00              LDA #T1I        ;RESET FREE RUNNING TO 1 SHOT
2752   F1C2 8D CB A4           STA ACR
2753   F1C5 20 9A FF           JSR PAT22       ;ADD 1 TO BLK COUNT & OUTPUT
2754   F1C8 AD 68 01           LDA BLKO        ;PUT BLK CNT IN FIRST LOC (TABUFF)
2755   F1CB 20 8B F1           JSR TOBYTE
2756   F1CE 20 AC EB    TABY3  JSR PLXY
2757   F1D1 60                 RTS
2758   F1D2             
2759   F1D2             ;CHCK ACTIVE BUFFER AND LOAD A CHR
2760   F1D2             ;CARRY=0 IF ONLY 1 BUFFER ,C=1 IF 2 BUFFERS
2761   F1D2 AD 12 A4    CKBUFF LDA INFLG
2762   F1D5 CD 13 A4           CMP OUTFLG
2763   F1D8 D0 08              BNE CBUFF1
2764   F1DA C9 54              CMP #'T'        ;SEE IF INFLG=OUTFLG = T
2765   F1DC D0 04              BNE CBUFF1
2766   F1DE 38                 SEC             ;USE PAGE 1 FOR OUTPUT BUFFER
2767   F1DF B5 AD              LDA TABUF2,X
2768   F1E1 60                 RTS
2769   F1E2 18          CBUFF1 CLC             ;USE SAME BUFFER FOR I/O
2770   F1E3 BD 16 01           LDA TABUFF,X
2771   F1E6 60                 RTS
2772   F1E7             
2773   F1E7             ;COMPUTE BLOCK CHECKSUM & PUT IT
2774   F1E7             ;AT THE END OF ACTIVE BUFFER
2775   F1E7 A9 00       BKCKSM LDA #0          ;CLEAR BLK CKSUM LOCAT
2776   F1E9 8D 66 01           STA TABUFF+80
2777   F1EC 8D 67 01           STA TABUFF+81
2778   F1EF A2 4F              LDX #79
2779   F1F1 20 D2 F1    BKCK1  JSR CKBUFF      ;GET CHR FROM EITHER BUFFER
2780   F1F4 18                 CLC
2781   F1F5 6D 66 01           ADC TABUFF+80   ;ADD TO CKSUM
2782   F1F8 8D 66 01           STA TABUFF+80
2783   F1FB 90 03              BCC *+5
2784   F1FD EE 67 01           INC TABUFF+81
2785   F200 CA                 DEX
2786   F201 10 EE              BPL BKCK1       ;DO THE WHOLE BUFFER
2787   F203 A2 50              LDX #80
2788   F205 AD 66 01           LDA TABUFF+80   ;PUT CKSUM INTO RIGHT BUFFER
2789   F208 20 0F F2           JSR BKCK2
2790   F20B E8                 INX
2791   F20C AD 67 01           LDA TABUFF+81
2792   F20F 48          BKCK2  PHA             ;OUTPUT A CHAR TO RIGHT BUFFER
2793   F210 20 D2 F1           JSR CKBUFF      ;GET WHICH BUFFER
2794   F213 68                 PLA
2795   F214 B0 04              BCS BKCK3       ;BRNCH TO SECOND BUFFER
2796   F216 9D 16 01           STA TABUFF,X
2797   F219 60                 RTS
2798   F21A 95 AD       BKCK3  STA TABUF2,X    ;TO PAG 1
2799   F21C 60                 RTS
2800   F21D             
2801   F21D             ;SET TAPE (1 OR 2) FOR OUTPUT
2802   F21D 20 C0 F2    TAOSET JSR SETSPD      ;SET UP SPEED (# OF HALF PULSES)
2803   F220 AD 35 A4           LDA TAPOUT      ;OUTPUT FLG (TAPE 1 OR 2)
2804   F223 20 1C EE           JSR TIOSET      ;SET PB4 OR PB5 TO ZERO
2805   F226 A9 EC              LDA #DATOUT+MOFF ;SET CA2=0 (DATA OUT)
2806   F228 8D CC A4           STA PCR
2807   F22B A9 C0              LDA #T1FR       ;SET TIMER IN FREE RUNNING
2808   F22D 8D CB A4           STA ACR
2809   F230 A9 00              LDA #00
2810   F232 8D C5 A4           STA T1CH        ;START TIMER T1
2811   F235 AE 09 A4           LDX GAP         ;OUTPUT 4*GAP SYN BYTES
2812   F238 A9 16       TAOS1  LDA #$16        ;SYN CHAR
2813   F23A 20 4A F2           JSR OUTTAP      ;TO TAPE
2814   F23D 20 4A F2           JSR OUTTAP
2815   F240 20 4A F2           JSR OUTTAP
2816   F243 20 4A F2           JSR OUTTAP
2817   F246 CA                 DEX
2818   F247 D0 EF              BNE TAOS1
2819   F249 60                 RTS
2820   F24A             
2821   F24A             ;OUTPUT ACC TO TAPE
2822   F24A 8E 2D A4    OUTTAP STX CPIY+3      ;SAVE X
2823   F24D A0 07              LDY #$07        ;FOR THE 8 BITS
2824   F24F 8C 27 A4           STY STIY
2825   F252 AE 08 A4           LDX TSPEED
2826   F255 30 39              BMI OUTTA1      ;IF ONE IS SUPER HIPER
2827   F257 48                 PHA
2828   F258 A0 02       TRY    LDY #2          ;SEND 3 UNITS
2829   F25A 8C 28 A4           STY STIY+1      ;STARTING AT 3700 HZ
2830   F25D BE 0A A4    ZON    LDX NPUL,Y      ;#OF HALF CYCLES
2831   F260 48                 PHA
2832   F261 B9 0B A4    ZON1   LDA TIMG,Y      ;SET UP LACTH FOR NEXT
2833   F264 8D C6 A4           STA T1LL        ;PULSE (80 OR CA) (FREC)
2834   F267 A9 00              LDA #0
2835   F269 8D C7 A4           STA T1LH
2836   F26C 2C CD A4    ZON2   BIT IFR         ;WAIT FOR PREVIOUS
2837   F26F 50 FB              BVC ZON2        ;CYCLE (T1 INT FLG)
2838   F271 AD C4 A4           LDA T1L         ;CLR INTERR FLG
2839   F274 CA                 DEX
2840   F275 D0 EA              BNE ZON1        ;SEND ALL CYCLES
2841   F277 68                 PLA
2842   F278 CE 28 A4           DEC STIY+1
2843   F27B F0 05              BEQ SETZ        ;BRCH IF LAST ONE
2844   F27D 30 07              BMI ROUT        ;BRCH IF NO MORE
2845   F27F 4A                 LSR A           ;TAKE NEXT BIT
2846   F280 90 DB              BCC ZON         ;...IF IT'S A ONE...
2847   F282 A0 00       SETZ   LDY #0          ;SWITCH TO 2400 HZ
2848   F284 F0 D7              BEQ ZON         ;UNCONDITIONAL BRCH
2849   F286 CE 27 A4    ROUT   DEC STIY        ;ONE LESS BIT
2850   F289 10 CD              BPL TRY         ;ANY MORE? GO BACK
2851   F28B 68          ROUT1  PLA             ;RECOVER CHR
2852   F28C AE 2D A4           LDX CPIY+3      ;RESTORE X
2853   F28F 60                 RTS
2854   F290             
2855   F290             ;OUTPUT HALF PULSE FOR 0 (1200 HZ) &
2856   F290             ;TWO HALF PULSES FOR 1 (2400 HZ)  (00 TSPEED)
2857   F290 48          OUTTA1 PHA
2858   F291 8D 28 A4           STA STIY+1      ;STORE ACC
2859   F294 A2 02       OUTTA2 LDX #2          ;# OF HALF PULSES
2860   F296 A9 D0              LDA #$D0        ;1/2 PULSE OF 2400
2861   F298 8D C6 A4           STA T1LL
2862   F29B A9 00              LDA #00
2863   F29D 8D C7 A4           STA T1LH
2864   F2A0 20 BC FF           JSR PATC25      ;WAIT TILL COMPLETED
2865   F2A3 4E 28 A4           LSR STIY+1      ;GET BITS FROM CHR
2866   F2A6 B0 0A              BCS OUTTA3
2867   F2A8 A9 A0              LDA #$A0        ;BIT=0 ,OUTPUT 1200 HZ
2868   F2AA 8D C6 A4           STA T1LL
2869   F2AD A9 01              LDA #$01
2870   F2AF 8D C7 A4           STA T1LH
2871   F2B2 20 BC FF    OUTTA3 JSR PATC25
2872   F2B5 CA                 DEX
2873   F2B6 10 FA              BPL OUTTA3      ;OUTPUT 3 HALF PULSES
2874   F2B8 88                 DEY
2875   F2B9 10 D9              BPL OUTTA2      ;ALL BITS ?
2876   F2BB 4C 8B F2           JMP ROUT1       ;RESTORE REGS
2877   F2BE EA                 NOP
2878   F2BF EA                 NOP
2879   F2C0             
2880   F2C0             ;SET SPEED FROM NORMAL TO 3 TIMES NORMAL
2881   F2C0 AD 08 A4    SETSPD LDA TSPEED      ;SPEED FLG
2882   F2C3 6A                 ROR A           ;NORMAL OR 3* NORM
2883   F2C4 A9 0C              LDA #12
2884   F2C6 90 02              BCC SETSP1
2885   F2C8 A9 04              LDA #4
2886   F2CA 8D 0A A4    SETSP1 STA NPUL
2887   F2CD A9 12              LDA #18
2888   F2CF 90 02              BCC SETSP2
2889   F2D1 A9 06              LDA #6
2890   F2D3 8D 0C A4    SETSP2 STA TIMG+1
2891   F2D6 60                 RTS
2892   F2D7             ;.FILE A3/2
2893   F2D7             
2894   F2D7             ; ADDRESS TABLE FOR EACH PRINT COLUMN
2895   F2D7             ; EACH TBL CONTAINS DOT PATTERNS FOR 1 OF THE 5 COLUMNS.
2896   F2D7             ;   DATA ARE STORED WITH EACH BYTE DEFINING ONE COLUMN...
2897   F2D7             ; OF A CHARACTER, WITH THE TOP DOT CORRESPONDING TO THE..
2898   F2D7             ; LSB IN THE BYTE
2899   F2D7 E1 F2 21 F3 MTBL   .DW COL0,COL1,COL2,COL3,COL4
2899   F2DB 61 F3 A1 F3 
2899   F2DF E1 F3 
2900   F2E1             
2901   F2E1             ;DOT PATTERNS FOR COLUMN ZERO (LEFTMOST COLUMN)
2902   F2E1 3E 7E 7F 3E COL0   .DB $3E,$7E,$7F,$3E,$7F,$7F,$7F,$3E  ;@ -- G
2902   F2E5 7F 7F 7F 3E 
2903   F2E9 7F 00 20 7F        .DB $7F,$00,$20,$7F,$7F,$7F,$7F,$3E  ;H -- O
2903   F2ED 7F 7F 7F 3E 
2904   F2F1 7F 3E 7F 46        .DB $7F,$3E,$7F,$46,$01,$3F,$07,$7F  ;P -- W
2904   F2F5 01 3F 07 7F 
2905   F2F9 63 07 61 7F        .DB $63,$07,$61,$7F,$03,$00,$02,$40  ;X -- (
2905   F2FD 03 00 02 40 
2906   F301 00 00 00 14        .DB $00,$00,$00,$14,$24,$63,$60,$00  ;  -- '
2906   F305 24 63 60 00 
2907   F309 00 00 14 08        .DB $00,$00,$14,$08,$40,$08,$40,$60  ;( -- /
2907   F30D 40 08 40 60 
2908   F311 3E 44 62 41        .DB $3E,$44,$62,$41,$18,$27,$3C,$01  ;0 -- 7
2908   F315 18 27 3C 01 
2909   F319 36 46 00 40        .DB $36,$46,$00,$40,$08,$14,$41,$02  ;8 -- ?
2909   F31D 08 14 41 02 
2910   F321             
2911   F321             ;DOT PATTERNS FOR COLUMN 1
2912   F321 41 09 49 41 COL1   .DB $41,$09,$49,$41,$41,$49,$09,$41  ;@ -- G
2912   F325 41 49 09 41 
2913   F329 08 41 40 08        .DB $08,$41,$40,$08,$40,$02,$06,$41  ;H -- O
2913   F32D 40 02 06 41 
2914   F331 09 41 09 49        .DB $09,$41,$09,$49,$01,$40,$18,$20  ;P -- W
2914   F335 01 40 18 20 
2915   F339 14 08 51 41        .DB $14,$08,$51,$41,$04,$00,$01,$40  ;X -- (
2915   F33D 04 00 01 40 
2916   F341 00 00 07 7F        .DB $00,$00,$07,$7F,$2A,$13,$4E,$04  ;  -- '
2916   F345 2A 13 4E 04 
2917   F349 1C 41 08 08        .DB $1C,$41,$08,$08,$30,$08,$00,$10  ;( -- /
2917   F34D 30 08 00 10 
2918   F351 51 42 51 41        .DB $51,$42,$51,$41,$14,$45,$4A,$71  ;0 -- 7
2918   F355 14 45 4A 71 
2919   F359 49 49 00 34        .DB $49,$49,$00,$34,$14,$14,$41,$01  ;8 -- ?
2919   F35D 14 14 41 01 
2920   F361             
2921   F361             ;DOT PATTERNS FOR COLUMN 2
2922   F361 5D 09 49 41 COL2   .DB $5D,$09,$49,$41,$41,$49,$09,$41  ;@ -- G
2922   F365 41 49 09 41 
2923   F369 08 7F 41 14        .DB $08,$7F,$41,$14,$40,$0C,$08,$41  ;H -- O
2923   F36D 40 0C 08 41 
2924   F371 09 51 19 49        .DB $09,$51,$19,$49,$7F,$40,$60,$18  ;P -- W
2924   F375 7F 40 60 18 
2925   F379 08 78 49 41        .DB $08,$78,$49,$41,$08,$41,$01,$40  ;X -- (
2925   F37D 08 41 01 40 
2926   F381 00 4F 00 14        .DB $00,$4F,$00,$14,$7F,$08,$59,$02  ;  -- '
2926   F385 7F 08 59 02 
2927   F389 22 22 3E 3E        .DB $22,$22,$3E,$3E,$00,$08,$00,$08  ;( -- /
2927   F38D 00 08 00 08 
2928   F391 49 7F 51 49        .DB $49,$7F,$51,$49,$12,$45,$49,$09  ;0 -- 7
2928   F395 12 45 49 09 
2929   F399 49 49 44 00        .DB $49,$49,$44,$00,$22,$14,$22,$51  ;8 -- ?
2929   F39D 22 14 22 51 
2930   F3A1             
2931   F3A1             ;DOT PATTERNS FOR COLUMN 3
2932   F3A1 55 09 49 41 COL3   .DB $55,$09,$49,$41,$22,$49,$09,$49  ;@ -- G
2932   F3A5 22 49 09 49 
2933   F3A9 08 41 3F 22        .DB $08,$41,$3F,$22,$40,$02,$30,$41  ;H -- O
2933   F3AD 40 02 30 41 
2934   F3B1 09 21 29 49        .DB $09,$21,$29,$49,$01,$40,$18,$20  ;P -- W
2934   F3B5 01 40 18 20 
2935   F3B9 14 08 45 00        .DB $14,$08,$45,$00,$10,$41,$01,$40  ;X -- (
2935   F3BD 10 41 01 40 
2936   F3C1 00 00 07 7F        .DB $00,$00,$07,$7F,$2A,$64,$26,$01  ;  -- '
2936   F3C5 2A 64 26 01 
2937   F3C9 41 1C 08 08        .DB $41,$1C,$08,$08,$00,$08,$00,$04  ;( -- /
2937   F3CD 00 08 00 04 
2938   F3D1 45 40 49 55        .DB $45,$40,$49,$55,$7F,$45,$49,$05  ;0 -- 7
2938   F3D5 7F 45 49 05 
2939   F3D9 49 29 00 00        .DB $49,$29,$00,$00,$41,$14,$14,$09  ;8 -- ?
2939   F3DD 41 14 14 09 
2940   F3E1             ;DOT PATTERNS FOR COLUMN 4
2941   F3E1 1E 7E 36 22 COL4   .DB $1E,$7E,$36,$22,$1C,$41,$01,$7A  ;@ -- G
2941   F3E5 1C 41 01 7A 
2942   F3E9 7F 00 01 41        .DB $7F,$00,$01,$41,$40,$7F,$7F,$3E  ;H -- O
2942   F3ED 40 7F 7F 3E 
2943   F3F1 06 5E 46 31        .DB $06,$5E,$46,$31,$01,$3F,$07,$7F  ;P -- W
2943   F3F5 01 3F 07 7F 
2944   F3F9 63 07 43 00        .DB $63,$07,$43,$00,$60,$7F,$02,$40  ;X -- (
2944   F3FD 60 7F 02 40 
2945   F401 00 00 00 14        .DB $00,$00,$00,$14,$12,$63,$50,$00  ;  -- '
2945   F405 12 63 50 00 
2946   F409 00 00 14 08        .DB $00,$00,$14,$08,$00,$08,$00,$03  ;( -- /
2946   F40D 00 08 00 03 
2947   F411 3E 40 46 22        .DB $3E,$40,$46,$22,$10,$39,$31,$03  ;0 -- 7
2947   F415 10 39 31 03 
2948   F419 36 1E 00 00        .DB $36,$1E,$00,$00,$41,$14,$08,$06  ;8 -- ?
2948   F41D 41 14 08 06 
2949   F421             
2950   F421             ;ASCII CHARACTERS FOR KB
2951   F421 20 08 00 0D ROW1   .DB $20,$08,$00,$0D,$00,$00,$00,$00
2951   F425 00 00 00 00 
2952   F429 00 60 5C 00 ROW2   .DB $00,$60,'\',$00,$00,$00,$7F,$00
2952   F42D 00 00 7F 00 
2953   F431 2E 4C 50 2D ROW3   .DB ".LP-:0;/"
2953   F435 3A 30 3B 2F 
2954   F439 4D 4A 49 4F ROW4   .DB "MJIO98K,"
2954   F43D 39 38 4B 2C 
2955   F441 42 47 59 55 ROW5   .DB "BGYU76HN"
2955   F445 37 36 48 4E 
2956   F449 43 44 52 54 ROW6   .DB "CDRT54FV"
2956   F44D 35 34 46 56 
2957   F451 5A 41 57 45 ROW7   .DB "ZAWE32SX"
2957   F455 33 32 53 58 
2958   F459 00 00 1B 51 ROW8   .DB $00,$00,$1B,"Q1",$5E,"]["
2958   F45D 31 5E 5D 5B 
2959   F461             
2960   F461             ;DISASSEMBLE INSTRUCTIONS AND SHOW REGS IS REGF SET
2961   F461 AD 0E A4    REGQ   LDA REGF        ;GET FLAG
2962   F464 F0 06              BEQ DISASM
2963   F466 20 32 E2           JSR REG1        ;SHOW THE SIX REGS
2964   F469 20 24 EA           JSR CRCK        ;<CR>
2965   F46C             
2966   F46C 20 45 F5    DISASM JSR PRBL2
2967   F46F 20 3C F5           JSR PRPC        ;OUTPUT PROG COUNTR
2968   F472 A0 00              LDY #0
2969   F474 20 56 EB           JSR PCLLD
2970   F477 A8                 TAY
2971   F478 4A                 LSR A
2972   F479 90 0B              BCC IEVEN
2973   F47B 4A                 LSR A
2974   F47C B0 17              BCS ERR
2975   F47E C9 22              CMP #$22
2976   F480 F0 13              BEQ ERR
2977   F482 29 07              AND #7
2978   F484 09 80              ORA #$80
2979   F486 4A          IEVEN  LSR A
2980   F487 AA                 TAX
2981   F488 BD 5B F5           LDA MODE,X
2982   F48B B0 04              BCS RTMODE
2983   F48D 4A                 LSR A
2984   F48E 4A                 LSR A
2985   F48F 4A                 LSR A
2986   F490 4A                 LSR A
2987   F491 29 0F       RTMODE AND #$F
2988   F493 D0 04              BNE GETFMT
2989   F495 A0 80       ERR    LDY #$80
2990   F497 A9 00              LDA #0
2991   F499 AA          GETFMT TAX
2992   F49A BD 9F F5           LDA MODE2,X
2993   F49D 8D 16 01           STA FORMA
2994   F4A0 29 03              AND #3
2995   F4A2 85 EA              STA LENGTH
2996   F4A4 98                 TYA             ;OPCODE
2997   F4A5 29 8F              AND #$8F
2998   F4A7 AA                 TAX
2999   F4A8 98                 TYA             ;OPCODE IN A AGAIN
3000   F4A9 A0 03              LDY #3
3001   F4AB E0 8A              CPX #$8A
3002   F4AD F0 0B              BEQ MNNDX3
3003   F4AF 4A          MNNDX1 LSR A
3004   F4B0 90 08              BCC MNNDX3
3005   F4B2 4A                 LSR A
3006   F4B3 4A          MNNDX2 LSR A
3007   F4B4 09 20              ORA #$20
3008   F4B6 88                 DEY
3009   F4B7 D0 FA              BNE MNNDX2
3010   F4B9 C8                 INY
3011   F4BA 88          MNNDX3 DEY
3012   F4BB D0 F2              BNE MNNDX1
3013   F4BD 48                 PHA             ;SAVE MNEMONIC TABLE INDEX
3014   F4BE 20 56 EB           JSR PCLLD
3015   F4C1 20 46 EA           JSR NUMA
3016   F4C4 20 45 F5           JSR PRBL2       ;PRINT LAST BLANK
3017   F4C7 68                 PLA
3018   F4C8 A8                 TAY
3019   F4C9 B9 B9 F5           LDA MNEML,Y
3020   F4CC 8D 17 01           STA LMNEM
3021   F4CF B9 F9 F5           LDA MNEMR,Y
3022   F4D2 8D 18 01           STA RMNEM
3023   F4D5 A2 03              LDX #3          ;MUST BE
3024   F4D7 A9 00       PRMN1  LDA #0
3025   F4D9 A0 05              LDY #5
3026   F4DB 0E 18 01    PRMN2  ASL RMNEM
3027   F4DE 2E 17 01           ROL LMNEM
3028   F4E1 2A                 ROL A
3029   F4E2 88                 DEY
3030   F4E3 D0 F6              BNE PRMN2
3031   F4E5 69 BF              ADC #'?'+$80    ;ADD "?" OFFSET
3032   F4E7 20 BC E9           JSR OUTALL
3033   F4EA CA                 DEX
3034   F4EB D0 EA              BNE PRMN1
3035   F4ED 20 45 F5           JSR PRBL2
3036   F4F0 A2 06              LDX #6
3037   F4F2 A9 00              LDA #0
3038   F4F4 8D 29 A4           STA STIY+2      ;FLAG
3039   F4F7 E0 03       PRADR1 CPX #3
3040   F4F9 D0 1E              BNE PRADR3      ;IF X=3 PRINT ADDR VALUE
3041   F4FB A4 EA              LDY LENGTH
3042   F4FD F0 1A              BEQ PRADR3      ;1 BYTE INSTR
3043   F4FF AD 16 01    PRADR2 LDA FORMA
3044   F502 C9 E8              CMP #$E8        ;RELATIVE ADDRESSING
3045   F504 20 56 EB           JSR PCLLD
3046   F507 B0 27              BCS RELADR
3047   F509             ;SE IF SYMBOL
3048   F509 48                 PHA
3049   F50A AD 29 A4           LDA STIY+2
3050   F50D D0 03              BNE MR11A
3051   F50F EE 29 A4           INC STIY+2      ;SHOW WE WERE HERE
3052   F512             
3053   F512 68          MR11A  PLA
3054   F513 20 46 EA           JSR NUMA
3055   F516 88                 DEY
3056   F517 D0 E6              BNE PRADR2
3057   F519 0E 16 01    PRADR3 ASL FORMA
3058   F51C 90 0E              BCC PRADR4
3059   F51E BD AC F5           LDA CHAR1-1,X
3060   F521 20 BC E9           JSR OUTALL
3061   F524 BD B2 F5           LDA CHAR2-1,X
3062   F527 F0 03              BEQ PRADR4
3063   F529 20 BC E9           JSR OUTALL
3064   F52C CA          PRADR4 DEX
3065   F52D D0 C8              BNE PRADR1
3066   F52F 60                 RTS
3067   F530 20 4D F5    RELADR JSR PCADJ3
3068   F533 AA                 TAX
3069   F534 E8                 INX
3070   F535 D0 01              BNE PRNTXY
3071   F537 C8                 INY
3072   F538 98          PRNTXY TYA
3073   F539 4C 42 EA           JMP WRAX        ;PRINT A &X
3074   F53C AD 26 A4    PRPC   LDA SAVPC+1     ;PRINT PC
3075   F53F AE 25 A4           LDX SAVPC
3076   F542 20 42 EA           JSR WRAX
3077   F545 A9 20       PRBL2  LDA #' '
3078   F547 4C BC E9           JMP OUTALL
3079   F54A A5 EA              LDA LENGTH
3080   F54C 38                 SEC
3081   F54D AC 26 A4    PCADJ3 LDY SAVPC+1     ;PRG CNTR HIGH
3082   F550 AA                 TAX
3083   F551 10 01              BPL PCADJ4
3084   F553 88                 DEY
3085   F554 6D 25 A4    PCADJ4 ADC SAVPC       ;PROG CNTR LOW
3086   F557 90 01              BCC RTS1
3087   F559 C8                 INY
3088   F55A 60          RTS1   RTS
3089   F55B             
3090   F55B 40 02 45 03 MODE   .DB $40,2,$45,3,$D0,8,$40,9
3090   F55F D0 08 40 09 
3091   F563 30 22 45 33        .DB $30,$22,$45,$33,$D0,8,$40,9
3091   F567 D0 08 40 09 
3092   F56B 40 02 45 33        .DB $40,2,$45,$33,$D0,8,$40,9
3092   F56F D0 08 40 09 
3093   F573 40 02 45 B3        .DB $40,2,$45,$B3,$D0,8,$40,9
3093   F577 D0 08 40 09 
3094   F57B 00 22 44 33        .DB 0,$22,$44,$33,$D0,$8C,$44,0
3094   F57F D0 8C 44 00 
3095   F583 11 22 44 33        .DB $11,$22,$44,$33,$D0,$8C,$44,$9A
3095   F587 D0 8C 44 9A 
3096   F58B 10 22 44 33        .DB $10,$22,$44,$33
3097   F58F D0 08 40 09        .DB $D0,8,$40,9
3098   F593 10 22 44 33        .DB $10,$22,$44,$33,$D0,8,$40,9
3098   F597 D0 08 40 09 
3099   F59B 62 13 78 A9        .DB $62,$13,$78,$A9
3100   F59F             
3101   F59F 00 21 01 02 MODE2  .DB 0,$21,1,2,0,$80,$59,$4D
3101   F5A3 00 80 59 4D 
3102   F5A7 11 12 06 4A        .DB $11,$12,6,$4A,5,$1D
3102   F5AB 05 1D 
3103   F5AD             
3104   F5AD 2C 29 2C 23 CHAR1  .DB ",",$29,",#(","."
3104   F5B1 28 2E 
3105   F5B3 59 00 58 00 CHAR2  .DB "Y",0,"X",0,0,"A"
3105   F5B7 00 41 
3106   F5B9             
3107   F5B9 1C 8A 1C 23 MNEML  .DB $1C,$8A,$1C,$23,$5D,$8B,$1B
3107   F5BD 5D 8B 1B 
3108   F5C0 A1                 .DB $A1
3109   F5C1 9D 8A 1D 23        .DB $9D,$8A,$1D,$23,$9D,$8B,$1D,$A1
3109   F5C5 9D 8B 1D A1 
3110   F5C9 00 29 19 AE        .DB 0,$29,$19,$AE,$69,$A8,$19,$23
3110   F5CD 69 A8 19 23 
3111   F5D1 24 53 1B 23        .DB $24,$53,$1B,$23,$24,$53,$19,$A1
3111   F5D5 24 53 19 A1 
3112   F5D9 00 1A 5B 5B        .DB 0,$1A,$5B,$5B,$A5,$69,$24,$24
3112   F5DD A5 69 24 24 
3113   F5E1 AE AE A8 AD        .DB $AE,$AE,$A8,$AD,$29,0,$7C,0
3113   F5E5 29 00 7C 00 
3114   F5E9 15 9C 6D 9C        .DB $15,$9C,$6D,$9C,$A5,$69,$29,$53
3114   F5ED A5 69 29 53 
3115   F5F1 84 13 34 11        .DB $84,$13,$34,$11,$A5,$69,$23,$A0
3115   F5F5 A5 69 23 A0 
3116   F5F9             
3117   F5F9 D8 62 5A 48 MNEMR  .DB $D8,$62,$5A,$48,$26,$62,$94
3117   F5FD 26 62 94 
3118   F600 88                 .DB $88
3119   F601 54 44 C8 54        .DB $54,$44,$C8,$54,$68,$44,$E8,$94
3119   F605 68 44 E8 94 
3120   F609 00 B4 08 84        .DB 0,$B4,8,$84,$74,$B4,$28,$6E
3120   F60D 74 B4 28 6E 
3121   F611 74 F4 CC 4A        .DB $74,$F4,$CC,$4A,$72,$F2,$A4,$8A
3121   F615 72 F2 A4 8A 
3122   F619 00 AA A2 A2        .DB 0,$AA,$A2,$A2,$74,$74,$74,$72
3122   F61D 74 74 74 72 
3123   F621 44 68 B2 32        .DB $44,$68,$B2,$32,$B2,0,$22,0
3123   F625 B2 00 22 00 
3124   F629 1A 1A 26 26        .DB $1A,$1A,$26,$26,$72,$72,$88,$C8
3124   F62D 72 72 88 C8 
3125   F631 C4 CA 26 48        .DB $C4,$CA,$26,$48,$44,$44,$A2,$C8
3125   F635 44 44 A2 C8 
3126   F639             
3127   F639             ;*******************************
3128   F639             ;***    AIM TEXT EDITOR      ***
3129   F639             ;***      05/01/78           ***
3130   F639             ;*******************************
3131   F639             
3132   F639             ; R=READ FROM ANY INPUT DEVICE
3133   F639             ; I=INSERT A LINE FROM INPUT DEV
3134   F639             ; K=DELETE A LINE
3135   F639             ; U-GO UP ONE LINE
3136   F639             ; D=GO DOWN ONE LINE
3137   F639             ; L=LIST LINES TO OUTPUT DEV
3138   F639             ; T=GO TO TOP OF TEXT
3139   F639             ; B=GO TO BOTTOM OF TEXT
3140   F639             ; F=FIND STRING
3141   F639             ; C=CHANGE STRING TO NEW STRING
3142   F639             ; Q=QUIT EDITOR
3143   F639             ; <SPACE>=DISPLAY CURRENT LINE
3144   F639             
3145   F639             ;***** E COMMAND-EDITOR ENTRY (FROM MONITOR) *****
3146   F639 20 13 EA    EDIT   JSR CRLOW
3147   F63C A0 6C              LDY #EMSG1-M1
3148   F63E 20 AF E7           JSR KEP         ;START UP MSG
3149   F641 20 13 EA           JSR CRLOW
3150   F644 20 A3 E7    EDI0   JSR FROM
3151   F647 B0 FB              BCS EDI0
3152   F649 AD 1E A4           LDA CKSUM       ;IS CLR IF ADDR WAS INPUTTED
3153   F64C F0 03              BEQ *+5
3154   F64E 20 DB E2           JSR WRITAZ      ;OUTPUT DEFAULT ADDR (0200)
3155   F651 A2 01              LDX #1
3156   F653 BD 1C A4    EDI1   LDA ADDR,X
3157   F656 95 E3              STA TEXT,X
3158   F658 95 E1              STA BOTLN,X
3159   F65A 9D 1A A4           STA S1,X        ;FOR MEMORY TEST
3160   F65D CA                 DEX
3161   F65E 10 F3              BPL EDI1
3162   F660 20 3B E8           JSR BLANK2
3163   F663 20 A7 E7    EDI2   JSR TO          ;END
3164   F666 B0 FB              BCS EDI2
3165   F668 20 BC F8           JSR TOPNO       ;TRANSF TEXT TO ADDR FOR RAM CHECK
3166   F66B AD 1E A4           LDA CKSUM       ;IS CLR IF ADDR WAS INPUTTED
3167   F66E F0 10              BEQ EDI4        ;BRNCH IF NOT DEFAULT VALUE
3168   F670 20 34 F9           JSR SAVNOW
3169   F673 20 B6 F6    EDI3   JSR EDI         ;CARRY IS SET IF NO RAM THERE
3170   F676 90 FB              BCC EDI3
3171   F678 A9 00              LDA #0          ;SET UPPER LIMIT TO BEGINNING...
3172   F67A 8D 1C A4           STA ADDR        ;OF PAGE
3173   F67D 20 DB E2           JSR WRITAZ      ;OUTPUT DEFAULT VALUE ,UPPER LIMIT
3174   F680 AD 1C A4    EDI4   LDA ADDR
3175   F683 85 E5              STA END
3176   F685 AD 1D A4           LDA ADDR+1
3177   F688 85 E6              STA END+1
3178   F68A 20 34 F9           JSR SAVNOW
3179   F68D             ;NOW SEE IF MEMORY IS THERE
3180   F68D 20 B6 F6    EDI5   JSR EDI
3181   F690 90 FB              BCC EDI5
3182   F692 A5 E6              LDA END+1       ;CMP WITH END
3183   F694 CD 1D A4           CMP ADDR+1
3184   F697 F0 11              BEQ EDI7
3185   F699 B0 13              BCS EDI8
3186   F69B 20 BC F8    EDI6   JSR TOPNO       ;RESTORE NOWLN
3187   F69E A9 00              LDA #0
3188   F6A0 91 DF              STA (NOWLN),Y   ;END OF TEXT MARKER
3189   F6A2 20 13 EA           JSR CRLOW
3190   F6A5 A9 52              LDA #'R'        ;FORCE READ COMMAND
3191   F6A7 4C 8D FA           JMP ENTRY
3192   F6AA A5 E5       EDI7   LDA END         ;IF ZERO MEM IS OKAY
3193   F6AC F0 ED              BEQ EDI6
3194   F6AE A9 00       EDI8   LDA #0
3195   F6B0 8D 1C A4           STA ADDR
3196   F6B3 4C 33 EB           JMP MEMERR      ;NO MEMORY FOR THOSE LIMITS
3197   F6B6             
3198   F6B6 A0 00       EDI    LDY #0          ;CHCK IF MEMORY WRITES
3199   F6B8 20 B7 FE           JSR PATCH6      ;GET BYTE ADDR BY ADDR,ADDR+1
3200   F6BB 48                 PHA             ;SAVE IT
3201   F6BC A9 AA              LDA #$AA        ;SET THIS PATTERN
3202   F6BE 20 78 EB           JSR SADDR       ;CHCK IT
3203   F6C1 D0 09              BNE EDI2B
3204   F6C3 68                 PLA
3205   F6C4 20 78 EB           JSR SADDR       ;RESTORE CHR
3206   F6C7 EE 1D A4           INC ADDR+1      ;NEXT PAG
3207   F6CA 18                 CLC             ;IT WROTE
3208   F6CB 60                 RTS
3209   F6CC 38          EDI2B  SEC             ;DIDNT WRITE
3210   F6CD 68                 PLA
3211   F6CE 60                 RTS
3212   F6CF             
3213   F6CF             ;***** T COMMAND-REENTRY EDITOR *****
3214   F6CF             ;RE-ENTRY POINT,TEXT ALREADY THERE
3215   F6CF 20 24 EA    REENTR JSR CRCK        ;<CR> IF PRI ON
3216   F6D2 20 BC F8    TP     JSR TOPNO       ;GO TO TOP
3217   F6D5 4C B9 F7           JMP IN03A       ;DISPLAY LINE
3218   F6D8             
3219   F6D8             ;***** U COMMAND-UP LINE *****
3220   F6D8             ;GO UP ONE LINE BUT...
3221   F6D8             ;DOWN IN ADDRESSING MEMORY
3222   F6D8 20 DB F8    DNNO   JSR ATTOP       ;THIS RTN DOESNT PRINT
3223   F6DB 90 06              BCC DOW1        ;NOT TOP
3224   F6DD 20 27 F7           JSR PLNE        ;ARE AT TOP
3225   F6E0 4C 78 FA           JMP ERR0
3226   F6E3 A0 00       DOW1   LDY #0
3227   F6E5 20 1D F9           JSR SUB         ;DECREMENT NOWLN PAST <CR>
3228   F6E8 20 1D F9    DOW2   JSR SUB
3229   F6EB 20 DB F8           JSR ATTOP
3230   F6EE B0 30              BCS UP4
3231   F6F0 B1 DF              LDA (NOWLN),Y
3232   F6F2 C9 0D              CMP #CR
3233   F6F4 D0 F2              BNE DOW2
3234   F6F6 4C 28 F9           JMP AD1
3235   F6F9             
3236   F6F9             ;***** D COMMAND-DOWN LINE *****
3237   F6F9             ;GO DOWN ONE LINE BUT...
3238   F6F9             ;UP IN ADDRESSING MEMORY
3239   F6F9 20 09 F7    UP     JSR UPNO
3240   F6FC 20 27 F7           JSR PLNE        ;DISPLAY LINE & CHCK BOTTOM
3241   F6FF 20 E9 F8           JSR ATBOT
3242   F702 90 1C              BCC UP4
3243   F704 A0 72              LDY #EMSG2-M1   ;PRINT "END"
3244   F706 4C AF E7           JMP KEP
3245   F709 A0 00       UPNO   LDY #0
3246   F70B 20 E9 F8           JSR ATBOT
3247   F70E 90 03              BCC UP1
3248   F710 4C 5C FA           JMP ENDERR
3249   F713 B1 DF       UP1    LDA (NOWLN),Y
3250   F715 F0 09              BEQ UP4
3251   F717 C8                 INY
3252   F718 C9 0D              CMP #CR
3253   F71A D0 F7              BNE UP1
3254   F71C 98                 TYA
3255   F71D 20 2A F9           JSR ADDA        ;ADD LENGTH TO CURRENT LINE
3256   F720 60          UP4    RTS
3257   F721             
3258   F721             ;***** B COMMAND-GO TO BOTTOM *****
3259   F721 20 C5 F8    BT     JSR SETBOT
3260   F724             ;START U-COMMAND HERE
3261   F724 20 D8 F6    DOWN   JSR DNNO        ;U COMMAND
3262   F727             
3263   F727             ;***** <SPACE> COMMAND-DISPLAY CURRENT LINE *****
3264   F727 A0 00       PLNE   LDY #0          ;PRINT CURRENT LINE
3265   F729 B1 DF       P02    LDA (NOWLN),Y
3266   F72B F0 0E              BEQ P01         ;PAST END ?
3267   F72D C9 0D              CMP #CR         ;DONE?
3268   F72F F0 0A              BEQ P01
3269   F731 20 BC E9           JSR OUTALL      ;PUT IT SOMEWHERE
3270   F734 99 38 A4           STA DIBUFF,Y
3271   F737 C8                 INY
3272   F738 4C 29 F7           JMP P02
3273   F73B 84 EA       P01    STY LENGTH
3274   F73D 84 E9              STY OLDLEN
3275   F73F AC 13 A4    P03    LDY OUTFLG      ;ONE MORE <CR> FOR TAPE
3276   F742 C0 0D              CPY #CR
3277   F744 F0 03              BEQ P00
3278   F746 4C F0 E9           JMP CRLF        ;TO OUTPUT DEV
3279   F749 4C 24 EA    P00    JMP CRCK        ;<CR>, & DONT CLR DISPL
3280   F74C             
3281   F74C             ;***** K COMMAND-KILL LINE *****
3282   F74C             ;DELETE CURRENT LINE
3283   F74C 20 B6 F8    DLNE   JSR KIFLG       ;CLR K OR I COMM FLG
3284   F74F EA                 NOP
3285   F750 EA                 NOP
3286   F751 EA                 NOP
3287   F752 20 27 F7           JSR PLNE
3288   F755 20 E9 F8           JSR ATBOT
3289   F758 B0 CD              BCS PLNE        ;AT END OF TEXT
3290   F75A A0 00              LDY #0
3291   F75C 84 EA              STY LENGTH
3292   F75E 20 3F F9           JSR REPLAC      ;KILL LINE
3293   F761 4C 27 F7           JMP PLNE
3294   F764             
3295   F764             ;***** I COMMAND-INSERT LINE *****
3296   F764 20 6D F7    IN     JSR INL
3297   F767 20 F9 F6           JSR UP          ;DISPLAY NEXT LINE DOWN
3298   F76A 4C 78 FA           JMP ERR0        ;IF AT BOTTOM PRINT "END"
3299   F76D 20 B6 F8    INL    JSR KIFLG       ;CLR K OR I COMM FLG
3300   F770 A0 00              LDY #0          ;GET LINE INTO DIBUFF
3301   F772 84 E9              STY OLDLEN
3302   F774 20 BD E7           JSR PROMPT
3303   F777 20 44 EB           JSR CLR
3304   F77A 20 93 E9    IN02   JSR INALL
3305   F77D 20 F8 FE           JSR PATC12      ;CLR, SO WE CAN OUTPUT TO PRI
3306   F780 C9 7F              CMP #$7F        ;RUB
3307   F782 4C 2A FF           JMP PATC17      ;NO ZEROS IN CASE OF PAPER TAPE
3308   F785 C9 0A       IN02A  CMP #LF
3309   F787 F0 F1              BEQ IN02
3310   F789 C9 0D              CMP #CR
3311   F78B F0 1B              BEQ IN03
3312   F78D C0 3C              CPY #60         ;DO NOT INCR Y IF 60
3313   F78F B0 08              BCS IN03B
3314   F791 99 38 A4           STA DIBUFF,Y
3315   F794 C8                 INY
3316   F795 C0 3C              CPY #60
3317   F797 D0 E1              BNE IN02        ;CONTIN , DISP WONT ALLOW > 60 CHR`
3318   F799 A0 3C       IN03B  LDY #60         ;SET Y TO MAX OF 60
3319   F79B A9 01              LDA #$01
3320   F79D 0D 11 A4           ORA PRIFLG      ;DO NOT OUTPUT TO PRI ANY MORE
3321   F7A0 8D 11 A4           STA PRIFLG      ;OTHERWISE CLOBBERS THE BUFFER
3322   F7A3 8C 15 A4           STY CURPO2
3323   F7A6 D0 D2              BNE IN02        ;GO BACK
3324   F7A8 84 EA       IN03   STY LENGTH
3325   F7AA C0 00              CPY #0          ;FIRST CHAR?
3326   F7AC D0 17              BNE IN05
3327   F7AE AD 19 A4           LDA COUNT       ;K OR I COMM FLG ?
3328   F7B1 D0 12              BNE IN05        ;BRANCH IF C COMMAND
3329   F7B3 20 24 EA           JSR CRCK        ;<CR> IF PRI PNTR DIFF FROM 0
3330   F7B6 20 03 FF           JSR PATC13      ;TURN ON TAPES & SET DEFAULT DEV
3331   F7B9 20 27 F7    IN03A  JSR PLNE        ;DISPLAY NEXT LINE DOWN
3332   F7BC 20 09 F7           JSR UPNO        ;PRINT "END" IF BOTTOM
3333   F7BF 20 D8 F6           JSR DNNO
3334   F7C2 4C 78 FA           JMP ERR0
3335   F7C5 20 3F F9    IN05   JSR REPLAC      ;INSERT THE LINE
3336   F7C8 4C 24 EA           JMP CRCK        ;<CR> IF PRI PTR NOT 0
3337   F7CB             
3338   F7CB             ;***** R COMMAND-READ LINE *****
3339   F7CB             ;READ TEXT FROM ANY INPUT DEVICE UNTIL
3340   F7CB             ;TWO CONSECUTIVE <CR> ARE ENCOUNTER.
3341   F7CB 20 48 E8    INPU   JSR WHEREI
3342   F7CE AC 12 A4           LDY INFLG       ;IF TAPE DO NOT ERRASE BUFFER
3343   F7D1 C0 54              CPY #'T'
3344   F7D3 F0 03              BEQ INPU1
3345   F7D5 20 13 EA           JSR CRLOW
3346   F7D8 20 6D F7    INPU1  JSR INL
3347   F7DB 20 09 F7           JSR UPNO        ;NEXT LINE
3348   F7DE 4C D8 F7           JMP INPU1
3349   F7E1             
3350   F7E1             ;***** L COMMAND-LIST LINES *****
3351   F7E1             ;PRINT FROM HERE N LINES TO ACTIVE OUTPUT DEV
3352   F7E1 20 37 E8    LST    JSR PSL1        ;PRINT "/"
3353   F7E4 20 85 E7           JSR GCNT        ;GET LINES COUNT
3354   F7E7 20 13 EA           JSR CRLOW
3355   F7EA 20 71 E8           JSR WHEREO      ;WHERE TO
3356   F7ED 4C F8 F7           JMP LST02       ;ONE MORE LINE
3357   F7F0 20 07 E9    LST01  JSR RCHEK
3358   F7F3 20 90 E7           JSR DONE
3359   F7F6 F0 0B              BEQ LST3
3360   F7F8 20 27 F7    LST02  JSR PLNE
3361   F7FB 20 09 F7           JSR UPNO        ;NEXT LINE
3362   F7FE 20 E9 F8           JSR ATBOT
3363   F801 90 ED              BCC LST01       ;NO
3364   F803 20 3F F7    LST3   JSR P03         ;ONE MORE CRLF FOR TAPE
3365   F806 20 0D FF           JSR PATC14      ;CLOSE TAPE IF NEEDED
3366   F809 4C 5C FA           JMP ENDERR
3367   F80C             
3368   F80C             ;***** F COMMAND-FIND STRING *****
3369   F80C             ;FIND STRING AND PRINT LINE TO TERMINAL
3370   F80C 20 1E F8    FCHAR  JSR FCH
3371   F80F AD 15 A4    FCHA1  LDA CURPO2      ;SAVE BUFFER PNTR
3372   F812 48                 PHA
3373   F813 20 44 EB           JSR CLR         ;CLEAR DISP PNTR
3374   F816 20 27 F7           JSR PLNE
3375   F819 68                 PLA
3376   F81A 8D 15 A4           STA CURPO2
3377   F81D 60                 RTS
3378   F81E             ;FIND A CHARACTER STRING
3379   F81E A0 00       FCH    LDY #0
3380   F820 20 BD E7           JSR PROMPT
3381   F823 20 5F E9    FC1    JSR RDRUP       ;GET THE CHARACTER
3382   F826 C9 0D              CMP #CR         ;REUSE OLD ARGUMENT??
3383   F828 D0 0A              BNE FC3
3384   F82A C0 00              CPY #0          ;FIRST CHAR?
3385   F82C D0 06              BNE FC3
3386   F82E 20 09 F7    FC2    JSR UPNO        ;NEXT LINE DOWN
3387   F831 4C 49 F8           JMP FC5
3388   F834 C9 0D       FC3    CMP #CR         ;DONE
3389   F836 F0 0B              BEQ FC4
3390   F838 99 EB 00           STA STRING,Y
3391   F83B C8                 INY
3392   F83C C0 14              CPY #20         ;MAX LENGTH
3393   F83E D0 E3              BNE FC1
3394   F840 4C 72 FA           JMP ERROR
3395   F843 20 24 EA    FC4    JSR CRCK        ;CLEAR DISPLAY
3396   F846 8C 29 A4           STY STIY+2      ;COUNT OF CHARACTERS
3397   F849 A0 00       FC5    LDY #0
3398   F84B 8C 15 A4           STY CURPO2      ;START AT BEGINNING OF LINENTR IS
3399   F84E AC 15 A4    FC6    LDY CURPO2      ;CLOBBER
3400   F851 A2 00              LDX #0
3401   F853 B1 DF       FC7    LDA (NOWLN),Y   ;GET THE CHARACTER
3402   F855 D0 03              BNE FC8         ;NOT AT END
3403   F857 4C 5C FA           JMP ENDERR
3404   F85A C9 0D       FC8    CMP #CR         ;END OF LINE
3405   F85C F0 D0              BEQ FC2
3406   F85E D5 EB              CMP STRING,X
3407   F860 F0 06              BEQ FC9
3408   F862 EE 15 A4           INC CURPO2
3409   F865 4C 4E F8           JMP FC6
3410   F868 C8          FC9    INY
3411   F869 E8                 INX
3412   F86A EC 29 A4           CPX STIY+2      ;DONE?
3413   F86D D0 E4              BNE FC7
3414   F86F 60                 RTS
3415   F870             
3416   F870             ;***** Q COMMAND-EXIT EDITOR *****
3417   F870             ; EXIT THE TEXT EDITOR NEATLY
3418   F870 20 13 EA    STOP   JSR CRLOW
3419   F873 4C A1 E1           JMP COMIN
3420   F876             
3421   F876             ;***** C COMMAND-CHANGE STRING *****
3422   F876             ;CHANGE STRING TO ANOTHER STRING IN A LINE
3423   F876 20 B2 F8    CHNG   JSR CFLG        ;SET C COMMAND FLG
3424   F879 20 0C F8           JSR FCHAR       ;FIND CORRECT LINE
3425   F87C 20 3C E9    CHN1   JSR READ        ;IS <CR> IF OK
3426   F87F C9 0D              CMP #CR
3427   F881 F0 09              BEQ CHN2
3428   F883 20 2E F8           JSR FC2         ;TRY NEXT ONE
3429   F886 20 0F F8           JSR FCHA1       ; SHOW LINE
3430   F889 4C 7C F8           JMP CHN1
3431   F88C AD 29 A4    CHN2   LDA STIY+2      ;GET CHAR COUNT
3432   F88F 85 E9              STA OLDLEN      ;GET READY FOR REPLAC
3433   F891 AD 15 A4           LDA CURPO2      ;PNTR TO BEGINNING OF STRING
3434   F894 48                 PHA             ;SAVE IT
3435   F895 20 2A F9           JSR ADDA        ;ADD TO NOWLN (LINE PNTR)
3436   F898 20 44 EB           JSR CLR         ;CLEAR DISP
3437   F89B A0 05              LDY #M3-M1      ;PRINT "TO"
3438   F89D 20 AF E7           JSR KEP
3439   F8A0 A0 00              LDY #0
3440   F8A2 20 7A F7           JSR IN02        ;GET NEW STRING & REPLAC
3441   F8A5 68                 PLA
3442   F8A6 AA                 TAX
3443   F8A7 F0 06              BEQ CHN4
3444   F8A9 20 1D F9    CHN3   JSR SUB         ;RESTORE NOWLN WHERE IT WAS
3445   F8AC CA                 DEX
3446   F8AD D0 FA              BNE CHN3
3447   F8AF 4C 27 F7    CHN4   JMP PLNE        ;DISPLAY THE CHANGED LINE
3448   F8B2             
3449   F8B2             ;THE FOLLOWING ARE SUBROUTINES USED BY COMMANDS
3450   F8B2 A9 01       CFLG   LDA #1          ;SET FLG FOR C COMMAND
3451   F8B4 D0 02              BNE KI2
3452   F8B6 A9 00       KIFLG  LDA #0          ;CLR K OR I COMMAND FLG
3453   F8B8 8D 19 A4    KI2    STA COUNT
3454   F8BB 60                 RTS
3455   F8BC             
3456   F8BC A5 E3       TOPNO  LDA TEXT        ;SET CURRENT LINE TO TOP
3457   F8BE A6 E4              LDX TEXT+1
3458   F8C0 85 DF       TPO1   STA NOWLN
3459   F8C2 86 E0              STX NOWLN+1
3460   F8C4 60                 RTS
3461   F8C5             
3462   F8C5 A5 E1       SETBOT LDA BOTLN       ;SET CURRENT LINE TO BOTTOM
3463   F8C7 A6 E2              LDX BOTLN+1
3464   F8C9 85 E7              STA SAVE
3465   F8CB 86 E8              STX SAVE+1
3466   F8CD 4C C0 F8           JMP TPO1
3467   F8D0             
3468   F8D0 AD 1C A4    RESNOW LDA ADDR        ;RESTORE CURRENT LINE ADDRESS
3469   F8D3 85 DF              STA NOWLN
3470   F8D5 AD 1D A4           LDA ADDR+1
3471   F8D8 85 E0              STA NOWLN+1
3472   F8DA 60                 RTS
3473   F8DB             
3474   F8DB             ; SEE IF CURRENT LINE AT TOP (C SET IF SO)
3475   F8DB A5 DF       ATTOP  LDA NOWLN
3476   F8DD C5 E3              CMP TEXT
3477   F8DF D0 16              BNE AT01
3478   F8E1 A5 E0              LDA NOWLN+1
3479   F8E3 C5 E4              CMP TEXT+1
3480   F8E5 D0 10              BNE AT01
3481   F8E7 38                 SEC
3482   F8E8 60                 RTS
3483   F8E9             
3484   F8E9             ; SEE IF CURRENT LINE AT BOTTOM (C SET IF SO)
3485   F8E9 A5 DF       ATBOT  LDA NOWLN
3486   F8EB A6 E0              LDX NOWLN+1
3487   F8ED C5 E1              CMP BOTLN
3488   F8EF D0 06              BNE AT01
3489   F8F1 E4 E2              CPX BOTLN+1
3490   F8F3 D0 02              BNE AT01
3491   F8F5 38          AT02   SEC
3492   F8F6 60                 RTS
3493   F8F7 18          AT01   CLC
3494   F8F8 60                 RTS
3495   F8F9             
3496   F8F9             ;SEE IF WE RAN PAST END OF BUFFER LIMIT
3497   F8F9 A5 E1       ATEND  LDA BOTLN
3498   F8FB A6 E2              LDX BOTLN+1
3499   F8FD E4 E6              CPX END+1       ;HIGH BYTE > OR = ?
3500   F8FF 90 F6              BCC AT01
3501   F901 D0 F2              BNE AT02
3502   F903 C5 E5              CMP END         ;LOW BYTE > OR = ?
3503   F905 90 F0              BCC AT01
3504   F907 B0 EC              BCS AT02
3505   F909             
3506   F909             ; SAVE CURRENT LINE (NEWLN) IN S1
3507   F909 A5 DF       NOWS1  LDA NOWLN
3508   F90B A6 E0              LDX NOWLN+1
3509   F90D 4C 16 F9           JMP ADDS1A
3510   F910             
3511   F910             ; MOVE ADDR INTO S1
3512   F910 AD 1C A4    ADDRS1 LDA ADDR
3513   F913 AE 1D A4           LDX ADDR+1
3514   F916 8D 1A A4    ADDS1A STA S1
3515   F919 8E 1B A4           STX S1+1
3516   F91C 60                 RTS
3517   F91D             
3518   F91D             ; SUBTRACT ONE FROM CURRENT LINE (NOWLN)
3519   F91D C6 DF       SUB    DEC NOWLN
3520   F91F A5 DF              LDA NOWLN
3521   F921 C9 FF              CMP #$FF
3522   F923 D0 02              BNE SUB1
3523   F925 C6 E0              DEC NOWLN+1
3524   F927 60          SUB1   RTS
3525   F928             
3526   F928             ; ADD ACC TO CURRENT LINE (NOWLN)
3527   F928 A9 01       AD1    LDA #1
3528   F92A 18          ADDA   CLC
3529   F92B 65 DF              ADC NOWLN
3530   F92D 85 DF              STA NOWLN
3531   F92F 90 02              BCC ADDA1
3532   F931 E6 E0              INC NOWLN+1
3533   F933 60          ADDA1  RTS
3534   F934             
3535   F934 A5 DF       SAVNOW LDA NOWLN       ;SAVE CURRENT LINE INTO ADDR
3536   F936 8D 1C A4           STA ADDR
3537   F939 A5 E0              LDA NOWLN+1
3538   F93B 8D 1D A4           STA ADDR+1
3539   F93E 60          REP2   RTS
3540   F93F             
3541   F93F             ;MOVE CURRENT TEXT AROUND TO HAVE
3542   F93F             ;SPACE TO PUT IN THE NEW BUFFER
3543   F93F A4 EA       REPLAC LDY LENGTH
3544   F941 C4 E9              CPY OLDLEN      ;COMPARE OLD AND NEW LENGTHS
3545   F943 D0 1A              BNE R2W         ;BRANCH IF DIFF
3546   F945 F0 07              BEQ R87         ;LENGTHS ARE EQUAL. JUST REPLACE
3547   F947 A9 0D       R8     LDA #CR
3548   F949 91 DF              STA (NOWLN),Y
3549   F94B 20 4A FA           JSR GOGO
3550   F94E             
3551   F94E             ;LENGTH = OLDLEN
3552   F94E 88          R87    DEY
3553   F94F C0 FF              CPY #$FF
3554   F951 F0 EB              BEQ REP2
3555   F953 B9 38 A4    R88    LDA DIBUFF,Y
3556   F956 91 DF              STA (NOWLN),Y
3557   F958 20 4A FA           JSR GOGO
3558   F95B 88                 DEY
3559   F95C 10 F5              BPL R88
3560   F95E 60                 RTS
3561   F95F B0 6E       R2W    BCS R100        ;LENGTH > OLDLEN
3562   F961             
3563   F961             ;LENGTH < OLDLEN
3564   F961 20 34 F9           JSR SAVNOW      ;PUT NOWLN INTO ADDR
3565   F964 20 10 F9           JSR ADDRS1      ;PUT IT IN S1 ALSO
3566   F967 A5 E9              LDA OLDLEN
3567   F969 38                 SEC
3568   F96A E5 EA              SBC LENGTH      ;GET DIFFERENCE IN LENGTHS
3569   F96C A4 EA              LDY LENGTH
3570   F96E D0 07              BNE RQP
3571   F970 AE 19 A4           LDX COUNT       ;C-COMM ?
3572   F973 D0 02              BNE RQP         ;YES, JUMP
3573   F975 69 00              ADC #0          ;INCLUDE <CR>
3574   F977 48          RQP    PHA
3575   F978 18                 CLC
3576   F979 6D 1A A4           ADC S1
3577   F97C 8D 1A A4           STA S1
3578   F97F 90 03              BCC R6
3579   F981 EE 1B A4           INC S1+1
3580   F984 A9 1A       R6     LDA #S1%256
3581   F986 20 58 EB           JSR LDAY
3582   F989 91 DF              STA (NOWLN),Y   ;...AND NOVE IT UP (DOWN IN ADDR)
3583   F98B 20 4A FA           JSR GOGO
3584   F98E AA                 TAX
3585   F98F AD 1A A4           LDA S1
3586   F992 C5 E1              CMP BOTLN       ;DONE ??
3587   F994 D0 07              BNE R5
3588   F996 AD 1B A4           LDA S1+1
3589   F999 C5 E2              CMP BOTLN+1
3590   F99B F0 0E              BEQ R7
3591   F99D 20 28 F9    R5     JSR AD1
3592   F9A0 EE 1A A4           INC S1
3593   F9A3 D0 03              BNE R55
3594   F9A5 EE 1B A4           INC S1+1
3595   F9A8 4C 84 F9    R55    JMP R6
3596   F9AB 20 D0 F8    R7     JSR RESNOW      ;RESTORE NOWLN
3597   F9AE 68                 PLA             ;RESTORE DIFFERENCE
3598   F9AF 8D 2A A4           STA CPIY        ;SAVE IT
3599   F9B2 A5 E1              LDA BOTLN
3600   F9B4 38                 SEC
3601   F9B5 ED 2A A4           SBC CPIY        ;AND SUBTRACT IT FROM BOTTOM
3602   F9B8 85 E1              STA BOTLN
3603   F9BA B0 02              BCS R9
3604   F9BC C6 E2              DEC BOTLN+1
3605   F9BE AD 19 A4    R9     LDA COUNT       ;C COMM OR K ,I COMM ?
3606   F9C1 D0 04              BNE R10
3607   F9C3 A4 EA              LDY LENGTH
3608   F9C5 D0 05              BNE R11
3609   F9C7 A4 EA       R10    LDY LENGTH
3610   F9C9 D0 83              BNE R87
3611   F9CB 60                 RTS
3612   F9CC 4C 47 F9    R11    JMP R8
3613   F9CF             
3614   F9CF             ;LENGTH > OLDLEN
3615   F9CF A5 EA       R100   LDA LENGTH      ;NEW LINE IS LONGER
3616   F9D1 38                 SEC
3617   F9D2 E5 E9              SBC OLDLEN
3618   F9D4 A4 E9              LDY OLDLEN
3619   F9D6 D0 02              BNE R101        ;ALREADY HAVE ROOM FOR CR
3620   F9D8 69 00              ADC #0          ;ADD ONE TO DIFFERENCE
3621   F9DA 48          R101   PHA
3622   F9DB 20 34 F9           JSR SAVNOW      ;NOWLN INTO S1
3623   F9DE 20 C5 F8           JSR SETBOT
3624   F9E1 A0 00              LDY #0
3625   F9E3 B1 DF       R102   LDA (NOWLN),Y
3626   F9E5 C9 00              CMP #0
3627   F9E7 F0 06              BEQ R108
3628   F9E9 20 28 F9           JSR AD1
3629   F9EC 4C E3 F9           JMP R102
3630   F9EF 68          R108   PLA
3631   F9F0 48                 PHA
3632   F9F1 18                 CLC
3633   F9F2 65 E1              ADC BOTLN       ;ADD DIFFERENCE TO END
3634   F9F4 85 E1              STA BOTLN       ;STORE NEW END
3635   F9F6 90 02              BCC R103
3636   F9F8 E6 E2              INC BOTLN+1
3637   F9FA 20 F9 F8    R103   JSR ATEND
3638   F9FD 90 0B              BCC R107
3639   F9FF A5 E7              LDA SAVE        ;RESTORE OLD BOTTOM
3640   FA01 85 E1              STA BOTLN
3641   FA03 A5 E8              LDA SAVE+1
3642   FA05 85 E2              STA BOTLN+1
3643   FA07 4C 5C FA           JMP ENDERR      ;RAN PAST BUFFER END
3644   FA0A 20 09 F9    R107   JSR NOWS1       ;SAVE CURRENT END
3645   FA0D 68                 PLA
3646   FA0E 18                 CLC
3647   FA0F 65 DF              ADC NOWLN
3648   FA11 85 DF              STA NOWLN
3649   FA13 90 02              BCC R104
3650   FA15 E6 E0              INC NOWLN+1
3651   FA17 A9 1A       R104   LDA #S1%256
3652   FA19 20 58 EB           JSR LDAY
3653   FA1C 91 DF              STA (NOWLN),Y
3654   FA1E 20 4A FA           JSR GOGO
3655   FA21 AD 1A A4           LDA S1
3656   FA24 CD 1C A4           CMP ADDR
3657   FA27 D0 08              BNE R105
3658   FA29 AD 1B A4           LDA S1+1
3659   FA2C CD 1D A4           CMP ADDR+1      ;BACK WHERE WE STARTED ??
3660   FA2F F0 13              BEQ R106        ;BRANCH IF DONE
3661   FA31 20 1D F9    R105   JSR SUB
3662   FA34 CE 1A A4           DEC S1
3663   FA37 AD 1A A4           LDA S1
3664   FA3A C9 FF              CMP #$FF
3665   FA3C D0 03              BNE R1051
3666   FA3E CE 1B A4           DEC S1+1
3667   FA41 4C 17 FA    R1051  JMP R104
3668   FA44 20 D0 F8    R106   JSR RESNOW
3669   FA47 4C BE F9           JMP R9
3670   FA4A             
3671   FA4A             ;SEE IF IT WROTE INTO MEMORY
3672   FA4A D1 DF       GOGO   CMP (NOWLN),Y
3673   FA4C F0 0D              BEQ GOGO1
3674   FA4E             ;MOVE ADDRESS
3675   FA4E A5 DF              LDA NOWLN
3676   FA50 8D 1C A4           STA ADDR
3677   FA53 A5 E0              LDA NOWLN+1
3678   FA55 8D 1D A4           STA ADDR+1
3679   FA58 4C 33 EB           JMP MEMERR
3680   FA5B 60          GOGO1  RTS             ;OK
3681   FA5C             
3682   FA5C 20 44 EB    ENDERR JSR CLR         ;CLEAR PNTR
3683   FA5F A0 72              LDY #EMSG2-M1   ;PRINT "END"
3684   FA61 20 AF E7           JSR KEP
3685   FA64 20 D8 F6           JSR DNNO        ;BACK UP TO LAST LINE
3686   FA67 20 42 E8           JSR TTYTST      ;IF TTY <CR>
3687   FA6A D0 03              BNE ENDE2
3688   FA6C 20 13 EA           JSR CRLOW
3689   FA6F 4C 78 FA    ENDE2  JMP ERR0
3690   FA72 20 FE E8    ERROR  JSR LL
3691   FA75 20 D4 E7           JSR QM
3692   FA78 20 44 EB    ERR0   JSR CLR
3693   FA7B A2 FF              LDX #$FF
3694   FA7D             COM    =ERR0
3695   FA7D 9A                 TXS
3696   FA7E 20 FE E8           JSR LL          ;I/O TO TERMINAL (KB,D/P OR TTY)
3697   FA81 D8                 CLD
3698   FA82 20 88 FA           JSR COMM
3699   FA85 4C 78 FA           JMP ERR0
3700   FA88             
3701   FA88             ;GET EDITOR COMMANDS & DECODE
3702   FA88 A2 00       COMM   LDX #0
3703   FA8A 20 BC FE           JSR PATCH8      ;READ A CHAR WITH "=< >"
3704   FA8D A2 0B       ENTRY  LDX #COMCN1
3705   FA8F DD AC FA    CD02   CMP COMTBL,X    ;COMPARE WITH ALLOWABLE COMMANDS
3706   FA92 F0 0C              BEQ CFND1       ;MATCH ,SO PROCESS COMMAND
3707   FA94 CA                 DEX
3708   FA95 10 F8              BPL CD02
3709   FA97 20 D4 E7           JSR QM          ;NOT IN LIST ,SO NOT LEGAL COMMAND
3710   FA9A 20 24 EA           JSR CRCK
3711   FA9D 4C 78 FA           JMP ERR0
3712   FAA0 20 17 FF    CFND1  JSR PATC15      ;<CR> & START DECODING COMMAND
3713   FAA3 BD B9 FA           LDA JTBL+1,X
3714   FAA6 8D 1B A4           STA S1+1
3715   FAA9 6C 1A A4           JMP (S1)
3716   FAAC             
3717   FAAC             COMCN1 =11
3718   FAAC             ;COMMAND TABLE
3719   FAAC 4B 20 52 49 COMTBL .DB "K RIUDLTBFQC"
3719   FAB0 55 44 4C 54 
3719   FAB4 42 46 51 43 
3720   FAB8 4C F7 27 F7 JTBL   .DW DLNE,PLNE,INPU,IN,DOWN,UP
3720   FABC CB F7 64 F7 
3720   FAC0 24 F7 F9 F6 
3721   FAC4 E1 F7 D2 F6        .DW LST,TP,BT,FCHAR,STOP,CHNG
3721   FAC8 21 F7 0C F8 
3721   FACC 70 F8 76 F8 
3722   FAD0             
3723   FAD0             ;READ FROM MEMORY FOR ASSEMBLER
3724   FAD0 98          MREAD  TYA
3725   FAD1 48                 PHA
3726   FAD2 A0 00              LDY #0
3727   FAD4 B1 DF              LDA (NOWLN),Y
3728   FAD6 8D 2A A4           STA CPIY
3729   FAD9 20 28 F9           JSR AD1
3730   FADC 68                 PLA
3731   FADD A8                 TAY
3732   FADE AD 2A A4           LDA CPIY
3733   FAE1 60                 RTS
3734   FAE2             
3735   FAE2             ;THIS PROGRAM CONVERS MNEMONIC INSTRUCTIONS INTO MACHINE
3736   FAE2             ;CODE AND STORES IT IN THE DESIGNATED MEMORY AREA
3737   FAE2             
3738   FAE2             ;ROM TABLE LOCATIONS:
3739   FAE2 00 02 00 08 TYPTR1 .DB 00,02,00,08,$F2,$FF,$80,01
3739   FAE6 F2 FF 80 01 
3740   FAEA C0 E2 C0 C0        .DB $C0,$E2,$C0,$C0,$FF,00,00
3740   FAEE FF 00 00 
3741   FAF1 08 00 10 80 TYPTR2 .DB 08,00,$10,$80,$40,$C0,00,$C0
3741   FAF5 40 C0 00 C0 
3742   FAF9 00 40 00 00        .DB $00,$40,00,00,$E4,$20,$80
3742   FAFD E4 20 80 
3743   FB00 00 FC 00 08 CORR   .DB 00,$FC,00,08,08,$F8,$FC,$F4
3743   FB04 08 F8 FC F4 
3744   FB08 0C 10 04 F4        .DB $0C,$10,04,$F4,00,$20,$10
3744   FB0C 00 20 10 
3745   FB0F 00 00 0F 01 SIZEM  .DB 00,00,$0F,01,01,01,$11,$11
3745   FB13 01 01 11 11 
3746   FB17 02 02 11 11        .DB 02,02,$11,$11,02,$12,00
3746   FB1B 02 12 00 
3747   FB1E             
3748   FB1E 00 08 10 18 STCODE .DB $00,$08,$10,$18,$20,$28,$30,$38
3748   FB22 20 28 30 38 
3749   FB26 40 48 50 58        .DB $40,$48,$50,$58,$60,$68,$70,$78
3749   FB2A 60 68 70 78 
3750   FB2E 80 88 90 98        .DB $80,$88,$90,$98,$AC,$A8,$B0,$B8
3750   FB32 AC A8 B0 B8 
3751   FB36 CC C8 D0 D8        .DB $CC,$C8,$D0,$D8,$EC,$E8,$F0,$F8
3751   FB3A EC E8 F0 F8 
3752   FB3E 0C 2C 4C 4C        .DB $0C,$2C,$4C,$4C,$8C,$AC,$CC,$EC
3752   FB42 8C AC CC EC 
3753   FB46 8A 9A AA BA        .DB $8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
3753   FB4A CA DA EA FA 
3754   FB4E 0E 2E 4E 6E        .DB $0E,$2E,$4E,$6E,$8E,$AE,$CE,$EE
3754   FB52 8E AE CE EE 
3755   FB56 0D 2D 4D 6D        .DB $0D,$2D,$4D,$6D,$8D,$AD,$CD,$ED
3755   FB5A 8D AD CD ED 
3756   FB5E 0D 0D 0C 0D TYPTB  .DB 13,13,12,13,14,13,12,13
3756   FB62 0E 0D 0C 0D 
3757   FB66 0D 0D 0C 0D        .DB 13,13,12,13,13,13,12,13
3757   FB6A 0D 0D 0C 0D 
3758   FB6E 0F 0D 0C 0D        .DB 15,13,12,13,9,13,12,13
3758   FB72 09 0D 0C 0D 
3759   FB76 08 0D 0C 0D        .DB 8,13,12,13,8,13,12,13
3759   FB7A 08 0D 0C 0D 
3760   FB7E 0F 06 0B 0B        .DB 15,6,11,11,4,10,8,8
3760   FB82 04 0A 08 08 
3761   FB86 0D 0D 0D 0D        .DB 13,13,13,13,13,15,13,15
3761   FB8A 0D 0F 0D 0F 
3762   FB8E 07 07 07 07        .DB 7,7,7,7,5,9,3,3
3762   FB92 05 09 03 03 
3763   FB96 01 01 01 01        .DB 1,1,1,1,2,1,1,1
3763   FB9A 02 01 01 01 
3764   FB9E             
3765   FB9E             ;PROGRAM STARTS HERE
3766   FB9E AD 25 A4    MNEENT LDA SAVPC       ;TRANSF PC TO ADDR
3767   FBA1 8D 1C A4           STA ADDR
3768   FBA4 AD 26 A4           LDA SAVPC+1
3769   FBA7 8D 1D A4           STA ADDR+1
3770   FBAA 20 24 EA    STARTM JSR CRCK        ;<CR> IF PRI PTR DIFF FROM 0
3771   FBAD A9 00              LDA #0
3772   FBAF 8D 37 A4           STA CODFLG
3773   FBB2 20 3E E8           JSR BLANK
3774   FBB5 20 DB E2           JSR WRITAZ      ;WRITE ADDRESS
3775   FBB8 20 3B E8           JSR BLANK2
3776   FBBB 20 3B E8           JSR BLANK2
3777   FBBE 4C 06 FE           JMP MNEM        ;JUMP TO INPUT MNEMONIC OPCODE
3778   FBC1 A9 00       MODEM  LDA #00         ;SET UP TO FORM MODE MATCH
3779   FBC3 8D 26 01           STA TMASK1
3780   FBC6 8D 27 01           STA TMASK2
3781   FBC9 20 3E E8           JSR BLANK
3782   FBCC AC 2E 01           LDY TYPE
3783   FBCF 38                 SEC
3784   FBD0 6E 26 01    PNTLUP ROR TMASK1      ;SHIFT POINTER TO INSTRUCTION TYPE
3785   FBD3 6E 27 01           ROR TMASK2
3786   FBD6 88                 DEY
3787   FBD7 D0 F7              BNE PNTLUP
3788   FBD9             
3789   FBD9             ;TEST FOR ONE BYTE INSTRUCTION
3790   FBD9 AC 2E 01           LDY TYPE
3791   FBDC C0 0D              CPY #$0D
3792   FBDE D0 05              BNE RDADDR
3793   FBE0 A2 00              LDX #00
3794   FBE2             
3795   FBE2             ;INPUT ADRESS FIELD
3796   FBE2 4C CB FC           JMP OPCOMP
3797   FBE5 A0 06       RDADDR LDY #06         ;CLEAR ADDRESS FIELD (NON HEX)
3798   FBE7 A9 51              LDA #'Q'
3799   FBE9 99 32 01    CLRLUP STA ADFLD-1,Y
3800   FBEC 88                 DEY
3801   FBED D0 FA              BNE CLRLUP      ;(LEAVES Y = 0 FOR NEXT PHASE)
3802   FBEF 20 5F E9           JSR RDRUP       ;WITH RUBOUT
3803   FBF2 C9 20              CMP #' '        ;IGNORE SPACE CHARACTERS
3804   FBF4 F0 EF              BEQ RDADDR
3805   FBF6 99 33 01    STORCH STA ADFLD,Y     ;STORE ADDRESS CHARACTER
3806   FBF9 C8                 INY
3807   FBFA C0 07              CPY #07
3808   FBFC B0 5C              BCS TRY56
3809   FBFE 20 5F E9           JSR RDRUP       ;READ REMAINDER OF ADDRESS CHARS
3810   FC01 C9 20              CMP #' '        ;THRU WHEN <SPACE> OR <CR>
3811   FC03 D0 05              BNE STOR1
3812   FC05 EE 37 A4           INC CODFLG      ;SET CODE FLG
3813   FC08 D0 04              BNE EVAL
3814   FC0A C9 0D       STOR1  CMP #CR         ;CHECK FOR <CR>
3815   FC0C D0 E8              BNE STORCH
3816   FC0E             
3817   FC0E             ;SEPARATE ADDRESS MODE FROM ADDRESS FIELD
3818   FC0E 8C 31 A4    EVAL   STY TEMPX       ;TEMPX NOW HAS NUMBER OF CHAR
3819   FC11 AD 33 01           LDA ADFLD       ;CHECK FIRST CHAR FOR # OR (
3820   FC14 C9 23              CMP #'#'
3821   FC16 F0 25              BEQ HATCJ
3822   FC18 C9 28              CMP #'('
3823   FC1A F0 5A              BEQ PAREN
3824   FC1C AD 31 A4           LDA TEMPX       ;CHECK FOR ACCUMULATOR MODE
3825   FC1F C9 01              CMP #01
3826   FC21 D0 05              BNE TRYZP
3827   FC23 A2 01       ACCUM  LDX #01
3828   FC25 4C CB FC           JMP OPCOMP
3829   FC28 C9 02       TRYZP  CMP #02         ;CHECK FOR ZERO PAGE MODE
3830   FC2A D0 14              BNE TRY34
3831   FC2C AD 2E 01           LDA TYPE        ;CHCK FOR BRNCH WITH RELATIVE ADDR`
3832   FC2F C9 0C              CMP #$0C
3833   FC31 D0 05              BNE ZPAGE
3834   FC33 A2 02              LDX #02
3835   FC35 4C CB FC           JMP OPCOMP
3836   FC38 A2 05       ZPAGE  LDX #05
3837   FC3A 4C CB FC           JMP OPCOMP
3838   FC3D 4C B6 FC    HATCJ  JMP HATCH
3839   FC40 A9 04       TRY34  LDA #04         ;CHECK FOR ABSOLUTE OR ZP,X ORZP,`
3840   FC42 CD 31 A4           CMP TEMPX
3841   FC45 90 15              BCC ABSIND
3842   FC47 A2 02              LDX #02
3843   FC49 20 F1 FD           JSR XORYZ       ;CC = X, CS = Y, NE = ABSOLUTE
3844   FC4C D0 58              BNE ABSOL
3845   FC4E 90 05              BCC ZPX
3846   FC50 A2 03       ZPY    LDX #03         ;CARRY SET SO ZP,Y MODE
3847   FC52 4C CB FC           JMP OPCOMP
3848   FC55 A2 04       ZPX    LDX #04         ;CARRY CLEAR SO ZP,X MODE
3849   FC57 4C CB FC           JMP OPCOMP
3850   FC5A B0 69       TRY56  BCS ERRORM
3851   FC5C 20 EF FD    ABSIND JSR XORY        ;CC=ABS,X   CS=ABS,Y  NE=ERROR
3852   FC5F D0 64              BNE ERRORM
3853   FC61 90 0F              BCC ABSX
3854   FC63 A9 09       ABSY   LDA #09
3855   FC65 CD 2E 01           CMP TYPE
3856   FC68 D0 04              BNE ABSY1
3857   FC6A A2 0E              LDX #$0E
3858   FC6C D0 5D              BNE OPCOMP
3859   FC6E A2 08       ABSY1  LDX #$08
3860   FC70 D0 59              BNE OPCOMP
3861   FC72 A2 09       ABSX   LDX #09         ;CARRY CLEAR SO ABS,X MODE
3862   FC74 D0 55              BNE OPCOMP
3863   FC76 AD 36 01    PAREN  LDA ADFLD+3     ;SEE IF (HH,X),(HH)Y OR (HHHH)
3864   FC79 C9 2C              CMP #','        ;(HHX) (HH),Y  ARE OK TOO
3865   FC7B F0 04              BEQ INDX        ;COMMA IN 4TH POSITION = (HH,X)
3866   FC7D C9 58              CMP #'X'        ;X IN 4TH POSITION = (HHX)
3867   FC7F D0 04              BNE TRYINY
3868   FC81 A2 0B       INDX   LDX #$0B
3869   FC83 D0 46              BNE OPCOMP
3870   FC85 C9 29       TRYINY CMP #')'        ;")" IN 4TH POS = (HH)Y OR (HH),Y
3871   FC87 D0 0B              BNE TRYJMP
3872   FC89 20 EF FD           JSR XORY        ;CHCK TO SEE IF Y INDEX REG DESIRE
3873   FC8C D0 37              BNE ERRORM
3874   FC8E 90 35              BCC ERRORM
3875   FC90 A2 0A              LDX #$0A
3876   FC92 D0 37              BNE OPCOMP
3877   FC94 AD 38 01    TRYJMP LDA ADFLD+5     ;CHECK FOR FINAL PAREN
3878   FC97 C9 29              CMP #')'
3879   FC99 D0 2A              BNE ERRORM
3880   FC9B AD 2E 01           LDA TYPE        ;CONFIRM CORRECT ADDRESS TYPE
3881   FC9E C9 0B              CMP #$0B
3882   FCA0 D0 23              BNE ERRORM
3883   FCA2 A2 0D              LDX #$0D        ;OK, FORM IS JMP (HHHH)
3884   FCA4 D0 25              BNE OPCOMP
3885   FCA6 AD 2E 01    ABSOL  LDA TYPE        ;CHECK FOR BRANCH TO ABSOLUTE LOC
3886   FCA9 C9 0C              CMP #$0C
3887   FCAB D0 05              BNE ABSOL1
3888   FCAD A2 02              LDX #02
3889   FCAF 4C CB FC           JMP OPCOMP
3890   FCB2 A2 0C       ABSOL1 LDX #$0C
3891   FCB4 D0 15              BNE OPCOMP
3892   FCB6             ;SELECT IMMEDIATE ADDRESSING TYPE
3893   FCB6 AD 2E 01    HATCH  LDA TYPE
3894   FCB9 C9 01              CMP #01
3895   FCBB F0 04              BEQ IMMED1
3896   FCBD A2 07              LDX #07
3897   FCBF D0 0A              BNE OPCOMP
3898   FCC1 A2 06       IMMED1 LDX #06
3899   FCC3 D0 06              BNE OPCOMP
3900   FCC5 20 94 E3    ERRORM JSR CKER00      ;OUTPUT ERROR MESSAGE
3901   FCC8 4C AA FB           JMP STARTM
3902   FCCB             
3903   FCCB             ;COMPUTE FINAL OP CODE FOR DEFINED ADDRESING MODE
3904   FCCB BD E2 FA    OPCOMP LDA TYPTR1,X    ;MATCH TYPE MASK WITH VALID MODE
3905   FCCE F0 05              BEQ OPCMP1      ;PATTERNS & SKIP 1ST WORD TEST IF
3906   FCD0 2D 26 01           AND TMASK1      ;ALREADY ZERO
3907   FCD3 D0 08              BNE VALID
3908   FCD5 BD F1 FA    OPCMP1 LDA TYPTR2,X    ;TEST 2ND PART
3909   FCD8 2D 27 01           AND TMASK2      ;INST DOES NOT HAVE SPECIFIED MODE
3910   FCDB F0 E8              BEQ ERRORM
3911   FCDD 18          VALID  CLC             ;FORM FINAL OP CODE
3912   FCDE BD 00 FB           LDA CORR,X
3913   FCE1 6D 34 A4           ADC OPCODE
3914   FCE4 8D 34 A4           STA OPCODE
3915   FCE7             
3916   FCE7             ;PROCESS ADRESSES TO FINAL FORMAT
3917   FCE7 BD 0F FB           LDA SIZEM,X     ;OBTAIN ADDRESS FORMAT FROM TABLE
3918   FCEA C9 00              CMP #00
3919   FCEC F0 50              BEQ ONEBYT
3920   FCEE C9 0F              CMP #$0F        ;NEED BRANCH COMPUTATION?
3921   FCF0 F0 1D              BEQ BRNCHC
3922   FCF2 8D 33 A4           STA TEMPA       ;SAVE START POINT & CHAR COUNT
3923   FCF5 29 0F              AND #$0F        ;SEPARATE CHARACTER COUNT
3924   FCF7 A8                 TAY             ;LOAD ADDR BYTES INTO Y (0,1,OR 2)
3925   FCF8 8D 2F A4           STA BYTESM      ;SAVE IN BYTES
3926   FCFB EE 2F A4           INC BYTESM      ;TO INSTR LENGTH (1,2,OR 3 BYTES)
3927   FCFE AD 33 A4           LDA TEMPA       ;SEPARATE STARTING POINT
3928   FD01 29 F0              AND #$F0
3929   FD03 4A                 LSR A
3930   FD04 4A                 LSR A
3931   FD05 4A                 LSR A
3932   FD06 4A                 LSR A
3933   FD07 AA                 TAX             ;AND PUT IT IN X
3934   FD08 20 12 FD           JSR CONVRT      ;CONVERT ASCII ADDRESS TO HEX
3935   FD0B B0 B8              BCS ERRORM      ;SKIP OUT IF ERROR IN INPUT
3936   FD0D 90 1D              BCC STASH
3937   FD0F 4C 86 FD    BRNCHC JMP BRCOMP
3938   FD12             
3939   FD12             ;############ SUBROUTINE ###############
3940   FD12             ;CONVERT FORMATTED ADDRESS INTO PROPER HEX ADDRESS
3941   FD12 BD 33 01    CONVRT LDA ADFLD,X     ;PICK UP 1ST ADDRES CHARACTER
3942   FD15 20 7D EA           JSR HEX         ;CONVERT TO MOST SIG HEX
3943   FD18 B0 11              BCS ERRFLG
3944   FD1A E8                 INX             ;GET NEXT ASCII CHARACTER
3945   FD1B BD 33 01           LDA ADFLD,X
3946   FD1E E8                 INX             ;POINT TO NEXT CHARACTER, IF ANY
3947   FD1F 20 84 EA           JSR PACK
3948   FD22 B0 07              BCS ERRFLG
3949   FD24 99 34 A4           STA OPCODE,Y    ;SAVE IN MOST SIG. BYTE LOCATION
3950   FD27 88                 DEY             ;SET UP FOR NEXT ADDR BYTE, IF ANY
3951   FD28 D0 E8              BNE CONVRT      ;IF NECESSARY, FORM NEXT ADDR BYTE
3952   FD2A 18                 CLC
3953   FD2B 60          ERRFLG RTS             ;NON HEX CLEARED CARRY
3954   FD2C             ;#############
3955   FD2C             
3956   FD2C AC 2F A4    STASH  LDY BYTESM      ;SET UP TO STORE COMMAND
3957   FD2F 88                 DEY
3958   FD30 B9 34 A4    STSHLP LDA OPCODE,Y
3959   FD33 20 78 EB           JSR SADDR       ;STORE ONE BYTE OF COMMAND
3960   FD36 C0 00              CPY #00
3961   FD38 F0 0B              BEQ FORMDS
3962   FD3A 88                 DEY
3963   FD3B B8                 CLV
3964   FD3C 50 F2              BVC STSHLP      ;REPEAT TILL THRU
3965   FD3E             
3966   FD3E A9 01       ONEBYT LDA #01         ;SET BYTES = 1
3967   FD40 8D 2F A4           STA BYTESM
3968   FD43 D0 E7              BNE STASH
3969   FD45             
3970   FD45             ;FORMAT FOR SYSTEM 65 DISPLAY (REFORMAT FOR AIM)
3971   FD45 20 44 EB    FORMDS JSR CLR
3972   FD48 20 DD E5           JSR CGPC1       ;ADDR TO SAVPC FOR  DISASSEMBLY
3973   FD4B 20 42 E8           JSR TTYTST      ;IF TTY DO NOT GO TO DISASS
3974   FD4E D0 08              BNE FORMD1
3975   FD50 20 3B E8           JSR BLANK2      ;IT IS TTY
3976   FD53 20 3B E8           JSR BLANK2
3977   FD56 D0 11              BNE FORMD2      ;OUTPUT OPCODE
3978   FD58 20 6C F4    FORMD1 JSR DISASM
3979   FD5B 20 24 EA           JSR CRCK        ;<CR> IF PRI PTR DIFF FROM 0
3980   FD5E AD 37 A4           LDA CODFLG      ;SEE IF HE WANTS CODE ALSO
3981   FD61 F0 1A              BEQ FORM1
3982   FD63 20 3E E8           JSR BLANK
3983   FD66 20 3C F5           JSR PRPC        ;PROG CNTR
3984   FD69             ;OUTPUT OPCODE
3985   FD69 AE 2F A4    FORMD2 LDX BYTESM
3986   FD6C A0 00              LDY #00
3987   FD6E A9 1C       DISPLY LDA #ADDR%256       ;DO LDA (ADDR),Y ,WHITOUT PAG 0
3988   FD70 20 58 EB           JSR LDAY
3989   FD73 20 46 EA           JSR NUMA
3990   FD76 20 3E E8           JSR BLANK
3991   FD79 C8                 INY
3992   FD7A CA                 DEX
3993   FD7B D0 F1              BNE DISPLY
3994   FD7D             
3995   FD7D             ;POINT TO NEXT INSTRUCTION LOCATION
3996   FD7D AC 2F A4    FORM1  LDY BYTESM      ;ADD BYTESM TO ADDR
3997   FD80 20 CD E2           JSR NXTADD
3998   FD83 4C 24 FF           JMP PATC16      ;UPDATE PC
3999   FD86             
4000   FD86             ;RELATIVE BRANCH ADDRESS COMPUTATION
4001   FD86 AD 31 A4    BRCOMP LDA TEMPX
4002   FD89 C9 02              CMP #02         ;IF REL BRANCH INPUT, USE IT
4003   FD8B D0 11              BNE COMPBR
4004   FD8D A2 00              LDX #00
4005   FD8F A0 01              LDY #01
4006   FD91 20 12 FD           JSR CONVRT
4007   FD94 B0 40              BCS ERRJMP
4008   FD96 A9 02              LDA #02
4009   FD98 8D 2F A4           STA BYTESM      ;SET PROPER BYTES
4010   FD9B 4C 2C FD           JMP STASH
4011   FD9E A2 00       COMPBR LDX #00
4012   FDA0 A0 02              LDY #02
4013   FDA2 20 12 FD           JSR CONVRT
4014   FDA5 B0 2F              BCS ERRJMP
4015   FDA7 AD 1D A4           LDA ADDR+1      ;ADD BRANCH OFFSET
4016   FDAA 8D 27 01           STA MOVAD+1
4017   FDAD AD 1C A4           LDA ADDR
4018   FDB0 18                 CLC
4019   FDB1 69 02              ADC #02
4020   FDB3 8D 26 01           STA MOVAD
4021   FDB6 90 03              BCC CMPBR1
4022   FDB8 EE 27 01           INC MOVAD+1
4023   FDBB 38          CMPBR1 SEC             ;COMPUTE BRANCH RELATIVE ADDRESS
4024   FDBC AD 35 A4           LDA OPCODE+1
4025   FDBF ED 26 01           SBC MOVAD
4026   FDC2 8D 35 A4           STA OPCODE+1
4027   FDC5 AD 36 A4           LDA OPCODE+2
4028   FDC8 ED 27 01           SBC MOVAD+1
4029   FDCB 8D 36 A4           STA OPCODE+2
4030   FDCE C9 00              CMP #00
4031   FDD0 F0 0E              BEQ FORWRD
4032   FDD2 C9 FF              CMP #$FF
4033   FDD4 F0 03              BEQ BACKWD
4034   FDD6 4C C5 FC    ERRJMP JMP ERRORM
4035   FDD9 AD 35 A4    BACKWD LDA OPCODE+1    ;CHECK IN RANGE
4036   FDDC 30 09              BMI OK
4037   FDDE 10 F6              BPL ERRJMP
4038   FDE0 AD 35 A4    FORWRD LDA OPCODE+1
4039   FDE3 10 02              BPL OK
4040   FDE5 30 EF              BMI ERRJMP
4041   FDE7 A9 02       OK     LDA #02         ;SET UP FOR STASH
4042   FDE9 8D 2F A4           STA BYTESM
4043   FDEC 4C 2C FD           JMP STASH
4044   FDEF             
4045   FDEF             ;###### SUBROUTINE ########
4046   FDEF             ;SUBROUTINE FOR DETERMINING X OR Y OR NEITHER
4047   FDEF A2 04       XORY   LDX #04
4048   FDF1 BD 33 01    XORYZ  LDA ADFLD,X
4049   FDF4 C9 2C              CMP #','
4050   FDF6 D0 04              BNE XORY1
4051   FDF8 E8                 INX
4052   FDF9 BD 33 01           LDA ADFLD,X
4053   FDFC C9 58       XORY1  CMP #'X'
4054   FDFE F0 03              BEQ ISX
4055   FE00 C9 59              CMP #'Y'
4056   FE02             XORYRT
4057   FE02 60                 RTS             ;NOT ZERO IS NOT X OR NOT Y
4058   FE03 18          ISX    CLC             ;CARRY SET IS Y
4059   FE04 90 FC              BCC XORYRT      ; CARRY CLEAR IS X
4060   FE06             ;####### END OF SUB ########
4061   FE06             
4062   FE06             ; INPUT FOR MNEMONIC CODE
4063   FE06 A0 00       MNEM   LDY #00
4064   FE08 8C 34 A4           STY OPCODE
4065   FE0B 8C 35 A4           STY OPCODE+1
4066   FE0E 8C 36 A4           STY OPCODE+2    ;CLEARS OPCODE FOR NEW INPUT
4067   FE11 8C 26 01           STY MOVAD       ;CLEARS UNUSED BIT IN FINAL FORMAT
4068   FE14 20 5F E9    RDLUP  JSR RDRUP
4069   FE17 C9 2A              CMP #'*'        ;COMMAND TO LOAD POINTER
4070   FE19 F0 58              BEQ STLOAD      ;GO TO SET CURRENT ADDRESS POINTER
4071   FE1B C9 20              CMP #' '        ;IGNORE SPACE BAR INPUT
4072   FE1D F0 F5              BEQ RDLUP
4073   FE1F 29 1F              AND #$1F        ;MASK OFF UPPER 3 BITS
4074   FE21 99 30 01           STA CH,Y
4075   FE24 98                 TYA
4076   FE25 AA                 TAX             ;Y----> X
4077   FE26 FE 30 01           INC CH,X        ;FORMAT TO MATCH DISASSEMBLER TBL
4078   FE29 C8                 INY
4079   FE2A C0 03              CPY #03         ;REPEAT FOR EACH OF 3 CHARACTERS
4080   FE2C D0 E6              BNE RDLUP
4081   FE2E             
4082   FE2E             ;COMPRESS 3 FORMATED CHARACTERS TO MOVAD & MOVAD+1
4083   FE2E A0 03              LDY #03         ;SET UP OUTER LOOP
4084   FE30 B9 2F 01    OUTLUP LDA CH-1,Y      ;COMPRESS 3 CHARACTERS
4085   FE33 A2 05              LDX #05         ;SET UP INNER LOOP
4086   FE35 4A          INLUP  LSR A           ;SHIFT 5 BITS ACC TO MOVAD,MOVAD+1
4087   FE36 6E 26 01           ROR MOVAD
4088   FE39 6E 27 01           ROR MOVAD+1
4089   FE3C CA                 DEX
4090   FE3D D0 F6              BNE INLUP
4091   FE3F 88                 DEY
4092   FE40 D0 EE              BNE OUTLUP
4093   FE42             
4094   FE42             ;SEARCH FOR MATCHING COMPRESSED CODE
4095   FE42 A2 40              LDX #$40
4096   FE44 AD 26 01    SRCHLP LDA MOVAD
4097   FE47 DD B8 F5    SRCHM  CMP MNEML-1,X   ;MATCH LEFT HALF
4098   FE4A F0 05              BEQ MATCH
4099   FE4C CA                 DEX
4100   FE4D D0 F8              BNE SRCHM       ;IF NO - TRY AGAIN
4101   FE4F F0 0B              BEQ MATCH1
4102   FE51 AD 27 01    MATCH  LDA MOVAD+1     ;ALSO MATCH RIGHT HALF
4103   FE54 DD F8 F5           CMP MNEMR-1,X
4104   FE57 F0 06              BEQ GOTIT
4105   FE59 CA                 DEX
4106   FE5A D0 E8              BNE SRCHLP
4107   FE5C 4C C5 FC    MATCH1 JMP ERRORM
4108   FE5F             
4109   FE5F             ;GET INSTRUCTION TYPE FROM TYPE TABLE
4110   FE5F BD 5D FB    GOTIT  LDA TYPTB-1,X
4111   FE62 8D 2E 01           STA TYPE
4112   FE65             
4113   FE65             ;GET OPCODE FROM OP CODE UE
4114   FE65 BD 1D FB           LDA STCODE-1,X
4115   FE68 8D 34 A4           STA OPCODE
4116   FE6B 4C C1 FB           JMP MODEM
4117   FE6E             
4118   FE6E             ;THIS SECTION SETS THE CURRENT ADDRESS POINTER
4119   FE6E A9 2A       STLO   LDA #'*'
4120   FE70 20 7A E9           JSR OUTPUT
4121   FE73 20 AE EA    STLOAD JSR ADDIN       ;GET ADDR
4122   FE76 B0 F6              BCS STLO        ;IN CASE OF ERROR
4123   FE78 4C 24 FF           JMP PATC16      ;ADDR TO PC THEN TO STARTM
4124   FE7B             
4125   FE7B             ;PATCHES TO CORRECT PROBLEMS WITHOUT
4126   FE7B             ;CHANGING ENTRY POINTS TO THE ROUTINES
4127   FE7B 41                 .DB "A"
4128   FE7C 38          PATCH1 SEC             ;ADJUST BAUD
4129   FE7D E9 2C              SBC #44
4130   FE7F 8D 18 A4           STA CNTL30
4131   FE82 60                 RTS
4132   FE83             
4133   FE83 8A          CUREAD TXA             ;SAVE X  , OUTPUT CUR
4134   FE84 48                 PHA
4135   FE85 AE 15 A4           LDX CURPO2
4136   FE88 E0 14              CPX #20         ;ONLY IF < 20
4137   FE8A B0 05              BCS PAT2A
4138   FE8C A9 DE              LDA #$DE
4139   FE8E 20 7B EF           JSR OUTDD1
4140   FE91 68          PAT2A  PLA
4141   FE92 AA                 TAX
4142   FE93 4C 3C E9           JMP READ        ;CONTINUE
4143   FE96             
4144   FE96 20 3C E9    RED1   JSR READ        ;READ & ECHO WITHOUT CURSOR
4145   FE99 4C 76 E9           JMP RED2
4146   FE9C             
4147   FE9C AE 15 A4    PATCH4 LDX CURPO2      ;DONT DO ANYTHING IF "8D"
4148   FE9F C9 8D              CMP #CR+$80     ;SO <CR> FOR TV & NOT FOR DISP
4149   FEA1 D0 0B              BNE PAT4A
4150   FEA3 A9 A0              LDA #' '+$80    ;CLR CURSOR
4151   FEA5 20 7B EF           JSR OUTDD1
4152   FEA8 20 44 EB           JSR CLR         ;CLR PNTRS
4153   FEAB 4C 76 EF           JMP OUTD7       ;EXIT
4154   FEAE 4C 17 EF    PAT4A  JMP OUTD1A      ;CONTINUE
4155   FEB1             
4156   FEB1 8D 11 A4    PATCH5 STA PRIFLG      ;TURN PRI OFF
4157   FEB4 4C 90 F0           JMP IPO3
4158   FEB7             
4159   FEB7 A9 1C       PATCH6 LDA #ADDR%256       ;SIMULATE LDA (ADDR),Y
4160   FEB9 4C 58 EB           JMP LDAY
4161   FEBC             
4162   FEBC 20 3C E9    PATCH8 JSR READ        ;READ & ECHO WITH CARROTS
4163   FEBF 48                 PHA
4164   FEC0 20 D8 E7           JSR EQUAL
4165   FEC3 A9 3C              LDA #'<'
4166   FEC5 20 7A E9           JSR OUTPUT
4167   FEC8 68                 PLA
4168   FEC9 48                 PHA
4169   FECA C9 0D              CMP #CR
4170   FECC F0 03              BEQ PATC8C
4171   FECE 20 7A E9           JSR OUTPUT
4172   FED1 A9 3E       PATC8C LDA #'>'
4173   FED3 20 7A E9           JSR OUTPUT
4174   FED6 68                 PLA
4175   FED7 60                 RTS
4176   FED8             
4177   FED8 C9 F7       PATCH9 CMP #$F7        ;CHCK LOWER TRANSITION OF TIMER
4178   FEDA B0 06              BCS PAT9A
4179   FEDC CD 08 A4           CMP TSPEED
4180   FEDF 4C 9D EE           JMP CKF3A
4181   FEE2 CD 08 A4    PAT9A  CMP TSPEED
4182   FEE5 68                 PLA
4183   FEE6 C9 FF              CMP #$FF
4184   FEE8 60          PAT9B  RTS
4185   FEE9             
4186   FEE9 20 F0 E9    PATC10 JSR CRLF        ;CLR DISP (ONLY 1 <CR>)
4187   FEEC 4C 85 E1           JMP STA1
4188   FEEF             
4189   FEEF F0 F7       PATC11 BEQ PAT9B       ;GO OUTPUT PROMPT
4190   FEF1 C9 4C              CMP #'L'        ;NO PROMPT FOR "T" OR "L"
4191   FEF3 F0 F3              BEQ PAT9B
4192   FEF5 4C C5 E7           JMP PROMP1
4193   FEF8             
4194   FEF8 48          PATC12 PHA             ;CLEAR PRIFLG SO WE CAN OUTPUT
4195   FEF9 AD 11 A4           LDA PRIFLG      ;TO PRINTER IF FLG WAS ON (MSB)
4196   FEFC 29 F0              AND #$F0
4197   FEFE 8D 11 A4           STA PRIFLG
4198   FF01 68                 PLA
4199   FF02 60                 RTS
4200   FF03             
4201   FF03 AD 12 A4    PATC13 LDA INFLG       ;TURN TAPES ON ONLY IF TAPES
4202   FF06 C9 54              CMP #'T'
4203   FF08 D0 DE              BNE PAT9B
4204   FF0A 4C 29 E5           JMP DU14        ;TURN ON TAPES & SET DEF DEV
4205   FF0D             
4206   FF0D AD 13 A4    PATC14 LDA OUTFLG      ;TURN ON TAPES ONLY IF TAPES
4207   FF10 C9 54              CMP #'T'
4208   FF12 D0 D4              BNE PAT9B
4209   FF14 4C 0A E5           JMP DU11
4210   FF17             
4211   FF17 20 F0 E9    PATC15 JSR CRLF        ;DECODE COMMAND
4212   FF1A 8A                 TXA             ;SAVE INDEX
4213   FF1B 0A                 ASL A
4214   FF1C AA                 TAX
4215   FF1D BD B8 FA           LDA JTBL,X      ;PART OF ENTRY
4216   FF20 8D 1A A4           STA S1
4217   FF23 60                 RTS
4218   FF24             
4219   FF24 20 DD E5    PATC16 JSR CGPC1       ;ADDR TO PC
4220   FF27 4C AA FB           JMP STARTM      ;BACK TO MNEMONIC START
4221   FF2A             
4222   FF2A F0 0E       PATC17 BEQ PAT17B      ;RUB, SO READ ANOTHER
4223   FF2C C9 00              CMP #0
4224   FF2E F0 03              BEQ PAT17A
4225   FF30 4C 85 F7           JMP IN02A       ;NEITHER ,CONTINUE
4226   FF33 20 93 E9    PAT17A JSR INALL       ;SKIP ON ZEROS
4227   FF36 C9 7F              CMP #$7F        ;UNTILL RUB
4228   FF38 D0 F9              BNE PAT17A
4229   FF3A 4C 7A F7    PAT17B JMP IN02        ;GO BACK
4230   FF3D             
4231   FF3D 20 F8 FE    PATC18 JSR PATC12      ;RESET PRIFLG
4232   FF40 48                 PHA
4233   FF41 20 42 E8           JSR TTYTST      ;IF TTY JUST RTN
4234   FF44 D0 02              BNE PAT18A
4235   FF46 68                 PLA
4236   FF47 60                 RTS
4237   FF48 20 FE E8    PAT18A JSR LL          ;SET TO LOW SPEED
4238   FF4B 20 45 F0           JSR IPST        ;PRINT WHAT IS IN BUFFER
4239   FF4E 20 44 EB           JSR CLR         ;CLR PRINTER BUFFER BY OUTPUTTING
4240   FF51 20 3E E8           JSR BLANK       ;AN SPACE
4241   FF54 20 44 EB           JSR CLR
4242   FF57 68                 PLA             ;RTN ACC
4243   FF58 60                 RTS
4244   FF59             
4245   FF59 D8          PAT19  CLD
4246   FF5A 20 24 EA           JSR CRCK
4247   FF5D 4C 85 E1           JMP STA1
4248   FF60             
4249   FF60 F0 0D       PAT20  BEQ VECK4       ;END (DATA BYTES=0)
4250   FF62 18                 CLC
4251   FF63 69 04              ADC #4
4252   FF65 AA                 TAX
4253   FF66 20 93 E9    VECK5  JSR INALL       ;SKIP OVER DATA
4254   FF69 CA                 DEX
4255   FF6A D0 FA              BNE VECK5
4256   FF6C 4C 9E E6           JMP VECK1       ;PROCESS NEXT RCD
4257   FF6F 4C 20 E5    VECK4  JMP DU13
4258   FF72             
4259   FF72 A0 00       PAT21  LDY #0
4260   FF74 B9 88 FF    PAT21A LDA POMSG,Y     ;RESET MSG
4261   FF77 F0 06              BEQ PAT21B
4262   FF79 20 7A E9           JSR OUTPUT
4263   FF7C C8                 INY
4264   FF7D D0 F5              BNE PAT21A
4265   FF7F 20 F0 E9    PAT21B JSR CRLF
4266   FF82 20 F0 E9           JSR CRLF
4267   FF85 4C 82 E1           JMP START
4268   FF88             
4269   FF88 20 20 52 4F POMSG  .DB "  ROCKWELL AIM 65"
4269   FF8C 43 4B 57 45 
4269   FF90 4C 4C 20 41 
4269   FF94 49 4D 20 36 
4269   FF98 35 
4270   FF99 00                 .DB 0
4271   FF9A             
4272   FF9A EE 68 01    PAT22  INC BLKO
4273   FF9D 4C BD ED           JMP ADDBK1
4274   FFA0             
4275   FFA0 A9 FF       PAT23  LDA #$FF        ;START TIMER
4276   FFA2 8D F7 A4           STA DI1024
4277   FFA5 AD E5 A4    PAT23A LDA RINT        ;TIME OUT?
4278   FFA8 30 08              BMI PAT23B      ;YES
4279   FFAA AD CD A4           LDA IFR         ;START SIGNAL?
4280   FFAD 29 10              AND #MPRST
4281   FFAF F0 F4              BEQ PAT23A      ;NO
4282   FFB1 60                 RTS             ;YES
4283   FFB2 A9 00       PAT23B LDA #0          ;TIME OUT RETURN
4284   FFB4 60                 RTS
4285   FFB5             
4286   FFB5 20 75 EE    PATC24 JSR CKFREQ      ;READ BIT FROM FOURTH HALF PULSE
4287   FFB8 6A                 ROR A
4288   FFB9 29 80              AND #$80
4289   FFBB 60                 RTS
4290   FFBC             
4291   FFBC 2C CD A4    PATC25 BIT IFR         ;WAIT TILL TIMES OUT
4292   FFBF 50 FB              BVC PATC25
4293   FFC1 AD C4 A4           LDA T1L         ;CLR INTERRUPT FLG
4294   FFC4 60                 RTS
4295   FFC5             
4296   FFF9                    *=$FFF9
4297   FFF9             ;INTERRUPT VECTORS
4298   FFF9 FA                 .DB $FA
4299   FFFA 75 E0 BF E0        .DW NMIV1,RSET,IRQV1    ;SET UP VECTORS
4299   FFFE 78 E0 
4300   10000             ;.END A0/1
4301   10000             SEMICOLON =$3B
4302   10000             BACKSLASH =$5C
4303   10000                    .END M1
tasm: Number of errors = 0
