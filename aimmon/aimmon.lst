0001   0000             ;TELEMARK CROSS ASSEMBLER (TASM)  http://www.halcyon.com/squakvly/
0002   0000             ; wine ../tasm/TASM.EXE -65 -s -g0  aimmon.asm aimmon.hex 
0003   0000             ; sort -k2 < aimmon.sym >aimmon-sort.sym
0004   0000             ; srec_cat  aimmon.hex -Intel -offset -0xe000 -o aimmon.bin -Binary 
0005   0000             ; cat aimmon.bin > /dev/ttyS0
0006   0000             ;***************************************************
0007   0000             ;***************************************************
0008   0000             ;**                                               **
0009   0000             ;**                               PL-PA00-JOO1A   **
0010   0000             ;**                                               **
0011   0000             ;**     ROCKWELL R6500 MICROCOMPUTER SYSTEM       **
0012   0000             ;**                                               **
0013   0000             ;**               AIM 65 MONITOR                  **
0014   0000             ;**                                               **
0015   0000             ;**              PROGRAM LISTING                  **
0016   0000             ;**                                               **
0017   0000             ;**   REVISION A                   AUG 22, 1978   **
0018   0000             ;**   djrm MECB                                   **
0019   0000             ;***************************************************
0020   0000             ;***************************************************
0021   0000             ;       *=$1ffe
0022   0000             ;       .db $00, $20
0023   0000             
0024   0000             MECBIO          = $A400
0025   0000             MECB_USER       = MECBIO + $B0 ; 6522 $A000
0026   0000             MECB_RAM        = MECBIO + $00 ; 6532 $A400
0027   0000             MECB_KEYBOARD   = MECBIO + $E0 ; 6532 $A480
0028   0000             MECB_VIA        = MECBIO + $C0 ; 6522 $A800
0029   0000             MECB_DISPLAY    = MECBIO + $D0 ; 6520 $AC00
0030   0000             MECB_ACIA       = MECBIO + $D8 ; 6551 used in mecb_bios
0031   0000             MECB_SPARE      = MECBIO + $A0 ;  not used
0032   0000             
0033   0000             ;ROCKWELL INTERNATIONAL
0034   0000             ;MICROELECTRONIC DEVICES
0035   0000             ;3310 MIRALOMA AVENUE
0036   0000             ;P. O. BOX 3669
0037   0000             ;ANAHEIM CA U.S.A. 92803
0038   0000             
0039   0000             ;     **************************************
0040   0000             ;     *  USER 6522 ADDRESSES (A000-A00F)   *
0041   0000             ;     **************************************
0042   A4B0                    *=MECB_USER
0043   A4B0             UDRB   .BLOCK 1        ;DATA REG B
0044   A4B1             UDRAH  .BLOCK 1        ;DATA REG A
0045   A4B2             UDDRB  .BLOCK 1        ;DATA DIR REG B
0046   A4B3             UDDRA  .BLOCK 1        ;DATA DIR REG A
0047   A4B4             UT1L   .BLOCK 1        ;TIMER 1 COUNTER LOW
0048   A4B5             UT1CH  .BLOCK 1        ;TIMER 1 COUNTER HIGH
0049   A4B6             UT1LL  .BLOCK 1        ;TIMER 1 LATCH LOW
0050   A4B7             UT1LH  .BLOCK 1        ;TIMER 1 LATCH HIGH
0051   A4B8             UT2L   .BLOCK 1        ;TIMER 2 LATCH & COUNTER LOW
0052   A4B9             UT2H   .BLOCK 1        ;TIMER 2 COUNTER HIGH
0053   A4BA             USR    .BLOCK 1        ;SHIFT REGISTER
0054   A4BB             UACR   .BLOCK 1        ;AUX CONTROL REGISTER
0055   A4BC             UPCR   .BLOCK 1        ;PERIPHERAL CONTROL REGISTER
0056   A4BD             UIFR   .BLOCK 1        ;INTERRUPT FLAG REGISTER
0057   A4BE             UIER   .BLOCK 1        ;INTERRUPT ENABLE REGISTER
0058   A4BF             UDRA   .BLOCK 1        ;DATA REGISTER A
0059   A4C0             
0060   A4C0             ASSEM  =$D000          ;ASSEMBLER ENTRY
0061   A4C0             BASIEN =$B000          ;BASIC ENTRY (COLD)
0062   A4C0             BASIRE =$B003          ;BASIC ENTRY (WARM)
0063   A4C0             
0064   A4C0             ;      MONITOR RAM
0065   A4C0             ;TEXT EDITOR EQUATES (PAG 0)
0066   A4C0             ;OVERLAPS TABUF2+50 (TAPE OUTPUT BUFFER $AD-$FF)
0067   00DF                    *=$00DF
0068   00DF             NOWLN  .BLOCK 2        ;CURRENT LINE
0069   00E1             BOTLN  .BLOCK 2        ;LAST ACTIVE , SO FAR
0070   00E3             TEXT   .BLOCK 2        ;LIMITS OF BUFFER (START)
0071   00E5             END    .BLOCK 2        ;LIMITS OF BUFFER (END)
0072   00E7             SAVE   .BLOCK 2        ;USED BY REPLACE
0073   00E9             OLDLEN .BLOCK 1        ;ORIG LENGTH
0074   00EA             LENGTH .BLOCK 1        ;NEW LENGTH
0075   00EB             STRING .BLOCK 20       ;FIND STRING
0076   00FF             
0077   0100                    *=$0100
0078   0100             ;BREAKPOINTS AND USER I/O HANDLERS
0079   0100             BKS    .BLOCK 8        ;BRK LOCATIONS
0080   0108             UIN    .BLOCK 2        ;USER INPUT HANDLER (VECTOR)
0081   010A             UOUT   .BLOCK 2        ;USER OUTPUT HANDLER (VECTOR)
0082   010C             
0083   010C             ;UNUSED KEYS TO GO TO USER ROUTINE
0084   010C             KEYF1  .BLOCK 3        ;USER PUTS A JMP INSTRUCTION TO...
0085   010F             KEYF2  .BLOCK 3        ;GO TO HIS ROUTINE ON EITHER KEY..
0086   0112             KEYF3  .BLOCK 3        ;ENTRY
0087   0115             
0088   0115             ;EQUATES FOR DISASSEMBLER (PAG 1)
0089   0116                    *=$0116         ;SAME AS TAPE BUFFER I/O (TABUFF)
0090   0116             FORMA  .BLOCK 1
0091   0117             LMNEM  .BLOCK 1
0092   0118             RMNEM  .BLOCK 14
0093   0126             
0094   0126             ;EQUATES FOR MNEMONIC ENTRY
0095   0126             MOVAD  .BLOCK 8
0096   012E             TYPE   .BLOCK 2
0097   0130             TMASK1 =MOVAD
0098   0130             TMASK2 =MOVAD+1
0099   0130             CH     .BLOCK 3
0100   0133             ADFLD  .BLOCK 20
0101   0147             ;HISTM  =$A42E          ;SHARE WITH NAME & HIST
0102   0147             ;BYTESM =HISTM+1
0103   0147             ;TEMPX  =HISTM+3
0104   0147             ;TEMPA  =HISTM+5
0105   0147             ;OPCODE =HISTM+6
0106   0147             ;CODFLG =HISTM+9
0107   0147             
0108   0147             ;      **********************************
0109   0147             ;      *  6532 ADDRESSES (A400-A7FF)    *
0110   0147             ;      **********************************
0111   A400                    *=MECB_RAM ; 6532 RAM 00-7F
0112   A400             MONRAM *=*
0113   A400             ;JUMP VECTORS
0114   A400             IRQV4  .BLOCK 2        ;IRQ AFTER MONITOR (NO BRK)
0115   A402             NMIV2  .BLOCK 2        ;NMI
0116   A404             IRQV2  .BLOCK 2        ;IRQ
0117   A406             
0118   A406             ;I/O DEVICES
0119   A406             DILINK .BLOCK 2        ;DISPL LINKAGE (TO ECHO TO DISP)
0120   A408             TSPEED .BLOCK 1        ;TAPE SPEED (C7,5B,5A)
0121   A409             GAP    .BLOCK 1        ;TIMING GAP BETWEEN BLOCKS
0122   A40A             ;END OF USER ALTERABLE LOCATIONS
0123   A40A             NPUL   .BLOCK 1        ;# OF HALF PULSES...
0124   A40B             TIMG   .BLOCK 3        ;FOR TAPE
0125   A40E             REGF   .BLOCK 1        ;REGS FLG FOR SINGLE STEP MODE
0126   A40F             DISFLG .BLOCK 1        ;DISASSEM FLG FOR SINGLE STEP MODE
0127   A410             BKFLG  .BLOCK 1        ;ENABLE OR DIS BREAKPOINTS
0128   A411             PRIFLG .BLOCK 1        ;ENABLE OR DIS PRINTER
0129   A412             INFLG  .BLOCK 1        ;INPUT DEVICE
0130   A413             OUTFLG .BLOCK 1        ;OUTPUT DEVICE
0131   A414             HISTP  .BLOCK 1        ;HISTORY PTR (SINGLE STEP) (Y)
0132   A415             CURPO2 .BLOCK 1        ;DISPLAY POINTER
0133   A416             CURPOS .BLOCK 1        ;PRINTER POINTER
0134   A417             CNTH30 .BLOCK 1        ;BAUD RATE &...
0135   A418             CNTL30 .BLOCK 1        ;DELAY FOR TTY
0136   A419             COUNT  .BLOCK 1        ;# OF LINES (0-99)
0137   A41A             S1     .BLOCK 2        ;START ADDRESS
0138   A41C             ADDR   .BLOCK 2        ;END ADDRESS
0139   A41E             CKSUM  .BLOCK 2        ;CHECKSUM
0140   A420             S2     =BKS+6          ;VERTICAL COUNT (ONLY ON DUMP)
0141   A420             
0142   A420             ;MONITOR REGISTERS
0143   A420             SAVPS  .BLOCK 1        ;STATUS
0144   A421             SAVA   .BLOCK 1        ;ACCUM
0145   A422             SAVX   .BLOCK 1        ;X REG
0146   A423             SAVY   .BLOCK 1        ;Y REG
0147   A424             SAVS   .BLOCK 1        ;STACK POINTER
0148   A425             SAVPC  .BLOCK 2        ;PROGR COUNTER
0149   A427             
0150   A427             ;WORK AREAS FOR PAGE ZERO SIMULATION
0151   A427             ;SIMULATE LDA (NNNN),Y ,WHERE NNNN IS ABSOLUTE
0152   A427             STIY   .BLOCK 3        ;STA NM,Y
0153   A42A             CPIY   .BLOCK 3        ;CMP NM,Y   OR  LDA NM,Y
0154   A42D                    .BLOCK 1        ;RTS
0155   A42E             LDIY   =CPIY           ;LDA NM,Y
0156   A42E             
0157   A42E             ;VARIABLES FOR TAPE
0158   A42E             NAME   .BLOCK 6        ;FILE NAME
0159   A434             TAPIN  .BLOCK 1        ;IN  FLG (TAPE 1 OR 2)
0160   A435             TAPOUT .BLOCK 1        ;OUT FLG (TAPE 1 OR 2)
0161   A436             TAPTR  .BLOCK 1        ;TAPE BUFF POINTER
0162   A437             TAPTR2 .BLOCK 1        ;TAPE OUTPUT BUFF PTR
0163   A438             HIST   =NAME           ;FOUR LAST ADDR + NEXT (SINGL STEP)`
0164   A438             BLK    =$0115          ;BLOCK COUNT
0165   A438             TABUFF =$0116          ;TAPE BUFFER (I/O)
0166   A438             BLKO   =$0168          ;OUTPUT BLOCK COUNT
0167   A438             TABUF2 =$00AD          ;OUTPUT BUFF WHEN ASSEMB (PAG0)
0168   A438             DIBUFF .BLOCK 40       ;DISPLAY BUFFER
0169   A460             
0170   A460             
0171   A460             ;EQUATES FOR MNEMONIC ENTRY (moved)
0172   A460             HISTM  =$NAME          ;SHARE WITH NAME & HIST
0173   A460             BYTESM =HISTM+1
0174   A460             TEMPX  =HISTM+3
0175   A460             TEMPA  =HISTM+5
0176   A460             OPCODE =HISTM+6
0177   A460             CODFLG =HISTM+9
0178   A460             
0179   A460             
0180   A460             
0181   A460             ;VARIABLES USED IN PRINTING
0182   A460             IBUFM  .BLOCK 20       ;PRINTER BUFFER
0183   A474             IDIR   .BLOCK 1        ;DIRECTION == 0=>+ , FF=>-
0184   A475             ICOL   .BLOCK 1        ;COLUMN  LEFTMOST=0,RIGHTMOST=4
0185   A476             IOFFST .BLOCK 1        ;OFFSET  0=LEFT DGT,1=RIGHT DGT
0186   A477             IDOT   .BLOCK 1        ;# OF LAST DOT ENCOUNTERED
0187   A478             IOUTL  .BLOCK 1        ;LOWER 8 OUTPUTS(8 COLS ON RIGHT)
0188   A479             IOUTU  .BLOCK 1        ;UPPER 2 DIGITS
0189   A47A             IBITL  .BLOCK 1        ;1 BIT MSK FOR CURRENT OUTPUT
0190   A47B             IBITU  .BLOCK 1
0191   A47C             IMASK  .BLOCK 1        ;MSK FOR CURRENT ROW
0192   A47D             JUMP   .BLOCK 2        ;INDIR & ADDR OF TABL FOR CURR ROW
0193   A47F             
0194   A47F             ;VARIABLES FOR KEYBOARD
0195   A47F             ROLLFL .BLOCK 1        ;SAVE LAST STROBE FOR ROLLOVER
0196   A480             KMASK  =CPIY           ;TO MASK OFF CTRL OR SHIFT
0197   A480             STBKEY =CPIY+1         ;STROBE KEY (1-8 COLUMNS)
0198   A480             
0199   A480             ;               I/O ASSIGNMENT
0200   A4E0                    *=MECB_KEYBOARD    ; 6532 I/0
0201   A4E0             DRA2   .BLOCK 1        ;DATA REG A
0202   A4E1             DDRA2  .BLOCK 1        ;DATA DIR REG A
0203   A4E2             DRB2   .BLOCK 1        ;DATA REG B
0204   A4E3             DDRB2  .BLOCK 1        ;DATA DIR REG B
0205   A4E4             
0206   A4E4             ;  WRITE EDGE DETECT CONTROL (NOT USED BECAUSE KB)
0207   A4E4                    *=MECB_KEYBOARD+4
0208   A4E4             DNPA7  .BLOCK 1        ;DISABLE PA7 INT ,NEG EDGE DET
0209   A4E5             DPPA7  .BLOCK 1        ;DIS PA7 INT ,POS EDGE DETE
0210   A4E6             ENPA7  .BLOCK 1        ;ENA PA7 INT ,NEG EDG DET
0211   A4E7             EPPA7  .BLOCK 1        ;ENA PA7 INT ,POS EDG DET
0212   A4E8             
0213   A4E8             ;          READ AND CLEAR INTERRUPT
0214   A4E5                    *=MECB_KEYBOARD+5
0215   A4E5             RINT   .BLOCK 1        ;BIT 7=TIMER FLG , BIT 6=PA7 FLG
0216   A4E6             
0217   A4E6             ;             TIMER INTERRUPT
0218   A4F4                    *=MECB_KEYBOARD+$14
0219   A4F4             ;WRITE COUNT TO INTERVAL TIMER
0220   A4F4             ;INTERRUPT DISABLE FOR THESE ADDRS
0221   A4F4             DIV1   .BLOCK 1        ;DIV BY 1 (DISABLE);ADD 8 TO ENA
0222   A4F5             DIV8   .BLOCK 1        ;DIV BY 8 (DIS) ; ADD 8 TO ENA
0223   A4F6             DIV64  .BLOCK 1        ;DIV BY 64 (DIS) ; ADD 8 TO ENA
0224   A4F7             DI1024 .BLOCK 1        ;DIV BY 1024 (DIS) ; ADD 8 TO ENA
0225   A4F8             
0226   A4F8             ;     *********************************************
0227   A4F8             ;     *    6522 ADDRESSES (MONIT) (A800-ABFF)     *
0228   A4F8             ;     *********************************************
0229   A4C0                    *=MECB_VIA
0230   A4C0             DRB    .BLOCK 1        ;DATA REG B
0231   A4C1             DRAH   .BLOCK 1        ;DATA REG A
0232   A4C2             DDRB   .BLOCK 1        ;DATA DIR REG B
0233   A4C3             DDRA   .BLOCK 1        ;DATA DIR REG A
0234   A4C4             T1L    .BLOCK 1        ;TIMER 1 COUNTER LOW
0235   A4C5             T1CH   .BLOCK 1        ;TIMER 1 COUNTER HIGH
0236   A4C6             T1LL   .BLOCK 1        ;TIMER 1 LATCH LOW
0237   A4C7             T1LH   .BLOCK 1        ;TIMER 1 LATCH HIGH
0238   A4C8             T2L    .BLOCK 1        ;TIMER 2 LATCH & COUNTER LOW
0239   A4C9             T2H    .BLOCK 1        ;TIMER 2 COUNTER HIGH
0240   A4CA             SR     .BLOCK 1        ;SHIFT REGISTER
0241   A4CB             ACR    .BLOCK 1        ;AUX CONTROL REGISTER
0242   A4CC             PCR    .BLOCK 1        ;PERIPHERAL CONTROL REGISTER
0243   A4CD             IFR    .BLOCK 1        ;INTERRUPT FLAG REGISTER
0244   A4CE             IER    .BLOCK 1        ;INTERRUPT ENABLE REGISTER
0245   A4CF             DRA    .BLOCK 1        ;DATA REGISTER A
0246   A4D0             
0247   A4D0             ;DEFINE I/O CONTROL FOR PCR (CA1,CA2,CB1,CB2)
0248   A4D0             DATIN  =$0E            ;DATA IN CA2=1
0249   A4D0             DATOUT =$0C            ;DATA OUT CA2=0
0250   A4D0             PRST   =$00            ;PRINT START (CB1) ,NEG DETEC
0251   A4D0             SP12   =$01            ;STROBE P1,P2  (CA1) ,POS DETEC
0252   A4D0             MON    =$C0            ;MOTOR ON (CB2=0)
0253   A4D0             MOFF   =$E0
0254   A4D0             ;MSKS TO OBTAIN EACH INTERRUPT
0255   A4D0             MPRST  =$10            ;INT FLG FOR CB1
0256   A4D0             MSP12  =$02            ;INT FLG FOR CA1
0257   A4D0             MT2    =$20            ;INT FLG FOR T2
0258   A4D0             
0259   A4D0             ;DEFINE I/O CONTROL FOR ACR  (TIMERS,SR)
0260   A4D0             PRTIME =1700           ; PRINTING TIME =1.7M MSEC
0261   A4D0             DEBTIM =5000           ; DEBOUNCE TIME (5 MSEC)
0262   A4D0             T2I    =$00            ;T2 AS ONE SHOT (PRI,KB,TTY,TAPE)
0263   A4D0             T1I    =$00            ;T1 AS ONE SHOT,PB7 DIS (TAPES)
0264   A4D0             T1FR   =$C0            ;T1 IN FREE RUNNING (TAPE)
0265   A4D0             
0266   A4D0             ;         ******************************
0267   A4D0             ;         *    DISPLAY   (AC00-AFFF)   *
0268   A4D0             ;         ******************************
0269   A4D0             ; REGISTERS FOR DISPLAY (6520)
0270   A4D0                    *=MECB_DISPLAY
0271   A4D0             RA     .BLOCK 1        ;REGISTER A
0272   A4D1             CRA    .BLOCK 1        ;CONTROL REG A
0273   A4D2             RB     .BLOCK 1        ;REG B
0274   A4D3             CRB    .BLOCK 1        ;CONTROL REG B
0275   A4D4             
0276   A4D4             ;CHR 00-03 ENA BY $AC04-AC07
0277   A4D4             ;CHR 04-07 ENA BY $AC08-AC0B
0278   A4D4             ;CHR 08-11 ENA BY $AC10-AC13
0279   A4D4             ;CHR 12-15 ENA BY $AC20-AC23
0280   A4D4             ;CHR 16-19 ENA BY $AC40-AC43
0281   A4D4             
0282   A4D4             NULLC  =$FF
0283   A4D4             CR     =$0D
0284   A4D4             LF     =$0A
0285   A4D4             ESCAPE =$1B
0286   A4D4             RUB    =$08
0287   A4D4             EQS    =$BD
0288   A4D4             ;.FILE A1
0289   A4D4             
0290   A4D4             ; E=ENTER EDITOR
0291   A4D4             ; T=RE-ENTER EDITOR TO RE-EDIT SOURCE
0292   A4D4             ; R=SHOW REGISTERS
0293   A4D4             ; M=DISPLAY MEMORY
0294   A4D4             ;  =SHOW NEXT 4 ADDRESSES
0295   A4D4             ; G=GO AT CURRENT P.C. (COUNT)
0296   A4D4             ; /=ALTER CURRENT MEMORY
0297   A4D4             ; L=LOAD OBJECT
0298   A4D4             ; D=DUMP OBJECT
0299   A4D4             ; N=ASSEMBLE
0300   A4D4             ; *=ALTER P.C.
0301   A4D4             ; A=ALTER ACCUMULATOR
0302   A4D4             ; X=ALTER X REGISTER
0303   A4D4             ; Y=ALTER Y REGISTER
0304   A4D4             ; P=ALTER PROCESSOR STATUS
0305   A4D4             ; S=ALTER STACK POINTER
0306   A4D4             ; B=SET BREAK ADDR
0307   A4D4             ; ?=SHOW BREAK ADDRESSES
0308   A4D4             ; #=CLEAR BREAK ADDRESSES
0309   A4D4             ; H=SHOW TRACE HISTORY STACK
0310   A4D4             ; V=TOGGLE REGISTER PRINT WITH DIS.
0311   A4D4             ; Z=TOGGLE DISASSEMBLER TRACE
0312   A4D4             ; \=TURN ON/OFF PRINTER
0313   A4D4             ;  =ADV PAPER
0314   A4D4             ; I=MNEMONIC ENTRY
0315   A4D4             ; K=DISASSEMBLE MEMORY
0316   A4D4             ; 1=TOGGLE TAPE 1 CONTRL (ON OR OFF)
0317   A4D4             ; 2=TOGGLE TAPE 2 CONTRL
0318   A4D4             ; 3=VERIFY CKSUM FOR TAPES
0319   A4D4             ; 4=ENABLE BREAKS
0320   A4D4             ; 5=BASIC ENTRY (COLD)
0321   A4D4             ; 6=BASIC REENTRY (WARM)
0322   A4D4             
0323   A4D4             ;FOLLOWING KEYS ARE UNUSED BUT 'HOOKS'
0324   A4D4             ;ARE PROVIDED IN LOCATIONS 010C-0114
0325   A4D4             ;
0326   A4D4             ; KEYF1,KEYF2,KEYF3
0327   A4D4             
0328   E000                    *=$E000
0329   E000             ;ALL MSGS HAVE MSB=1 OF LAST CHAR TO END IT
0330   E000 46 52 4F 4D M1     .DB "FROM",EQS
0330   E004 BD 
0331   E005 54 4F BD    M3     .DB "TO",EQS
0332   E008 20 2A 2A 2A M4     .DB " **** PS AA XX YY S",$D3
0332   E00C 2A 20 50 53 
0332   E010 20 41 41 20 
0332   E014 58 58 20 59 
0332   E018 59 20 53 D3 
0333   E01C 4D 4F 52 45 M5     .DB "MORE",$BF
0333   E020 BF 
0334   E021 4F 4E A0    M6     .DB "ON",$A0     ;"ON "
0335   E024 4F 46 C6    M7     .DB "OF",$C6     ;"OFF"
0336   E027 42 52 CB    M8     .DB "BR",$CB     ;"BRK"
0337   E02A 49 4E BD    M9     .DB "IN",EQS
0338   E02D 4F 55 54 BD M10    .DB "OUT",EQS
0339   E031 20 4D 45 4D M11    .DB " MEM FAIL",$A0
0339   E035 20 46 41 49 
0339   E039 4C A0 
0340   E03B 20 50 52 49 M12    .DB " PRINTER DOW",$CE
0340   E03F 4E 54 45 52 
0340   E043 20 44 4F 57 
0340   E047 CE 
0341   E048 20 53 52 43 TMSG0  .DB " SRCH"
0341   E04C 48 
0342   E04D 20 46 BD    TMSG1  .DB " F",EQS
0343   E050 54 BD       TMSG2  .DB "T",EQS
0344   E052 A0 C5 D2 D2 TMSG3  .DB $A0,$C5,$D2,$D2  ;PRINT " ERROR" ,MSB=1
0345   E056 CF D2 A0 A0        .DB $CF,$D2,$A0,$A0,$A0,$A0,$A0,$A0,";"
0345   E05A A0 A0 A0 A0 
0345   E05E 3B 
0346   E05F 41 BD       TMSG5  .DB "A",EQS
0347   E061 42 4C 4B 3D TMSG6  .DB "BLK=",$A0
0347   E065 A0 
0348   E066 A0 CC CF C1 TMSG7  .DB $A0,$CC,$CF,$C1,$C4,";"
0348   E06A C4 3B 
0349   E06C 45 44 49 54 EMSG1  .DB "EDITO",$D2 ;EDITOR MESSAGES
0349   E070 4F D2 
0350   E072 45 4E C4    EMSG2  .DB "EN",$C4
0351   E075             
0352   E075             ;VECTORS COME HERE FIRST AFTER JUMP THRU FFFA-FFFF
0353   E075 6C 02 A4    NMIV1  JMP (NMIV2)     ;NMIV2 IS A VECTOR TO NMIV3
0354   E078 6C 04 A4    IRQV1  JMP (IRQV2)     ;IRQV2 IS A VECTOR TO IRQV3
0355   E07B             
0356   E07B             ;SINGLE STEP ENTRY POINT (NMI)
0357   E07B 8D 21 A4    NMIV3  STA SAVA        ;SAVE ACCUM
0358   E07E 68                 PLA
0359   E07F 8D 20 A4           STA SAVPS       ;SAVE PROCESSOR STATUS
0360   E082 D8                 CLD
0361   E083 8E 22 A4           STX SAVX        ;SAVE X
0362   E086 8C 23 A4           STY SAVY
0363   E089 68                 PLA
0364   E08A 8D 25 A4           STA SAVPC       ;PROGRAM COUNTER
0365   E08D 68                 PLA
0366   E08E 8D 26 A4           STA SAVPC+1
0367   E091 BA                 TSX             ;GET STACK PTR & SAVE IT
0368   E092 8E 24 A4           STX SAVS
0369   E095             ;TRACE THE ADDRESS
0370   E095 AC 14 A4           LDY HISTP       ;GET POINTER TO HISTORY STACK
0371   E098 AD 26 A4           LDA SAVPC+1     ;SAVE HALT ADDR IN HISTORY STACK
0372   E09B 99 2E A4           STA HIST,Y
0373   E09E AD 25 A4           LDA SAVPC
0374   E0A1 99 2F A4           STA HIST+1,Y
0375   E0A4 20 88 E6           JSR NHIS        ;UPDATE POINTER
0376   E0A7 AD 10 A4           LDA BKFLG       ;SOFT BREAKS ON?
0377   E0AA F0 08              BEQ NMI5        ;NO ,DONT CHCK BRKPOINT LIST
0378   E0AC 20 6B E7           JSR CKB         ;CHECK BREAKPOINT LIST
0379   E0AF 90 03              BCC NMI5        ;DID NOT HIT BREAKPOINT
0380   E0B1 4C 7F E1    NMI4   JMP IRQ2        ;HIT A BREAK-TRAP TO MONITOR
0381   E0B4 20 90 E7    NMI5   JSR DONE        ;COUNT =0 ?
0382   E0B7 F0 F8              BEQ NMI4        ;YES,TRAP TO MONITOR
0383   E0B9 20 07 E9           JSR RCHEK       ;CHK IF HE WANTS TO INTERR
0384   E0BC 4C 6D E2           JMP GOBK        ;NOT DONE-RESUME EXECUTION
0385   E0BF             
0386   E0BF             ;POWER UP AND RESET ENTRY POINT (RST TRANSFERS HERE)
0387   E0BF D8          RSET   CLD             ;CLEAR DEC MODE
0388   E0C0 78                 SEI             ;DISABLE INTERRUPT
0389   E0C1 A2 FF              LDX #$FF        ;INIT STACK PTR
0390   E0C3 9A                 TXS
0391   E0C4 8E 24 A4           STX SAVS        ;ALSO INIT SAVED STACK PTR
0392   E0C7             ;INITIALIZE 6522
0393   E0C7 A2 0E              LDX #14
0394   E0C9 BD 43 E7    RS1    LDA INTAB1,X    ;PB1-PB0,PA7-PA0 FOR PRNTR
0395   E0CC 9D C0 A4           STA DRB,X       ;PB2=TTO,PB6=TTI
0396   E0CF CA                 DEX             ;PB4-PB5=TAPE CONTROL,PB7=DATA
0397   E0D0 10 F7              BPL RS1         ;PB3 =SWITCH KB/TTY
0398   E0D2             ;INITIALIZE 6532 ; DJRM NOW USER 6522
0399   E0D2 20 B2 EF           JSR  PS2KB_Init
0400   E0D5 EA                 NOP
0401   E0D6 EA                 NOP ;       
0402   E0D7             
0403   E0D7 20 08 80           JSR  $8008       ; bios_init
0404   E0DA             ;       NOP
0405   E0DA             ;       NOP
0406   E0DA             ;       NOP
0407   E0DA             
0408   E0DA EA                 NOP
0409   E0DB EA                 NOP
0410   E0DC EA                 NOP
0411   E0DD             ;       LDX #3          ;PORTS USED FOR KB
0412   E0DD             ;RS2    LDA INTAB2,X    ;PA0-PA7 AS OUTPUT
0413   E0DD             ;       STA DRA2,X      ;PB0-PB7 AS INPUT
0414   E0DD             ;       DEX
0415   E0DD             ;       BPL RS2
0416   E0DD             ;INITIALIZE MONITOR RAM (6532)
0417   E0DD AD 56 E7           LDA INTAB3      ;CHECK IF NMIV2 HAS BEEN CHANGED
0418   E0E0 CD 02 A4           CMP NMIV2       ;IF IT HAS THEN ASSUME A COLD
0419   E0E3 D0 0C              BNE RS3A        ;START AND INITIALIZE EVERYTHING
0420   E0E5 AD 57 E7           LDA INTAB3+1
0421   E0E8 CD 03 A4           CMP NMIV2+1
0422   E0EB D0 04              BNE RS3A
0423   E0ED A2 10              LDX #16         ;THEY ARE EQUAL ,IT'S A WARM RESET
0424   E0EF D0 02              BNE RS3
0425   E0F1 A2 00       RS3A   LDX #0          ;INIT EVERYTHING (POWER UP)
0426   E0F3 BD 56 E7    RS3    LDA INTAB3,X
0427   E0F6 9D 02 A4           STA NMIV2,X
0428   E0F9 E8                 INX
0429   E0FA E0 15              CPX #21
0430   E0FC 90 F5              BCC RS3
0431   E0FE             ;INITIALIZE DISPLAY (6520)
0432   E0FE A9 00              LDA #0          ;SET CONTR REG FOR DATA DIR REG
0433   E100 A2 01              LDX #1
0434   E102 20 13 E1           JSR SETREG
0435   E105 A9 FF              LDA #$FF        ;SET DATA DIR REG FOR OUTPUT
0436   E107 CA                 DEX
0437   E108 20 13 E1           JSR SETREG
0438   E10B A9 04              LDA #$04        ;SET CONTR REG FOR PORTS
0439   E10D E8                 INX
0440   E10E 20 13 E1           JSR SETREG
0441   E111 D0 07              BNE RS3B
0442   E113 9D D0 A4    SETREG STA RA,X
0443   E116 9D D2 A4           STA RB,X
0444   E119 60                 RTS
0445   E11A 58          RS3B   CLI             ;CLEAR INTERRUPT
0446   E11B             
0447   E11B             ;KB/TTY SWITCH TEST AND BIT RATE MEASUREMENT
0448   E11B A9 08              LDA #$08        ;PB3=SWITCH KB/TTY
0449   E11D 2C C0 A4    RS4    BIT DRB         ;A^M ,PB6-> V (OVERFLOW FLG)
0450   E120 D0 22              BNE RS7         ;BRANCH ON KB
0451   E122 70 F9              BVS RS4         ;START BIT=PB6=0?
0452   E124 A9 FF              LDA #$FF        ;YES ,INITIALIZE TIMER T2
0453   E126 8D C9 A4           STA T2H
0454   E129 2C C0 A4    RS5    BIT DRB         ;END OF START BIT ?
0455   E12C 50 FB              BVC RS5         ;NO ,WAIT UNTIL PB6 BACK TO 1
0456   E12E AD C9 A4           LDA T2H         ;STORE TIMING
0457   E131 49 FF              EOR #$FF        ;COMPLEMENT
0458   E133 8D 17 A4           STA CNTH30
0459   E136 AD C8 A4           LDA T2L
0460   E139 49 FF              EOR #$FF
0461   E13B 20 7C FE           JSR PATCH1      ;ADJUST IT
0462   E13E 20 13 EA    RS6    JSR CRLOW       ;CLEAR DISPLAY
0463   E141 4C 72 FF           JMP PAT21
0464   E144 A2 13       RS7    LDX #19         ;CLEAR HARDWARE CURSORS
0465   E146 8A          RS8    TXA
0466   E147 48                 PHA
0467   E148 A9 00              LDA #0
0468   E14A 20 7B EF           JSR OUTDD1
0469   E14D 68                 PLA
0470   E14E AA                 TAX
0471   E14F CA                 DEX
0472   E150 10 F4              BPL RS8
0473   E152 30 EA              BMI RS6
0474   E154             
0475   E154             ;BRK INSTR (00) OR IRQ ENTRY POINT
0476   E154 8D 21 A4    IRQV3  STA SAVA
0477   E157 68                 PLA
0478   E158 48                 PHA             ;GET STATUS
0479   E159 29 10              AND #$10        ;SEE IF 'BRK' , ISOLATE B FLG
0480   E15B D0 06              BNE IRQ1        ;TRAP WAS CAUSED BY "BRK" INSTRUC
0481   E15D AD 21 A4           LDA SAVA        ;TRAP CAUSED BY IRQ SO TRANSFER
0482   E160 6C 00 A4           JMP (MONRAM)    ;CONTROL TO USER THRU VECTOR
0483   E163             ;IS 'BRK' INSTR ,SHOW PC & DATA
0484   E163             ;PC IS OFF BY ONE , SO ADJUST IT
0485   E163 68          IRQ1   PLA
0486   E164 8D 20 A4           STA SAVPS       ;SAVE PROCESSOR STATUS
0487   E167 8E 22 A4           STX SAVX
0488   E16A 8C 23 A4           STY SAVY
0489   E16D D8                 CLD
0490   E16E 68                 PLA             ;PROGR CNTR
0491   E16F 38                 SEC             ;SUBTRACT ONE FROM RETURN ADDR
0492   E170 E9 01              SBC #1
0493   E172 8D 25 A4           STA SAVPC
0494   E175 68                 PLA
0495   E176 E9 00              SBC #0
0496   E178 8D 26 A4           STA SAVPC+1
0497   E17B BA                 TSX             ;GET STACK PTR & SAVE IT
0498   E17C 8E 24 A4           STX SAVS
0499   E17F             ;SHOW PC AND DATA
0500   E17F 20 61 F4    IRQ2   JSR REGQ        ;SHOW NEXT INSTRUCTION & CONTINUE
0501   E182             
0502   E182             ;THIS ROUTINE WILL GET A CHR WITH "( )" FROM
0503   E182             ;KB/TTY & THEN WILL GO TO THE RESPECTIVE COMMAND
0504   E182 4C 59 FF    START  JMP PAT19       ;CLEAR DEC MODE & <CR>
0505   E185 A9 BC       STA1   LDA #'<'+$80    ;"<" CHR WITH MSB=1 FOR DISP
0506   E187 20 7A E9           JSR OUTPUT
0507   E18A 20 96 FE           JSR RED1        ;GET CHR & ECHO FROM KB/TTY
0508   E18D 48                 PHA
0509   E18E A9 3E              LDA #'>'
0510   E190 20 7A E9           JSR OUTPUT
0511   E193 68                 PLA             ;SCAN LIST OF CMDS FOR ENTERED CHR
0512   E194 A2 20              LDX #MCNT       ;COUNT OF COMMANDS
0513   E196 DD C4 E1    MCM2   CMP COMB,X      ;CHECK NEXT COMMAND IN LIST
0514   E199 F0 11              BEQ MCM3        ;MATCH , SO PROCESS THIS COMMAND
0515   E19B CA                 DEX
0516   E19C 10 F8              BPL MCM2
0517   E19E             ;IS BAD COMMAND
0518   E19E 20 D4 E7           JSR QM
0519   E1A1 D8          COMIN  CLD
0520   E1A2 20 FE E8           JSR LL
0521   E1A5 AE 24 A4           LDX SAVS
0522   E1A8 9A                 TXS
0523   E1A9 4C 82 E1           JMP START
0524   E1AC             ;HAVE VALID COMMAND
0525   E1AC 8A          MCM3   TXA             ;CONVERT TO WORD (MULT BY 2)
0526   E1AD 0A                 ASL A           ;2 BYTES (ADDR)
0527   E1AE AA                 TAX
0528   E1AF BD E5 E1           LDA MONCOM,X    ;GET ADDRESS OF COMMAND PROCESSOR
0529   E1B2 8D 7D A4           STA JUMP
0530   E1B5 BD E6 E1           LDA MONCOM+1,X
0531   E1B8 8D 7E A4           STA JUMP+1
0532   E1BB 20 C1 E1           JSR JMPR        ;CMD PROCESSORS CAN EXIT WITH 'RTS'
0533   E1BE 4C 82 E1           JMP START
0534   E1C1 6C 7D A4    JMPR   JMP (JUMP)      ;GO TO COMMAND
0535   E1C4             
0536   E1C4             ;VALID COMMANDS
0537   E1C4             MCNT   =32             ;COUNT
0538   E1C4 45 54 52 4D COMB   .DB "ETRMG/LDN*AXYPS "
0538   E1C8 47 2F 4C 44 
0538   E1CC 4E 2A 41 58 
0538   E1D0 59 50 53 20 
0539   E1D4 42 3F 23 48        .DB "B?#HVZIK123456[]",$5E
0539   E1D8 56 5A 49 4B 
0539   E1DC 31 32 33 34 
0539   E1E0 35 36 5B 5D 
0539   E1E4 5E 
0540   E1E5             
0541   E1E5 39 F6 CF F6 MONCOM .DW EDIT,REENTR,REG,MEM,GO
0541   E1E9 27 E2 48 E2 
0541   E1ED 61 E2 
0542   E1EF A0 E2 E6 E2        .DW CHNGG,LOAD,DUMP,ASSEM,CGPC,CGA
0542   E1F3 3B E4 00 D0 
0542   E1F7 D4 E5 EE E5 
0543   E1FB F2 E5 F6 E5        .DW CGX,CGY,CGPS,CGS,NXT5,BRKA
0543   E1FF EA E5 FA E5 
0543   E203 0D E6 1B E6 
0544   E207 4D E6 FE E6        .DW SHOW,CLRBK,SHIS,REGT,TRACE
0544   E20B 65 E6 D9 E6 
0544   E20F DD E6 
0545   E211 9E FB 0A E7        .DW MNEENT,KDISA,TOGTA1,TOGTA2,VECKSM
0545   E215 BD E6 CB E6 
0545   E219 94 E6 
0546   E21B E5 E6 00 B0        .DW BRKK,BASIEN,BASIRE
0546   E21F 03 B0 
0547   E221             ;USER DEFINED FUNCTIONS
0548   E221 0C 01 0F 01        .DW KEYF1,KEYF2,KEYF3
0548   E225 12 01 
0549   E227             
0550   E227             ;***** R COMMAND-DISPLAY REGISTERS *****
0551   E227 20 13 EA    REG    JSR CRLOW       ;CLEAR DISP IF KB
0552   E22A A0 08              LDY #M4-M1      ;MESSAG & <CR>
0553   E22C 20 AF E7           JSR KEP
0554   E22F 20 24 EA           JSR CRCK
0555   E232 20 3E E8    REG1   JSR BLANK
0556   E235 A0 09              LDY #SAVPC-ADDR ;OUTPUT PGR CNTR (SAVEPC+1,SAVEPC)
0557   E237 20 DD E2           JSR WRITAD
0558   E23A A9 20              LDA #SAVPS%256      ;NOW THE OTHER 5 REGS
0559   E23C 8D 1C A4           STA ADDR
0560   E23F A9 A4              LDA #SAVPS/256
0561   E241 8D 1D A4           STA ADDR+1
0562   E244 A2 05              LDX #5          ;COUNT
0563   E246 D0 07              BNE MEM1        ;SHARE CODE
0564   E248             
0565   E248             ;***** M COMMAND-DISPLAY MEMORY *****
0566   E248 20 AE EA    MEM    JSR ADDIN       ;GET START ADDDRESS IN ADDR
0567   E24B B0 13              BCS MEM3
0568   E24D A2 04       MEIN   LDX #4
0569   E24F A0 00       MEM1   LDY #0
0570   E251 20 3E E8    MEM2   JSR BLANK
0571   E254 A9 1C              LDA #ADDR%256
0572   E256 20 58 EB           JSR LDAY        ;LOAD CONTENTS OF CURR LOCATION
0573   E259 20 46 EA           JSR NUMA        ;AND DISPLAY IT AS 2 HEX DIGITS
0574   E25C C8                 INY
0575   E25D CA                 DEX             ;DECR COUNTER
0576   E25E D0 F1              BNE MEM2
0577   E260 60          MEM3   RTS             ;GET NEXT COMMAND
0578   E261             
0579   E261             ;***** G COMMAND-RESTART PROCESSOR *****
0580   E261 20 37 E8    GO     JSR PSL1        ;"/"
0581   E264 20 85 E7           JSR GCNT        ;GET COUNT
0582   E267 20 F0 E9           JSR CRLF
0583   E26A 4C 86 E2           JMP GOBK1       ;RESUME EXECUTION
0584   E26D AD 0E A4    GOBK   LDA REGF        ;DISPLAY REGISTERS ?
0585   E270 F0 06              BEQ GOBK0       ;NO,BRANCH
0586   E272 20 32 E2           JSR REG1        ;SHOW THE SIX REG
0587   E275 20 24 EA           JSR CRCK        ;<CR>
0588   E278 20 07 E9    GOBK0  JSR RCHEK       ;SEE IF HE WANTS TO INTERRUPT
0589   E27B AD 0F A4           LDA DISFLG      ;DISASSEMBLE CURRENT INSTR ?
0590   E27E F0 06              BEQ GOBK1       ;NO,BRANCH
0591   E280 20 6C F4           JSR DISASM      ;DISASM THIS INSTRUCTION
0592   E283 20 13 EA           JSR CRLOW
0593   E286 AE 24 A4    GOBK1  LDX SAVS        ;RESTORE SAVED REGS FOR RTI
0594   E289 9A                 TXS
0595   E28A AC 23 A4           LDY SAVY
0596   E28D AE 22 A4           LDX SAVX
0597   E290 AD 26 A4           LDA SAVPC+1
0598   E293 48                 PHA             ;PUT PC ON STACK
0599   E294 AD 25 A4           LDA SAVPC
0600   E297 48                 PHA
0601   E298 AD 20 A4           LDA SAVPS       ;STATUS ALSO
0602   E29B 48                 PHA
0603   E29C AD 21 A4           LDA SAVA
0604   E29F 40                 RTI             ;AND AWAY WE GO...
0605   E2A0             
0606   E2A0             ;***** / COMMAND-ALTER MEMORY *****
0607   E2A0 20 3E E8    CHNGG  JSR BLANK
0608   E2A3 20 DB E2           JSR WRITAZ      ;WRITE ADDR
0609   E2A6 20 3E E8    CHNG1  JSR BLANK
0610   E2A9 20 5D EA           JSR RD2         ;GET VALUE
0611   E2AC 90 0A              BCC CH2         ;ISN'T SKIP OR DONE
0612   E2AE C9 20              CMP #' '
0613   E2B0 D0 13              BNE CH3         ;NOT BLANK SO MUST BE DONE
0614   E2B2             ;SKIP THIS LOCATION
0615   E2B2 20 3E E8           JSR BLANK
0616   E2B5 4C C0 E2           JMP CH4
0617   E2B8             ;IS ALTER
0618   E2B8 20 78 EB    CH2    JSR SADDR       ;STORE ENTERED VALUE INTO MEMORY
0619   E2BB F0 03              BEQ CH4         ;NO ERROR IN STORE
0620   E2BD 4C 33 EB           JMP MEMERR      ;MEMORY WRITE ERROR
0621   E2C0 C8          CH4    INY
0622   E2C1 C0 04              CPY #4
0623   E2C3 D0 E1              BNE CHNG1       ;GO AGAIN
0624   E2C5             ;HAVE DONE LINE OR HAVE <CR>
0625   E2C5 20 CD E2    CH3    JSR NXTADD      ;UPDATE THE ADDRESS
0626   E2C8 A9 0D              LDA #CR         ;CLEAR DISPL
0627   E2CA 4C E9 FE           JMP PATC10      ;ONLY ONE <CR> & BACK TO MONITOR
0628   E2CD             
0629   E2CD 98          NXTADD TYA             ;ADD Y TO ADDR+1,ADDR
0630   E2CE 18                 CLC
0631   E2CF 6D 1C A4           ADC ADDR
0632   E2D2 8D 1C A4           STA ADDR
0633   E2D5 90 03              BCC NXTA1
0634   E2D7 EE 1D A4           INC ADDR+1
0635   E2DA 60          NXTA1  RTS
0636   E2DB             
0637   E2DB             ;WRITE CURRENT VALUE OF ADDR
0638   E2DB             ;PART OF / & SPACE COMM
0639   E2DB A0 00       WRITAZ LDY #0
0640   E2DD B9 1D A4    WRITAD LDA ADDR+1,Y
0641   E2E0 BE 1C A4           LDX ADDR,Y
0642   E2E3 4C 42 EA           JMP WRAX
0643   E2E6             
0644   E2E6             ;***** L COMMAND-GENERAL LOAD *****
0645   E2E6             ;LOAD OBJECT FROM TTY,USER,TYPE OR TAPE IN KIM-1 FORMAT
0646   E2E6 20 48 E8    LOAD   JSR WHEREI      ;WHERE INPUT
0647   E2E9             ;GET ";"  , # OF BYTES AND SA
0648   E2E9 20 93 E9    LOAD1  JSR INALL       ;GET FIRST CHAR
0649   E2EC C9 3B              CMP #SEMICOLON  ;LOOK FOR BEGINNING
0650   E2EE D0 F9              BNE LOAD1       ;IGNORE ALL CHARS BEFORE ";"
0651   E2F0 20 4D EB           JSR CLRCK       ;CLEAR CHECHSUM
0652   E2F3 20 4B E5           JSR CHEKAR      ;READ RECORD LENGTH
0653   E2F6 AA                 TAX             ;SAVE IN X THE # BYTES
0654   E2F7 20 4B E5           JSR CHEKAR      ;READ UPPER HALF OF ADDRESS
0655   E2FA 8D 1D A4           STA ADDR+1
0656   E2FD 20 4B E5           JSR CHEKAR      ;READ LOWER HALF OF ADDRESS
0657   E300 8D 1C A4           STA ADDR
0658   E303 8A                 TXA
0659   E304 F0 1B              BEQ LOAD4       ;LAST RECORD (RECORD LENGTH=0)
0660   E306             ;GET DATA
0661   E306 20 FD E3    LOAD2  JSR RBYTE       ;READ NEXT BYTE OF DATA
0662   E309 20 13 E4           JSR STBYTE      ;STORE AT LOC (ADDR+1,ADDR)
0663   E30C CA                 DEX             ;DECR RECORD LENGTH
0664   E30D D0 F7              BNE LOAD2
0665   E30F             ;COMPARE CKSUM
0666   E30F 20 FD E3           JSR RBYTE       ;READ UPPER HALF OF CHCKSUM
0667   E312 CD 1F A4           CMP CKSUM+1     ;COMPARE TO COMPUTED VALUE
0668   E315 D0 6E              BNE CKERR       ;CKSUM ERROR
0669   E317 20 FD E3           JSR RBYTE       ;READ LOWER HALF OF CHECKSUM
0670   E31A CD 1E A4           CMP CKSUM
0671   E31D D0 66              BNE CKERR
0672   E31F F0 C8              BEQ LOAD1       ;UNTIL LAST RECORD
0673   E321 A2 05       LOAD4  LDX #5          ;READ 4 MORE ZEROS
0674   E323 20 FD E3    LOAD5  JSR RBYTE
0675   E326 CA                 DEX
0676   E327 D0 FA              BNE LOAD5
0677   E329 20 93 E9           JSR INALL       ;READ LAST <CR>
0678   E32C 4C 20 E5           JMP DU13        ;SET DEFAULT DEV & GO BACK
0679   E32F             
0680   E32F             ;LOAD ROUTINE FROM TAPE BY BLOCKS
0681   E32F             ;CHECK FOR RIGHT FILE & LOAD FIRST BLOCK
0682   E32F A9 00       LOADTA LDA #$00        ;CLEAR BLOCK COUNT
0683   E331 8D 15 01           STA BLK
0684   E334 20 53 ED           JSR TIBY1       ;LOAD BUFFER WITH A BLOCK
0685   E337 CA                 DEX             ;SET X=0
0686   E338 8E 15 A4           STX CURPO2      ;CLEAR DISPLAY PTR
0687   E33B BD 16 01           LDA TABUFF,X    ;BLK COUNT SHOULD BE ZERO
0688   E33E D0 EF              BNE LOADTA      ;NO, READ ANOTHER BLOCK
0689   E340 E8                 INX
0690   E341             ;AFTER FIRST BLOCK OUTPUT FILE NAME
0691   E341 EE 11 A4           INC PRIFLG      ;SO DO NOT GO TO PRINT.
0692   E344 A0 48              LDY #TMSG0-M1   ;PRINT "F="
0693   E346 20 AF E7           JSR KEP
0694   E349 BD 16 01    LOAD1A LDA TABUFF,X    ;OUTPUT FILE NAME
0695   E34C 20 7A E9           JSR OUTPUT      ;ONLY TO DISPLAY
0696   E34F E8                 INX
0697   E350 E0 06              CPX #6
0698   E352 D0 F5              BNE LOAD1A
0699   E354 20 3E E8           JSR BLANK
0700   E357 A0 61              LDY #TMSG6-M1   ;PRINT "BLK=  "
0701   E359 20 AF E7           JSR KEP
0702   E35C CE 11 A4           DEC PRIFLG      ;RESTORE PRINTR FLG
0703   E35F 20 BD ED           JSR ADDBK1      ;JUST OUTPUT BLK CNT
0704   E362 A2 01              LDX #1          ;RESTORE X
0705   E364             ;CHECK IF FILE IS CORRECT
0706   E364 BD 16 01    LOADT2 LDA TABUFF,X    ;NOW CHCK FILE NAME
0707   E367 DD 2D A4           CMP NAME-1,X
0708   E36A D0 C3              BNE LOADTA      ;IF NO FILENAME GET
0709   E36C E8                 INX             ;ANOTHER BLOCK
0710   E36D E0 06              CPX #6          ;FILENAME=5 CHRS
0711   E36F D0 F3              BNE LOADT2
0712   E371 8E 36 A4           STX TAPTR       ;SAVE TAPE BUFF PTR
0713   E374 EE 11 A4           INC PRIFLG      ;OUTPUT MSG ONLY TO DISPLAY
0714   E377 A9 00              LDA #0          ;CLEAR DISPLAY POINTER
0715   E379 8D 15 A4           STA CURPO2
0716   E37C A0 66              LDY #TMSG7-M1   ;PRINT "LOAD " WITHOUT CLR DISPL
0717   E37E 20 96 E3           JSR CKER1
0718   E381 CE 11 A4           DEC PRIFLG
0719   E384 60                 RTS
0720   E385             
0721   E385             ;LINE CKSUM ERROR
0722   E385 20 8E E3    CKERR  JSR CKER0       ;SUBR SO MNEM ENTRY CAN USE IT
0723   E388 20 DB E2           JSR WRITAZ      ;WRITE ADDR
0724   E38B 4C A1 E1           JMP COMIN
0725   E38E 20 FE E8    CKER0  JSR LL          ;SET DEFAULT DEVICES
0726   E391 20 24 EA           JSR CRCK        ;<CR>
0727   E394 A0 52       CKER00 LDY #TMSG3-M1   ;PRINT "ERROR"
0728   E396 B9 00 E0    CKER1  LDA M1,Y        ;DONT CLR DISPLAY TO THE RIGHT
0729   E399 C9 3B              CMP #SEMICOLON
0730   E39B F0 06              BEQ CKER2
0731   E39D 20 7A E9           JSR OUTPUT      ;ONLY TO TERMINAL
0732   E3A0 C8                 INY
0733   E3A1 D0 F3              BNE CKER1
0734   E3A3 60          CKER2  RTS
0735   E3A4             
0736   E3A4             ;LOAD ROUTINE FROM TAPE WITH KIM-1 FORMAT
0737   E3A4 20 4D EB    LOADKI JSR CLRCK       ;CLEAR CKSUM
0738   E3A7 20 EA ED    LOADK1 JSR TAISET      ;SET TAPE FOR INPUT
0739   E3AA 20 29 EE    LOADK2 JSR GETTAP      ;READ CHARACTER FROM TAPE
0740   E3AD C9 2A              CMP #'*'        ;BEGINNING OF FILE?
0741   E3AF F0 06              BEQ LOADK3      ;YES,BRNCH
0742   E3B1 C9 16              CMP #$16        ;IF NOT *  SHOULD BE SYN
0743   E3B3 D0 F2              BNE LOADK1
0744   E3B5 F0 F3              BEQ LOADK2
0745   E3B7 20 FD E3    LOADK3 JSR RBYTE       ;READ ID FROM TAPE
0746   E3BA 8D 21 A4           STA SAVA        ;SAVE ID
0747   E3BD             ;NOW GET ADDR TO DISPLAY
0748   E3BD             ;& COMPARE ID AFTERWARDS
0749   E3BD 20 4B E5           JSR CHEKAR      ;GET START ADDR LOW
0750   E3C0 8D 1C A4           STA ADDR
0751   E3C3 20 4B E5           JSR CHEKAR      ;GET START ADDR HIGH
0752   E3C6 8D 1D A4           STA ADDR+1
0753   E3C9 20 25 E4           JSR GETID       ;ID FROM HIM
0754   E3CC CD 21 A4           CMP SAVA        ;DO IDS MATCH?
0755   E3CF D0 D3              BNE LOADKI      ;NO ,GET ANOTHER FILE
0756   E3D1 A2 02       LOADK5 LDX #$02        ;GET 2 CHARS
0757   E3D3 20 29 EE    LOADK6 JSR GETTAP      ;1 CHAR FROM TAPE
0758   E3D6 C9 2F              CMP #'/'        ;LAST CHAR ?
0759   E3D8 F0 0E              BEQ LOADK7      ;YES,BRNCH
0760   E3DA 20 84 EA           JSR PACK        ;CONVERT TO HEX
0761   E3DD B0 A6              BCS CKERR       ;NOT HEX CHAR SO ERROR
0762   E3DF CA                 DEX
0763   E3E0 D0 F1              BNE LOADK6
0764   E3E2 20 13 E4           JSR STBYTE      ;STORE & CHCK MEM FAIL
0765   E3E5 4C D1 E3           JMP LOADK5      ;NEXT
0766   E3E8 20 FD E3    LOADK7 JSR RBYTE       ;END OF DATA CMP CKSUM
0767   E3EB CD 1E A4           CMP CKSUM       ;LOW
0768   E3EE D0 95              BNE CKERR
0769   E3F0 20 FD E3           JSR RBYTE
0770   E3F3 CD 1F A4           CMP CKSUM+1     ;HIGH
0771   E3F6 D0 8D              BNE CKERR
0772   E3F8 68                 PLA             ;CORRECT RTN INSTEAD OF WHEREI
0773   E3F9 68                 PLA
0774   E3FA 4C 20 E5           JMP DU13        ;TELL HIM & GO BACK TO COMMAN
0775   E3FD             
0776   E3FD             ;GET 2 ASCII CHRS INTO 1 BYTE
0777   E3FD             ;FOR TAPE (T) GET ONLY ONE HEX CHR
0778   E3FD AD 12 A4    RBYTE  LDA INFLG       ;INPUT DEVICE
0779   E400 C9 54              CMP #'T'
0780   E402 D0 03              BNE RBYT1
0781   E404 4C 93 E9           JMP INALL       ;ONLY ONE BYTE FOR T (INPUT DEV)
0782   E407 20 93 E9    RBYT1  JSR INALL
0783   E40A 20 84 EA           JSR PACK
0784   E40D 20 93 E9           JSR INALL
0785   E410 4C 84 EA           JMP PACK
0786   E413             
0787   E413             ;STORE AND CHECK MEMORY FAIL
0788   E413 20 4E E5    STBYTE JSR CHEKA       ;ADD TO CKSUM
0789   E416 A0 00              LDY #0
0790   E418 20 78 EB           JSR SADDR       ;STORE AND CHCK
0791   E41B F0 03              BEQ *+5
0792   E41D 4C 33 EB           JMP MEMERR      ;MEMORY WRITE ERROR
0793   E420 A0 01              LDY #1          ;INC ADDR+1,ADDR BY 1
0794   E422 4C CD E2           JMP NXTADD
0795   E425             
0796   E425             ;GET ID FROM LAST 2 CHR OF FILENAM
0797   E425 A2 04       GETID  LDX #4          ;SEE WHAT HE GAVE US
0798   E427 BD 2E A4    GID1   LDA NAME,X      ;GET LAST 2 CHARS
0799   E42A CA                 DEX
0800   E42B C9 20              CMP #' '        ;<SPACE> ?
0801   E42D F0 F8              BEQ GID1
0802   E42F BD 2E A4           LDA NAME,X      ;CONVERT TO BINARY
0803   E432 20 84 EA           JSR PACK
0804   E435 BD 2F A4           LDA NAME+1,X
0805   E438 4C 84 EA           JMP PACK        ;ID IS IN STIY
0806   E43B             
0807   E43B             ;***** D COMMAND-GENERAL DUMP *****
0808   E43B             ;TO TTY,PRINTR,USER,X ,TAPE,TAKIM-1
0809   E43B AD 10 A4    DUMP   LDA BKFLG       ;SAVE IT TO USE IT
0810   E43E 48                 PHA
0811   E43F A9 00              LDA #00
0812   E441 8D 10 A4           STA BKFLG
0813   E444 20 24 EA    DU1    JSR CRCK        ;<CR>
0814   E447 20 A3 E7    DU0    JSR FROM        ;GET START ADDR
0815   E44A B0 FB              BCS DU0         ;IN CASE OF ERROR DO IT AGAIN
0816   E44C 20 3E E8           JSR BLANK
0817   E44F 20 10 F9           JSR ADDRS1      ;TRANSFER ADDR TO S1
0818   E452 20 A7 E7    DU1B   JSR TO          ;GET END ADDR
0819   E455 B0 FB              BCS DU1B
0820   E457 20 13 EA           JSR CRLOW
0821   E45A AD 10 A4           LDA BKFLG       ;EXECUTE WHEREO ONLY ONCE
0822   E45D D0 0E              BNE DU1A
0823   E45F 20 71 E8           JSR WHEREO      ;WHICH DEV (OUTFLG)
0824   E462 A9 00              LDA #0
0825   E464 8D 06 01           STA S2          ;CLEAR RECORD COUNT
0826   E467 8D 07 01           STA S2+1
0827   E46A EE 10 A4           INC BKFLG       ;SET FLG
0828   E46D             ;CHCK OUTPUT DEV
0829   E46D AD 13 A4    DU1A   LDA OUTFLG
0830   E470 C9 4B              CMP #'K'        ;TAPE FOR KIM?
0831   E472 D0 04              BNE *+6
0832   E474 68                 PLA             ;PULL FLG
0833   E475 4C 87 E5           JMP DUMPKI      ;YES, GO OUTPUT WHOLE FILE
0834   E478 A0 01              LDY #1          ;OUTPUT ONE MORE BYTE
0835   E47A 20 CD E2           JSR NXTADD
0836   E47D 20 F0 E9    DU2    JSR CRLF
0837   E480 20 07 E9           JSR RCHEK       ;SEE IF HE WANTS TO INTERRUPT
0838   E483             ;CALCULATE # OF BYTES YET TO BE DUMPED
0839   E483 20 4D EB           JSR CLRCK       ;CLEAR CKSUM
0840   E486 AD 1C A4           LDA ADDR        ;END ADDRESS-CURRENT ADDRESS
0841   E489 38                 SEC
0842   E48A ED 1A A4           SBC S1
0843   E48D 48                 PHA             ;# OF BYTES LOW
0844   E48E AD 1D A4           LDA ADDR+1
0845   E491 ED 1B A4           SBC S1+1
0846   E494 D0 09              BNE DU6         ;# OF BYTES HIGH
0847   E496             ;SEE IF 24 OR MORE BYTES TO GO
0848   E496 68                 PLA             ;# BYTES HIGH WAS ZERO
0849   E497 F0 42              BEQ DU10        ;ARE DONE
0850   E499 C9 18              CMP #24         ;# BYTES > 24 ?
0851   E49B 90 05              BCC DU8         ;NO ,ONLY OUTPUT REMAINING BYTES
0852   E49D B0 01              BCS DU7         ;YES ,24 BYTES IN NEXT RECORD
0853   E49F 68          DU6    PLA
0854   E4A0 A9 18       DU7    LDA #24 
0855   E4A2             ;OUTPUT ";" ,# OF BYTES AND SA
0856   E4A2 48          DU8    PHA
0857   E4A3 20 BA E9           JSR SEMI        ;SEMICOLON
0858   E4A6 68                 PLA
0859   E4A7 8D 19 A4           STA COUNT       ;SAVE # OF BYTES
0860   E4AA 20 38 E5           JSR OUTCK       ;OUTPUT # OF BYTES
0861   E4AD AD 1B A4           LDA S1+1        ;OUTPUT ADDRESS
0862   E4B0 20 38 E5           JSR OUTCK
0863   E4B3 AD 1A A4           LDA S1
0864   E4B6 20 38 E5           JSR OUTCK
0865   E4B9             ;OUTPUT DATA
0866   E4B9 20 31 E5    DU9    JSR OUTCKS      ;GET CHAR SPEC BY S1 (NO PAG 0)
0867   E4BC A9 00              LDA #0          ;CLEAR DISP PTR
0868   E4BE 8D 15 A4           STA CURPO2
0869   E4C1 20 5D E5           JSR ADDS1       ;INCR S1+1,S1
0870   E4C4 CE 19 A4           DEC COUNT       ;DECREMENT BYTE COUNT
0871   E4C7 D0 F0              BNE DU9         ;NOT DONE WITH THIS RECORD
0872   E4C9             ;OUTPUT CKSUM
0873   E4C9 AD 1F A4           LDA CKSUM+1
0874   E4CC 20 3B E5           JSR OUTCK1      ;WITHOUT CHEKA
0875   E4CF AD 1E A4           LDA CKSUM
0876   E4D2 20 3B E5           JSR OUTCK1
0877   E4D5 20 66 E5           JSR INCS2       ;INC VERTICAL COUNT
0878   E4D8 4C 7D E4           JMP DU2         ;NEXT RECORD
0879   E4DB             ;ALL DONE
0880   E4DB A0 1C       DU10   LDY #M5-M1      ;PRINT "MORE ?#
0881   E4DD 20 70 E9           JSR KEPR        ;OUTPUT MSG AND GET AN ANSWER
0882   E4E0 C9 59              CMP #'Y'
0883   E4E2 D0 03              BNE *+5
0884   E4E4 4C 44 E4           JMP DU1         ;DUMP MORE DATA
0885   E4E7 68                 PLA             ;RESTORE FLG
0886   E4E8 8D 10 A4           STA BKFLG
0887   E4EB             ;OUTPUT LAST RECORD
0888   E4EB 20 66 E5           JSR INCS2
0889   E4EE 20 BA E9           JSR SEMI        ;OUTPUT ';'
0890   E4F1 A2 02              LDX #2
0891   E4F3 A9 00              LDA #0          ;OUTPUT # OF BYTES (0-LAST RECORD)
0892   E4F5 20 3B E5           JSR OUTCK1
0893   E4F8 AD 07 01    DU10A  LDA S2+1        ;OUTPUT RECORD COUNT
0894   E4FB 20 3B E5           JSR OUTCK1      ;CHECKCUM IS THE SAME
0895   E4FE AD 06 01           LDA S2
0896   E501 20 3B E5           JSR OUTCK1
0897   E504 CA                 DEX
0898   E505 D0 F1              BNE DU10A
0899   E507 20 F0 E9           JSR CRLF
0900   E50A             ;CLOSE TAPE BLOCK IF ACTIVE
0901   E50A AD 13 A4    DU11   LDA OUTFLG
0902   E50D C9 54              CMP #'T'
0903   E50F D0 0F              BNE DU13        ;NO ,BRANCH
0904   E511 AD 37 A4    DU12   LDA TAPTR2      ;TAP OUTPUT BUFF PTR
0905   E514 C9 01              CMP #1          ;BECAUSE FIRST ONE IS BLK CNT
0906   E516 F0 08              BEQ DU13        ;NO DATA TO WRITE
0907   E518 A9 00              LDA #0          ;FILL REST BUFF ZEROS
0908   E51A 20 8B F1           JSR TOBYTE      ;OUTPUT TO BUFF
0909   E51D 4C 11 E5           JMP DU12        ;FINISH THIS BLOCK
0910   E520 20 13 EA    DU13   JSR CRLOW
0911   E523 18                 CLC             ;ENABLE INTERR
0912   E524 A9 00              LDA #T1I        ;T1 FROM FREE RUNNING TO 1 SHOT
0913   E526 8D CB A4           STA ACR
0914   E529 A9 34       DU14   LDA #$34        ;SET BOTH TAPES ON
0915   E52B 8D C0 A4           STA DRB
0916   E52E 4C FE E8           JMP LL
0917   E531             
0918   E531             ;GET CHAR SPECIFIED BY START ADDR (S1)
0919   E531 A9 1A       OUTCKS LDA #S1%256
0920   E533 A0 00              LDY #0
0921   E535 20 58 EB           JSR LDAY
0922   E538             
0923   E538             ;ADD TO CHECKSUM AND PRINT
0924   E538 20 4E E5    OUTCK  JSR CHEKA       ;CHCKSUM
0925   E53B 48          OUTCK1 PHA
0926   E53C AD 13 A4           LDA OUTFLG      ;IF TAPE DO NOT CNVRT
0927   E53F C9 54              CMP #'T'        ;TO TWO ASCII CHRS
0928   E541 D0 04              BNE OUTCK2
0929   E543 68                 PLA
0930   E544 4C 8B F1           JMP TOBYTE      ;OUTPUT TO TAP BUFF
0931   E547 68          OUTCK2 PLA
0932   E548 4C 46 EA           JMP NUMA        ;TWO ASCII REPRE
0933   E54B             
0934   E54B 20 FD E3    CHEKAR JSR RBYTE       ;TWO ASCII CHR---> 1 BYTE
0935   E54E 48          CHEKA  PHA             ;ADD TO CHECKSUM
0936   E54F 18                 CLC
0937   E550 6D 1E A4           ADC CKSUM
0938   E553 8D 1E A4           STA CKSUM
0939   E556 90 03              BCC *+5
0940   E558 EE 1F A4           INC CKSUM+1
0941   E55B 68                 PLA
0942   E55C 60                 RTS
0943   E55D             
0944   E55D             ;ADD ONE TO START ADDR (S1)
0945   E55D EE 1A A4    ADDS1  INC S1
0946   E560 D0 03              BNE ADD1
0947   E562 EE 1B A4           INC S1+1
0948   E565 60          ADD1   RTS
0949   E566             
0950   E566 EE 06 01    INCS2  INC S2          ;INCR VERTICAL COUNT
0951   E569 D0 03              BNE *+5
0952   E56B EE 07 01           INC S2+1
0953   E56E 60                 RTS
0954   E56F             
0955   E56F             ;OPEN A FILE FOR OUTPUT TO TAPE BY BLOCKS
0956   E56F             ;OUTPUT FILENAME GIVEN BY JSR WHEREO TO TAPE BUFF
0957   E56F A2 00       DUMPTA LDX #0          ;INITIALIZE TAPTR
0958   E571 8A                 TXA             ;TO OUTPUT
0959   E572 8E 68 01           STX BLKO        ;BLOCK COUNTER
0960   E575 8E 37 A4           STX TAPTR2      ;TAP OUTPUT BUFF PTR
0961   E578 20 8B F1           JSR TOBYTE      ;TWO START OF FILE CHRS
0962   E57B BD 2E A4    DUMPT1 LDA NAME,X      ;OUTPUT FILENAME
0963   E57E 20 8B F1           JSR TOBYTE
0964   E581 E8                 INX
0965   E582 E0 05              CPX #5
0966   E584 D0 F5              BNE DUMPT1      ;5 FILENAME CHRS ?
0967   E586 60                 RTS
0968   E587             
0969   E587             ;DUMP ROUTINE TO TAPE WITH KIM-1 FORMAT
0970   E587 20 1D F2    DUMPKI JSR TAOSET      ;SET TAPE FOR OUTPUT
0971   E58A A9 2A              LDA #'*'        ;TO EITHER 1 OR 2
0972   E58C 20 4A F2           JSR OUTTAP      ;DIRECTLY TO TAPE
0973   E58F             ;ID FROM LAST 2 CHRS OF FILENAME
0974   E58F 20 25 E4           JSR GETID
0975   E592 20 3B E5           JSR OUTCK1
0976   E595 20 4D EB           JSR CLRCK
0977   E598             ;STARTING ADDR
0978   E598 AD 1A A4           LDA S1
0979   E59B 20 38 E5           JSR OUTCK       ;WITH CHCKSUM
0980   E59E AD 1B A4           LDA S1+1
0981   E5A1 20 38 E5           JSR OUTCK
0982   E5A4             ;OUTPUT DATA
0983   E5A4 20 31 E5    DUK2   JSR OUTCKS      ;OUTPUT CHR SPECIFIED BY S1+1,S1
0984   E5A7 20 5D E5           JSR ADDS1       ;INCREM S1+1,S1
0985   E5AA AD 1A A4           LDA S1          ;CHCK FOR LAST BYTE
0986   E5AD CD 1C A4           CMP ADDR        ;LSB OF END ADDR
0987   E5B0 AD 1B A4           LDA S1+1
0988   E5B3 ED 1D A4           SBC ADDR+1
0989   E5B6 90 EC              BCC DUK2        ;NEXT CHR
0990   E5B8             ;NOW SEND END CHR "/"
0991   E5B8 A9 2F              LDA #'/'
0992   E5BA 20 4A F2           JSR OUTTAP      ;DIRECTLY TO TAPE
0993   E5BD             ;CHECKSUM
0994   E5BD AD 1E A4           LDA CKSUM
0995   E5C0 20 46 EA           JSR NUMA        ;ASCII REPRES
0996   E5C3 AD 1F A4           LDA CKSUM+1
0997   E5C6 20 46 EA           JSR NUMA
0998   E5C9             ;TWO EOT CHRS
0999   E5C9 A9 04              LDA #$04
1000   E5CB 20 4A F2           JSR OUTTAP
1001   E5CE 20 4A F2           JSR OUTTAP
1002   E5D1             ;TURN TAPES ON
1003   E5D1 4C 20 E5           JMP DU13
1004   E5D4             
1005   E5D4             ;***** * COMMAND-ALTER PROGRAM COUNTER *****
1006   E5D4 20 AE EA    CGPC   JSR ADDIN       ;ADDR <=ADDRESS ENTERED FROM KB
1007   E5D7 20 DD E5    CGPC0  JSR CGPC1       ;TRANSFER ADDR TO SAVPC
1008   E5DA 4C 13 EA           JMP CRLOW
1009   E5DD AD 1D A4    CGPC1  LDA ADDR+1      ;THIS WAY MNEMONICS CAN USE IT
1010   E5E0 8D 26 A4           STA SAVPC+1
1011   E5E3 AD 1C A4           LDA ADDR
1012   E5E6 8D 25 A4           STA SAVPC
1013   E5E9 60                 RTS
1014   E5EA             
1015   E5EA             ;***** P COMMAND-ALTER PROCESSOR STATUS *****
1016   E5EA A2 00       CGPS   LDX #0
1017   E5EC F0 0E              BEQ CGALL
1018   E5EE             
1019   E5EE             ;***** A COMMAND-ALTER ACCUMULATOR *****
1020   E5EE A2 01       CGA    LDX #1
1021   E5F0 D0 0A              BNE CGALL
1022   E5F2             
1023   E5F2             ;***** X COMMAND-ALTER X REGISTER *****
1024   E5F2 A2 02       CGX    LDX #2
1025   E5F4 D0 06              BNE CGALL
1026   E5F6             
1027   E5F6             ;***** Y COMMAND-ALTER Y REGISTER *****
1028   E5F6 A2 03       CGY    LDX #3
1029   E5F8 D0 02              BNE CGALL
1030   E5FA             
1031   E5FA             ;***** S COMMAND-ALTER STACK POINTER *****
1032   E5FA A2 04       CGS    LDX #4
1033   E5FC 20 D8 E7    CGALL  JSR EQUAL       ;PRINT PROMPT
1034   E5FF 20 5D EA           JSR RD2         ;GET VALUE FROM KEYBOARD
1035   E602 B0 04              BCS GOERR
1036   E604 9D 20 A4           STA SAVPS,X
1037   E607 60                 RTS
1038   E608 20 D4 E7    GOERR  JSR QM
1039   E60B D0 EF              BNE CGALL
1040   E60D             
1041   E60D             ;***** <SPACE> COMMAND-SHOW NEXT 5 MEMORY LOC *****
1042   E60D 20 3E E8    NXT5   JSR BLANK
1043   E610 A0 04              LDY #4          ;UPDATE ADDR FROM
1044   E612 20 CD E2           JSR NXTADD      ;<M>=XXXX
1045   E615 20 DB E2           JSR WRITAZ      ;OUTPUT ADDRESS
1046   E618 4C 4D E2           JMP MEIN        ;DISPLAY CONTENTS OF NEXT 4 LOCS
1047   E61B             
1048   E61B             ;***** B COMMAND-SET BREAKPOINT ADDR *****
1049   E61B A0 27       BRKA   LDY #M8-M1      ;PRINT "BRK"
1050   E61D 20 AF E7           JSR KEP
1051   E620 20 37 E8    BRK1   JSR PSL1        ;PRINT "/"
1052   E623 20 73 E9           JSR REDOUT      ;GET BREAK NUMBER
1053   E626 38                 SEC
1054   E627 E9 30              SBC #'0'        ;0 THRU 3
1055   E629 30 04              BMI BKERR       ;CHARACTER < '0' -ILLEGAL
1056   E62B C9 04              CMP #4          ;FOUR BRK POINTS
1057   E62D 30 05              BMI BKOK        ;0 < CHARACTER < 4 -OK
1058   E62F 20 D4 E7    BKERR  JSR QM          ;ERROR
1059   E632 D0 EC              BNE BRK1        ;ALLOW REENTRY OF BREAK NUMBER
1060   E634 0A          BKOK   ASL A           ;*2 TO FORM WORD OFFSET
1061   E635 48                 PHA             ;SAVE IT
1062   E636 20 AE EA           JSR ADDIN       ;GET ADDRESS FOR BREAKPOINT
1063   E639 68                 PLA
1064   E63A B0 10              BCS BKO2        ;BAD ADDRESS ENTERED
1065   E63C 20 3D FF           JSR PATC18      ;<CR> & CLR BUFFERS
1066   E63F AA                 TAX             ;# OF BRK
1067   E640 AD 1C A4           LDA ADDR        ;STORE ENTERED ADDR IN BRKPT LIST
1068   E643 9D 00 01           STA BKS,X
1069   E646 AD 1D A4           LDA ADDR+1
1070   E649 9D 01 01           STA BKS+1,X
1071   E64C 60          BKO2   RTS             ;ALL DONE
1072   E64D             
1073   E64D             ;***** ? COMMAND-SHOW CURRENT BREAKPOINTS *****
1074   E64D A0 00       SHOW   LDY #0
1075   E64F 20 13 EA           JSR CRLOW
1076   E652 20 3E E8    SH1    JSR BLANK
1077   E655 BE 00 01           LDX BKS,Y       ;ADDRESS OF NEXT BREAKPOINT
1078   E658 B9 01 01           LDA BKS+1,Y
1079   E65B 20 42 EA           JSR WRAX        ;SHOW BREAKPOINT ADDRESS
1080   E65E C8                 INY
1081   E65F C8                 INY
1082   E660 C0 08              CPY #8
1083   E662 D0 EE              BNE SH1
1084   E664 60                 RTS
1085   E665             
1086   E665             ;***** H COMMAND-SHOW TRACE STACK HISTORY *****
1087   E665             ;LAST FIVE INSTR ADDRS
1088   E665 A2 05       SHIS   LDX #5          ;NUMBER OF ENTRIES
1089   E667 8E 29 A4           STX STIY+2
1090   E66A AC 14 A4    SH11   LDY HISTP       ;POINTER TO LATEST ENTRY
1091   E66D 20 13 EA           JSR CRLOW
1092   E670 20 3E E8           JSR BLANK
1093   E673 B9 2E A4           LDA HIST,Y      ;OUTPUT ADDRESS OF ENTRY
1094   E676 20 46 EA           JSR NUMA
1095   E679 B9 2F A4           LDA HIST+1,Y
1096   E67C 20 46 EA           JSR NUMA
1097   E67F 20 88 E6           JSR NHIS        ;UPDATE POINTER
1098   E682 CE 29 A4           DEC STIY+2
1099   E685 D0 E3              BNE SH11
1100   E687 60                 RTS
1101   E688             
1102   E688             ;UPDATE HISTORY POINTER (PART OF H)
1103   E688 C8          NHIS   INY
1104   E689 C8                 INY
1105   E68A C0 0A              CPY #10
1106   E68C D0 02              BNE NH1
1107   E68E A0 00              LDY #0          ;WRAPAROUND AT 10
1108   E690 8C 14 A4    NH1    STY HISTP
1109   E693 60                 RTS
1110   E694             
1111   E694             ;***** 3 COMMAND-VERIFY TAPES *****
1112   E694             ;VERIFY CKSUM OF BLOCKS
1113   E694 20 48 E8    VECKSM JSR WHEREI      ;GET THE FILE
1114   E697 20 93 E9           JSR INALL       ;CHCK OBJ OR SOURCE
1115   E69A C9 0D              CMP #CR         ;FIRST CHR IS <CR> IF OBJ
1116   E69C D0 0E              BNE VECK2       ;ASSUME SOURCE CODE
1117   E69E 20 93 E9    VECK1  JSR INALL       ;OBJECT FILE
1118   E6A1 C9 3B              CMP #SEMICOLON
1119   E6A3 D0 F9              BNE VECK1       ;IGNORE ALL CHARS BEFORE ';'
1120   E6A5 20 93 E9           JSR INALL
1121   E6A8 4C 60 FF           JMP PAT20
1122   E6AB EA                 NOP
1123   E6AC 20 93 E9    VECK2  JSR INALL       ;IT IS TEXT
1124   E6AF C9 0D              CMP #CR
1125   E6B1 D0 F9              BNE VECK2
1126   E6B3 20 93 E9           JSR INALL       ;NEED TO <CR> TO FINISH
1127   E6B6 C9 0D              CMP #CR
1128   E6B8 D0 F2              BNE VECK2
1129   E6BA 4C 20 E5           JMP DU13        ;CLOSE FILE, IT IS OKAY
1130   E6BD             
1131   E6BD             ;***** 1 COMMAND-TOGGLE TAPE 1 CONTROL *****
1132   E6BD AD C0 A4    TOGTA1 LDA DRB
1133   E6C0 49 10              EOR #$10        ;INVERT PB4
1134   E6C2 8D C0 A4           STA DRB
1135   E6C5 29 10              AND #$10
1136   E6C7 F0 28              BEQ BRK3        ;IF 0 TAPE CNTRL IS ON
1137   E6C9 D0 2F              BNE BRK4        ;IF $10 TAPE CNTRL IS OFF
1138   E6CB             
1139   E6CB             ;***** 2 COMMAND-TOGGLE TAPE 2 CONTROL *****
1140   E6CB AD C0 A4    TOGTA2 LDA DRB
1141   E6CE 49 20              EOR #$20        ;INVERT PB5
1142   E6D0 8D C0 A4           STA DRB
1143   E6D3 29 20              AND #$20
1144   E6D5 F0 1A              BEQ BRK3
1145   E6D7 D0 21              BNE BRK4
1146   E6D9             
1147   E6D9             ;***** V COMMAND-TOGGLE REGISTER DISP FLG *****
1148   E6D9             ;DISPLAY REGIST BEFORE EXEC
1149   E6D9 A2 0E       REGT   LDX #REGF%256
1150   E6DB D0 0A              BNE TOGL
1151   E6DD             
1152   E6DD             ;****** Z COMMAND-TOGGLE DIS TRACE FLG *****
1153   E6DD             ;DISPL NEXT INSTR BEFORE EXEC
1154   E6DD A2 0F       TRACE  LDX #DISFLG%256
1155   E6DF D0 06              BNE TOGL
1156   E6E1             
1157   E6E1             ;***** \ COMMAND-TOGGLE PRINTER FLAG *****
1158   E6E1 A2 11       PRITR  LDX #PRIFLG%256
1159   E6E3 D0 02              BNE TOGL
1160   E6E5             
1161   E6E5             ;***** 4 COMMAND-TOGGLE SOFT BRK ENABL FLG *****
1162   E6E5 A2 10       BRKK   LDX #BKFLG%256
1163   E6E7             
1164   E6E7 BD 00 A4    TOGL   LDA MONRAM,X    ;LOAD FLAG
1165   E6EA F0 0A              BEQ TOGL1       ;FLAG IS OFF ,SO TURN ON
1166   E6EC A9 00              LDA #0          ;FLAG IS ON ,SO TURN OFF
1167   E6EE 9D 00 A4           STA MONRAM,X
1168   E6F1 A0 24       BRK3   LDY #M7-M1      ;PRINT "OFF"
1169   E6F3 4C AF E7    BRK2   JMP KEP
1170   E6F6 38          TOGL1  SEC             ;TURN FLAG ON BY SETTING NON-ZERO
1171   E6F7 7E 00 A4           ROR MONRAM,X    ;FLAG IS ON MSB
1172   E6FA A0 21       BRK4   LDY #M6-M1      ;PRINT "ON"
1173   E6FC D0 F5              BNE BRK2
1174   E6FE             
1175   E6FE             ;***** # COMMAND-CLEAR ALL BREAKS *****
1176   E6FE A9 00       CLRBK  LDA #0          ;STORE ZEROS INTO BRKPT LIST
1177   E700 A2 07              LDX #7
1178   E702 9D 00 01    RS20   STA BKS,X
1179   E705 CA                 DEX
1180   E706 10 FA              BPL RS20
1181   E708 30 E7              BMI BRK3        ;PRINT "OFF"
1182   E70A             
1183   E70A             ;***** K COMMAND-DISASSEMBLE MEMORY *****
1184   E70A A9 2A       KDISA  LDA #'*'        ;GET START ADDRESS
1185   E70C 20 7A E9           JSR OUTPUT
1186   E70F 20 AE EA           JSR ADDIN
1187   E712 B0 F6              BCS KDISA       ;IF ERROR DO IT AGAIN
1188   E714 20 D7 E5           JSR CGPC0       ;GET IT INTO PROG CNTR
1189   E717 20 37 E8           JSR PSL1        ;PRINT "/"
1190   E71A 20 85 E7           JSR GCNT        ;GET COUNT
1191   E71D 20 24 EA           JSR CRCK
1192   E720 4C 2B E7           JMP JD2
1193   E723 20 07 E9    JD1    JSR RCHEK       ;SEE IF HE WANTS TO INTERRUPT
1194   E726 20 90 E7           JSR DONE
1195   E729 F0 17              BEQ JD4
1196   E72B 20 6C F4    JD2    JSR DISASM      ;GO TO DISASSEMBLER
1197   E72E AD 25 A4           LDA SAVPC       ;POINT TO NEXT INSTRUC LOCAT
1198   E731 38                 SEC             ;ONE MORE TO PROG CNTR
1199   E732 65 EA              ADC LENGTH
1200   E734 8D 25 A4           STA SAVPC
1201   E737 90 03              BCC JD3
1202   E739 EE 26 A4           INC SAVPC+1
1203   E73C 20 24 EA    JD3    JSR CRCK        ;<CR>
1204   E73F 4C 23 E7           JMP JD1
1205   E742 60          JD4    RTS
1206   E743             
1207   E743             ;INITIALIZATION TABLE FOR 6522
1208   E743 34 00 37 FF INTAB1 .DB $34,$00,$37,$FF,$25,$FF,$25,$FF
1208   E747 25 FF 25 FF 
1209   E74B             ;INTAB1 .DB $34,$00,$37,$00,$25,$FF,$25,$FF ;djrm ddra=in
1210   E74B FF FF 00 00        .DB $FF,$FF,$00,T1I+T2I
1211   E74F E1 FF 7F           .DB MOFF+PRST+SP12,$FF,$7F
1212   E752             ;       .DB $08,$7F,$7F ; djrm PCR=8
1213   E752             ;INITIALIZATION TABLE FOR 6532
1214   E752 FF FF 00 00 INTAB2 .DB $FF,$FF,$00,$00
1215   E756             ;INITIALIZATION TABLE FOR MONITOR RAM
1216   E756 7B E0 54 E1 INTAB3 .DW NMIV3,IRQV3,OUTDIS
1216   E75A 05 EF 
1217   E75C C7 08 02 CA        .DB $C7,$08,$02,$CA,$03,$80,$00,$00
1217   E760 03 80 00 00 
1218   E764             ;       .DB $00,$80,$0D,$0D,$00,$00,$00
1219   E764 00 00 0D 0D        .DB $00,$00,$0D,$0D,$00,$00,$00 ; prflg=0
1219   E768 00 00 00 
1220   E76B             ;SEE IF WE HIT A SOFT BREAKPOINT (PART OF NMV3)
1221   E76B A2 07       CKB    LDX #7          ;COMPARE BRKPT LIST TO TRAP ADDR
1222   E76D BD 00 01    CKB2   LDA BKS,X       ;GET ADDRESS OF NEXT BREAKPOINT
1223   E770 CA                 DEX
1224   E771 CD 26 A4           CMP SAVPC+1     ;COMPARE TO SAVED PROGRAM COUNTER
1225   E774 D0 0A              BNE CKB1
1226   E776 BD 00 01           LDA BKS,X
1227   E779 CD 25 A4           CMP SAVPC
1228   E77C D0 02              BNE CKB1        ;NO MATCH SO TRY NEXT BREAKPOINT
1229   E77E 38                 SEC             ;MATCH-SET MATCH FLAG
1230   E77F 60                 RTS
1231   E780 CA          CKB1   DEX
1232   E781 10 EA              BPL CKB2        ;MORE TO GO
1233   E783 18                 CLC             ;NO MATCH -RESET MATCH FLAG
1234   E784 60                 RTS
1235   E785             
1236   E785             ;GET # OF LINES COUNT FOR GO-COMMAND,LIST-COMM
1237   E785 20 5D EA    GCNT   JSR RD2
1238   E788 90 02              BCC GCN1
1239   E78A 49 0C              EOR #$0C        ;<SPACE>---> $2C ,<CR>---> $01
1240   E78C 8D 19 A4    GCN1   STA COUNT
1241   E78F 60                 RTS
1242   E790             
1243   E790             ;CHECK IF COUNT HAS REACHED ZERO
1244   E790             ;COUNT=$2C MEANS FOREVER
1245   E790 AD 19 A4    DONE   LDA COUNT       ;IF COUNT=0 WE ARE DONE
1246   E793 C9 2C              CMP #$2C        ;THIS MEANS FOR EVER
1247   E795 F0 09              BEQ DON1        ;SET ACC DIFF FROM ZERO
1248   E797 F8                 SED             ;DECREMENT COUNT IN DECIMAL
1249   E798 38                 SEC
1250   E799 E9 01              SBC #1
1251   E79B D8                 CLD
1252   E79C 8D 19 A4           STA COUNT
1253   E79F 60                 RTS
1254   E7A0 A9 2C       DON1   LDA #$2C
1255   E7A2 60                 RTS
1256   E7A3             
1257   E7A3 A0 00       FROM   LDY #0          ;PRINT "FR="
1258   E7A5 F0 02              BEQ TO1
1259   E7A7             
1260   E7A7 A0 05       TO     LDY #M3-M1      ;PRINT "TO="
1261   E7A9 20 AF E7    TO1    JSR KEP
1262   E7AC 4C B1 EA           JMP ADDNE       ;GET ADDRESS
1263   E7AF             
1264   E7AF             ;PRINT MSG POINTED TO BY Y REG
1265   E7AF B9 00 E0    KEP    LDA M1,Y
1266   E7B2 48                 PHA
1267   E7B3 29 7F              AND #$7F        ;STRIP OFF MSB
1268   E7B5 20 7A E9           JSR OUTPUT
1269   E7B8 C8                 INY
1270   E7B9 68                 PLA
1271   E7BA 10 F3              BPL KEP         ;MSB =1 ?
1272   E7BC 60                 RTS
1273   E7BD             
1274   E7BD             ;PRINT "*" ,BUT NOT TO TAPE RECORDER, NOR LOADING....
1275   E7BD             ;PAPER TAPE OR TO DISPLAY
1276   E7BD AD 12 A4    PROMPT LDA INFLG       ;WHICH DEV (FOR EDITOR)
1277   E7C0 C9 54              CMP #'T'        ;NO PROMPT IF "T" OR "L"
1278   E7C2 4C EF FE           JMP PATC11
1279   E7C5 20 42 E8    PROMP1 JSR TTYTST      ;PROMPT ONLY TO TTY
1280   E7C8 D0 05              BNE PR2         ;BRANCH ON KB
1281   E7CA A9 2A              LDA #'*'
1282   E7CC 4C 7A E9    PR1    JMP OUTPUT      ;ONLY TO TERMIN
1283   E7CF A9 0D       PR2    LDA #CR         ;CLR DISP
1284   E7D1 4C 05 EF           JMP OUTDIS
1285   E7D4             
1286   E7D4 A9 3F       QM     LDA #'?'        ;PRINT "?"
1287   E7D6 D0 F4              BNE PR1
1288   E7D8             
1289   E7D8 A9 3D       EQUAL  LDA #'='        ;PRINT "="
1290   E7DA D0 F0              BNE PR1
1291   E7DC             
1292   E7DC             ;ON DELETE KEY OUTPUT SLASH IF TTY & ....
1293   E7DC             ;BACK UP CURSOR IF KB (MAY NEED SCROLLING)
1294   E7DC 20 42 E8    PSLS   JSR TTYTST      ;TTY OR KB ?
1295   E7DF F0 56              BEQ PSL1        ;BRANCH ON TTY
1296   E7E1 20 9E EB           JSR PHXY        ;SAVE X,Y
1297   E7E4 CE 15 A4           DEC CURPO2      ;DECR DISP PNTR
1298   E7E7 AE 15 A4           LDX CURPO2
1299   E7EA E0 14              CPX #20         ;IF MORE THAN 20 JUST SCROLL THEM
1300   E7EC B0 0D              BCS PSL0
1301   E7EE A9 20              LDA #' '        ;< 20 ,SO CLR CUR
1302   E7F0 20 02 EF           JSR OUTDP1
1303   E7F3 CE 15 A4           DEC CURPO2
1304   E7F6 4C 02 E8           JMP PSL00
1305   E7F9 EA                 NOP
1306   E7FA EA                 NOP
1307   E7FB 20 F8 FE    PSL0   JSR PATC12      ;CLR PRIFLG
1308   E7FE CA                 DEX             ;ONE CHR LESS
1309   E7FF 20 2F EF           JSR OUTD2A      ;SCROLL THEM
1310   E802 AD 15 A4    PSL00  LDA CURPO2      ;DISBUF---> PRIBUFF
1311   E805 C9 15              CMP #21
1312   E807 90 13              BCC PSL0B
1313   E809 C9 29              CMP #41
1314   E80B 90 07              BCC PSL0A
1315   E80D A0 28              LDY #40         ;CHR 40-59
1316   E80F E9 28              SBC #40 
1317   E811 4C 1E E8           JMP PSL0C
1318   E814 A0 14       PSL0A  LDY #20         ;CHR 20-39
1319   E816 38                 SEC
1320   E817 E9 14              SBC #20 
1321   E819 4C 1E E8           JMP PSL0C
1322   E81C A0 00       PSL0B  LDY #0          ;CHR 00-19
1323   E81E 8D 16 A4    PSL0C  STA CURPOS
1324   E821 A2 00              LDX #0
1325   E823 B9 38 A4    PSL0D  LDA DIBUFF,Y    ;TRANSFER THEM
1326   E826 9D 60 A4           STA IBUFM,X
1327   E829 E8                 INX
1328   E82A C8                 INY
1329   E82B EC 16 A4           CPX CURPOS      ;PRI PNTR
1330   E82E 90 F3              BCC PSL0D
1331   E830 20 38 F0           JSR OUTPR       ;CLR PRI BUFF TO THE RIGHT
1332   E833 20 AC EB           JSR PLXY        ;RESTORE X,Y
1333   E836 60                 RTS
1334   E837 A9 2F       PSL1   LDA #'/'        ;PRINT "/"
1335   E839 D0 91              BNE PR1
1336   E83B             
1337   E83B 20 3E E8    BLANK2 JSR BLANK       ;TWO SPACES
1338   E83E A9 20       BLANK  LDA #' '
1339   E840 D0 8A              BNE PR1
1340   E842             
1341   E842             ;CHECK TTY/KBD SWITCH (Z=1 FOR TTY)
1342   E842 A9 08       TTYTST LDA #$08        ;CHECK IF TTY OR KB
1343   E844 2C C0 A4           BIT DRB         ;TTY OR KB SWICTH =PB3
1344   E847 60                 RTS
1345   E848             
1346   E848             ;WHERE IS INPUT COMING FROM?
1347   E848             ;SET UP FOR INPUT ACTIVE DEVICE
1348   E848 A0 2A       WHEREI LDY #M9-M1      ;PRINT "IN"
1349   E84A 20 70 E9           JSR KEPR        ;OUTPUT MSG AND INPUT CHR
1350   E84D 8D 12 A4           STA INFLG
1351   E850 C9 54              CMP #'T'
1352   E852 D0 08              BNE WHE1
1353   E854 A2 00              LDX #0          ;FOR INPUT FILE FLG
1354   E856 20 A2 E8           JSR FNAM        ;OPEN FILE FOR TAPE (1 OR 2)
1355   E859 4C 2F E3           JMP LOADTA      ;GET FILE
1356   E85C C9 4B       WHE1   CMP #'K'        ;TAPE WITH KIM FORMAT
1357   E85E D0 08              BNE WHE2
1358   E860 A2 00              LDX #0          ;FOR INPUT FILE FLG
1359   E862 20 A2 E8           JSR FNAM        ;OPEN FILE FOR TAP (1 OR 2)
1360   E865 4C A4 E3           JMP LOADKI      ;THE WHOLE FILE
1361   E868 C9 55       WHE2   CMP #'U'        ;USER RTN?
1362   E86A D0 04              BNE WHE3
1363   E86C 18                 CLC             ;SET FLG FOR INITIALIZATION
1364   E86D 6C 08 01           JMP (UIN)       ;USER INPUT SETUP
1365   E870 60          WHE3   RTS
1366   E871             
1367   E871             ;WHERE IS OUTPUT GOING TO?
1368   E871             ;SET UP FOR OUTPUT ACTIVE DEVICE
1369   E871 A0 2D       WHEREO LDY #M10-M1     ;PRINT "OUT"
1370   E873 20 70 E9           JSR KEPR        ;OUTPUT MSG & INPUT CHR
1371   E876 8D 13 A4           STA OUTFLG      ;DEVICE FLG
1372   E879             ;TAPES
1373   E879 C9 54              CMP #'T'
1374   E87B D0 08              BNE WHRO1
1375   E87D A2 01              LDX #1          ;FOR OUTPUT FILE FLG
1376   E87F 20 A2 E8           JSR FNAM        ;FILENAME & TAPE (1 OR 2)
1377   E882 4C 6F E5           JMP DUMPTA      ;INITIALIZE FILE
1378   E885 C9 4B       WHRO1  CMP #'K'        ;TAPE WITH KIM FORMAT
1379   E887 D0 05              BNE WHRO2
1380   E889 A2 01              LDX #1          ;FOR OUTPUT FILE FLG
1381   E88B 4C A2 E8           JMP FNAM
1382   E88E             ;PRINTER
1383   E88E C9 50       WHRO2  CMP #'P'        ;PRINTER?
1384   E890 D0 05              BNE WHRO3
1385   E892 A9 0D              LDA #CR         ;OUTPUT LAST LINE IF ON
1386   E894 4C 00 F0           JMP OUTPRI      ;& CLEAR PRINTER PTR
1387   E897             ;USER SET UP
1388   E897 C9 55       WHRO3  CMP #'U'        ;USR RTN?
1389   E899 D0 04              BNE WHRO4
1390   E89B 18                 CLC             ;CLR FLG FOR INITIALIZATION
1391   E89C 6C 0A 01           JMP (UOUT)      ;USER OUTPUT SETUP
1392   E89F             ;ANY OTHER
1393   E89F 4C 13 EA    WHRO4  JMP CRLOW
1394   E8A2             
1395   E8A2             ;GET FILE NAME & TAPE UNIT
1396   E8A2 20 9E EB    FNAM   JSR PHXY        ;SAVE IN/OUT FLG (X)
1397   E8A5 20 CF E8           JSR NAMO        ;GET NAME
1398   E8A8 A0 50       WHICHT LDY #TMSG2-M1   ;PRINT "T="
1399   E8AA 20 70 E9           JSR KEPR        ;OUTPUT MSG & INPUT CHR
1400   E8AD C9 0D              CMP #CR
1401   E8AF D0 02              BNE TAP1
1402   E8B1 A9 31              LDA #'1'        ;<CR> ==> TAPE 1
1403   E8B3 38          TAP1   SEC
1404   E8B4 E9 31              SBC #'1'        ;SUBTRACT 31
1405   E8B6 30 04              BMI TAP2        ;ONLY 1,2 OK
1406   E8B8 C9 02              CMP #2
1407   E8BA 30 06              BMI TAP3        ;OK
1408   E8BC 20 D4 E7    TAP2   JSR QM          ;ERROR
1409   E8BF 4C A8 E8           JMP WHICHT
1410   E8C2 20 AC EB    TAP3   JSR PLXY        ;IN/OUT FLG
1411   E8C5 9D 34 A4           STA TAPIN,X     ;IF X=0 --> TAPIN (TAPE 1 OR 2)
1412   E8C8 20 83 FE           JSR CUREAD      ;GET ANYTHING
1413   E8CB 20 24 EA           JSR CRCK        ;<CR>
1414   E8CE 60                 RTS             ;IF X=1 --> TAPOUT (TAPE 1 OR 2)
1415   E8CF             
1416   E8CF             ;GET FILE NAME
1417   E8CF A0 4D       NAMO   LDY #TMSG1-M1   ;PRINT "F="
1418   E8D1 20 AF E7           JSR KEP         ;NO CRLF
1419   E8D4 A0 00              LDY #0
1420   E8D6 20 5F E9    NAMO1  JSR RDRUP       ;GET CHAR
1421   E8D9 C9 0D              CMP #CR         ;DONE?
1422   E8DB F0 0C              BEQ NAMO2
1423   E8DD C9 20              CMP #' '
1424   E8DF F0 08              BEQ NAMO2
1425   E8E1 99 2E A4           STA NAME,Y      ;STORE
1426   E8E4 C8                 INY
1427   E8E5 C0 05              CPY #5
1428   E8E7 D0 ED              BNE NAMO1
1429   E8E9             ;BLANK REST OF NAME
1430   E8E9 A9 20       NAMO2  LDA #' '
1431   E8EB C0 05       NAMO3  CPY #5
1432   E8ED F0 06              BEQ NAMO4
1433   E8EF 99 2E A4           STA NAME,Y
1434   E8F2 C8                 INY
1435   E8F3 D0 F6              BNE NAMO3
1436   E8F5 4C 3E E8    NAMO4  JMP BLANK
1437   E8F8             
1438   E8F8             ;SET INPUT FROM TERMINAL (KB OR TTY)
1439   E8F8 A9 0D       INLOW  LDA #CR
1440   E8FA 8D 12 A4           STA INFLG
1441   E8FD 60                 RTS
1442   E8FE             
1443   E8FE             ;SET I/O  TO TERMINAL (KB & D/P ,OR TTY)
1444   E8FE 20 F8 E8    LL     JSR INLOW
1445   E901             
1446   E901             ;SET OUTPUT TO TERMINAL (D/P OR TTY)
1447   E901 A9 0D       OUTLOW LDA #CR
1448   E903 8D 13 A4           STA OUTFLG
1449   E906 60          OUTL1  RTS
1450   E907             
1451   E907             ;ON <ESCAPE> STOPS EXECUTION & BACK TO MONITOR
1452   E907             ;ON <SPACE> STOPS EXECUTION & CONTINUE ON ANY OTHER KEY
1453   E907 20 42 E8    RCHEK  JSR TTYTST      ;TTY OR KB ?
1454   E90A F0 1A              BEQ RCHTTY
1455   E90C 20 EF EC           JSR ROONEK      ;CLR MSK & GET A KEY
1456   E90F 88                 DEY
1457   E910 30 13              BMI RCH3        ;RTN ON NO KEY
1458   E912 A2 00              LDX #0
1459   E914 20 82 EC           JSR GETK2       ;GET THE KEY
1460   E917 C9 1B              CMP #ESCAPE
1461   E919 F0 3B              BEQ REA1        ;TO COMMAN & SET I/O TO TERMINAL
1462   E91B C9 20              CMP #' '        ;WAIT KEY
1463   E91D D0 06              BNE RCH3        ;RTN, IGNORE OTHER KEYS
1464   E91F 20 EF EC    RCH2   JSR ROONEK      ;WAIT TILL HE RELEASE IT &
1465   E922 88                 DEY             ;QUIT WAITING ON NEXT KEY
1466   E923 30 FA              BMI RCH2
1467   E925 60          RCH3   RTS
1468   E926 70 13       RCHTTY BVS RCHT1       ;TTI=PB6 ---> V (OVERFL FLG)
1469   E928 2C C0 A4    RCHT2  BIT DRB         ;WAIT TILL HE RELEASE IT
1470   E92B 50 FB              BVC RCHT2
1471   E92D 20 0F EC           JSR DELAY
1472   E930 20 DB EB           JSR GETTTY      ;GET A CHAR
1473   E933 C9 1B              CMP #ESCAPE
1474   E935 F0 1F              BEQ REA1        ;TO COMMAN
1475   E937 C9 20              CMP #' '
1476   E939 D0 ED              BNE RCHT2
1477   E93B 60          RCHT1  RTS             ;QUIT WAITING ON ANY KEY
1478   E93C             
1479   E93C             ;READ ONE CHAR FROM KB/TTY & PRESERVE X,Y
1480   E93C 20 9E EB    READ   JSR PHXY        ;PUSH X & Y
1481   E93F 20 42 E8           JSR TTYTST      ;TTY OR KB ?
1482   E942 D0 06              BNE READ1
1483   E944 20 DB EB           JSR GETTTY
1484   E947 4C 4D E9           JMP READ2
1485   E94A 20 40 EC    READ1  JSR GETKEY
1486   E94D 20 AC EB    READ2  JSR PLXY        ;PULL X & Y
1487   E950 29 7F              AND #$7F        ;STRIP PARITY
1488   E952 C9 1B              CMP #ESCAPE
1489   E954 D0 E5              BNE RCHT1       ;RTN
1490   E956 20 3D FF    REA1   JSR PATC18      ;<CR> & CLR BUFFERS
1491   E959 4C A1 E1           JMP COMIN       ;BOTH I/O TO TERMINAL
1492   E95C             
1493   E95C             ;READ WITH RUBOUT OR DELETE POSSIBLE
1494   E95C 20 DC E7    RB2    JSR PSLS        ;SLASH OR BACK SPACE
1495   E95F 20 83 FE    RDRUP  JSR CUREAD
1496   E962 C9 08              CMP #RUB        ;RUBOUT
1497   E964 F0 04              BEQ RDR1
1498   E966 C9 7F              CMP #$7F        ;ALSO DELETE
1499   E968 D0 0C              BNE RED2        ;ECHO IF NOT <CR>
1500   E96A             ;RUBOUT TO DELETE CHAR
1501   E96A 88          RDR1   DEY
1502   E96B 10 EF              BPL RB2
1503   E96D C8                 INY
1504   E96E F0 EF              BEQ RDRUP
1505   E970             
1506   E970             ;OUTPUT MESSAGE THEN INPUT CHR
1507   E970 20 AF E7    KEPR   JSR KEP
1508   E973             
1509   E973             ;READ AND ECHO A CHAR FROM KB OR TTY
1510   E973 20 83 FE    REDOUT JSR CUREAD
1511   E976 C9 0D       RED2   CMP #CR
1512   E978 F0 C1              BEQ RCHT1       ;DO NOT ECHO <CR>
1513   E97A             
1514   E97A             ;OUTPUTS A CHAR TO EITHER TTY OR D/P
1515   E97A 48          OUTPUT PHA             ;SAVE IT
1516   E97B AD 11 A4    OUT1   LDA PRIFLG      ;IF LSB=1 OUTPUT ONLY TO DISP
1517   E97E 29 01              AND #$01
1518   E980 F0 04              BEQ OUT1A
1519   E982 68                 PLA
1520   E983 4C 02 EF           JMP OUTDP1      ;ONLY TO DISPL
1521   E986 20 42 E8    OUT1A  JSR TTYTST      ;TTY OR KB ?
1522   E989 D0 04              BNE OUT2
1523   E98B 68                 PLA
1524   E98C 4C A8 EE           JMP OUTTTY      ;TO TTY
1525   E98F 68          OUT2   PLA
1526   E990 4C FC EE           JMP OUTDP       ;TO DISP & PRINTR
1527   E993             
1528   E993             ;GET A CHR FROM CURRENT INPUT DEVICE (SET ON INFLG)
1529   E993 AD 12 A4    INALL  LDA INFLG
1530   E996 C9 54              CMP #'T'
1531   E998 D0 03              BNE *+5
1532   E99A 4C 3B ED           JMP TIBYTE      ;CHAR FROM BUFFER
1533   E99D C9 4B              CMP #'K'        ;WITH KIM FORMAT
1534   E99F D0 03              BNE *+5
1535   E9A1 4C 29 EE           JMP GETTAP      ;DIRECTLY FROM TAPE
1536   E9A4 C9 4D              CMP #'M'        ;MEMORY FOR ASM?
1537   E9A6 D0 03              BNE *+5
1538   E9A8 4C D0 FA           JMP MREAD
1539   E9AB C9 55              CMP #'U'        ;USER ROUTINE?
1540   E9AD D0 04              BNE *+6
1541   E9AF 38                 SEC             ;SET FLG FOR NORMAL INPUT
1542   E9B0 6C 08 01           JMP (UIN)
1543   E9B3 C9 4C              CMP #'L'        ;TO LOAD PPR TAPE
1544   E9B5 D0 A8              BNE RDRUP
1545   E9B7 4C DB EB           JMP GETTTY      ; FROM TTY
1546   E9BA             
1547   E9BA             ;.FILE A2
1548   E9BA A9 3B       SEMI   LDA #SEMICOLON  ;OUTPUT A ";"
1549   E9BC             ;WRITE A CHR TO OUTPUT DEVICE (SET ON OUTFLG)
1550   E9BC 48          OUTALL PHA
1551   E9BD AD 13 A4           LDA OUTFLG
1552   E9C0             ;TAPE BY BLOCKS
1553   E9C0 C9 54              CMP #'T'        ;TAPES ?
1554   E9C2 D0 04              BNE OUTA1
1555   E9C4 68                 PLA
1556   E9C5 4C 8B F1           JMP TOBYTE      ;OUTPUT ONE CHAR TO TAPE BUFFER
1557   E9C8             ;TAPE KIM FORMAT
1558   E9C8 C9 4B       OUTA1  CMP #'K'        ;KIM-1 ?
1559   E9CA D0 04              BNE OUTA2
1560   E9CC 68                 PLA
1561   E9CD 4C 4A F2           JMP OUTTAP
1562   E9D0             ;PRINTER
1563   E9D0 C9 50       OUTA2  CMP #'P'        ;PRINTER ?
1564   E9D2 D0 0E              BNE OUTA3
1565   E9D4 38                 SEC             ;TURN PRINTER ON
1566   E9D5 6E 11 A4           ROR PRIFLG
1567   E9D8 68                 PLA
1568   E9D9 08                 PHP
1569   E9DA 20 00 F0           JSR OUTPRI
1570   E9DD 28                 PLP
1571   E9DE 2E 11 A4           ROL PRIFLG      ;RESTORE FLG
1572   E9E1 60                 RTS
1573   E9E2             ;USER DEFINED
1574   E9E2 C9 55       OUTA3  CMP #'U'        ;USER ROUTINE?
1575   E9E4 D0 04              BNE OUTA4
1576   E9E6 38                 SEC             ;SET FLG FOR NORMAL OUTPUT
1577   E9E7 6C 0A 01           JMP (UOUT)      ;YES
1578   E9EA             ;NOWHERE OR TO TTY ,D/P
1579   E9EA C9 58       OUTA4  CMP #'X'        ;EAT IT?
1580   E9EC D0 8D              BNE OUT1        ;OUTPUT TO TTY OR D/P
1581   E9EE 68                 PLA
1582   E9EF 60                 RTS
1583   E9F0             
1584   E9F0             ;THIS ROUTINE OUTPUTS A CRLF TO ANY OUTPUT DEV
1585   E9F0             ;LF AND NULL IS SENT ONLY TO TTY
1586   E9F0 A9 0D       CRLF   LDA #CR
1587   E9F2 20 BC E9           JSR OUTALL
1588   E9F5 20 42 E8           JSR TTYTST      ;TTY OR KB ?
1589   E9F8 D0 29              BNE CR2J
1590   E9FA AD 13 A4           LDA OUTFLG      ;LF ONLY TO TTY
1591   E9FD C9 54              CMP #'T'
1592   E9FF F0 22              BEQ CR2J
1593   EA01 C9 4B              CMP #'K'
1594   EA03 F0 1E              BEQ CR2J
1595   EA05 C9 50              CMP #'P'
1596   EA07 F0 1A              BEQ CR2J
1597   EA09 A9 0A              LDA #LF
1598   EA0B 20 BC E9           JSR OUTALL
1599   EA0E A9 FF              LDA #NULLC
1600   EA10 4C BC E9           JMP OUTALL
1601   EA13             
1602   EA13             ;CRLF TO TERMINAL (TTY OR D/P) ONLY
1603   EA13 48          CRLOW  PHA             ;SAVE A
1604   EA14 AD 13 A4           LDA OUTFLG
1605   EA17 48                 PHA
1606   EA18 20 01 E9           JSR OUTLOW
1607   EA1B 20 F0 E9           JSR CRLF
1608   EA1E 68                 PLA
1609   EA1F 8D 13 A4           STA OUTFLG
1610   EA22 68                 PLA
1611   EA23 60          CR2J   RTS
1612   EA24             
1613   EA24             ;OUTPUT <CR> TO TTY IF SWITCH ON TTY & INFLG NOT L
1614   EA24             ;DONT CLR DISPLAY BUT CLEARS PNTRS FOR NEXT LINE
1615   EA24             ;IF PRNTR HAS PRINTED ON 21RST CHR DONT OUTPUT <CR>
1616   EA24 AD 12 A4    CRCK   LDA INFLG       ;NO <CR> IF "L"
1617   EA27 C9 4C              CMP #'L'
1618   EA29 D0 01              BNE CRCK1
1619   EA2B 60                 RTS
1620   EA2C 20 42 E8    CRCK1  JSR TTYTST      ;CHECK IF TTY OR KB
1621   EA2F F0 E2              BEQ CRLOW       ;BRNCH IF TTY
1622   EA31             ;IF PRINTR PTR=0 ,DO NOT CLR PRI
1623   EA31 AD 16 A4           LDA CURPOS
1624   EA34 F0 05              BEQ CRCK2       ;IF PTR=0 ,NO <CR>
1625   EA36 A9 0D              LDA #CR
1626   EA38 20 00 F0           JSR OUTPRI
1627   EA3B A9 8D       CRCK2  LDA #CR+$80     ;<CR> ONLY FOR TV
1628   EA3D 4C 02 EF           JMP OUTDP1
1629   EA40 EA                 NOP
1630   EA41 EA                 NOP
1631   EA42             
1632   EA42             ;WRITE A THEN X IN ASCII TO THE OUTPUT DEV
1633   EA42 20 46 EA    WRAX   JSR NUMA
1634   EA45 8A                 TXA
1635   EA46             
1636   EA46             ;PRINT ONE BYTE=TWO ASCII CHARS TO OUTPUT DEVICE
1637   EA46 48          NUMA   PHA
1638   EA47 4A                 LSR A
1639   EA48 4A                 LSR A
1640   EA49 4A                 LSR A
1641   EA4A 4A                 LSR A
1642   EA4B 20 51 EA           JSR NOUT
1643   EA4E 68                 PLA
1644   EA4F 29 0F              AND #$F
1645   EA51 18          NOUT   CLC
1646   EA52 69 30              ADC #'0'
1647   EA54 C9 3A              CMP #'9'+1
1648   EA56 90 02              BCC LT10
1649   EA58 69 06              ADC #6          ;CARRY IS SET
1650   EA5A 4C BC E9    LT10   JMP OUTALL
1651   EA5D             
1652   EA5D             ;READ TWO CHR & PACK THEM INTO ONE BYTE
1653   EA5D             ;PART OF ALTER MEMORY , / COMM
1654   EA5D 20 73 E9    RD2    JSR REDOUT
1655   EA60 C9 0D              CMP #CR         ;<CR>?
1656   EA62 F0 17              BEQ RSPAC
1657   EA64 C9 20              CMP #' '        ;FOR MEMORY ALTER
1658   EA66 F0 13              BEQ RSPAC
1659   EA68 C9 2E              CMP #'.'        ;TREAT "." AS <SPACE>
1660   EA6A D0 04              BNE RD1
1661   EA6C A9 20              LDA #' '
1662   EA6E D0 0B              BNE RSPAC
1663   EA70 20 84 EA    RD1    JSR PACK
1664   EA73 B0 06              BCS RSPAC
1665   EA75 20 73 E9           JSR REDOUT
1666   EA78 4C 84 EA           JMP PACK
1667   EA7B             ;WAS SPACE OR <CR>
1668   EA7B 38          RSPAC  SEC
1669   EA7C 60                 RTS
1670   EA7D             
1671   EA7D             ;CONVERT ACC IN ASCII TO ACC IN HEX (4 MSB=0)
1672   EA7D 48          HEX    PHA             ;SAVE A
1673   EA7E A9 00              LDA #0          ;CLEAR STIY IF HEX
1674   EA80 8D 29 A4           STA STIY+2      ;BECAUSE ONLY ONCE
1675   EA83 68                 PLA
1676   EA84             ;PACK TWO ASCII INTO ONE HEX (CALL SUBR TWO TIMES)
1677   EA84             ;RESULT IS GIVEN ON ACC WITH FIRST CHR INTO 4 MSB
1678   EA84 C9 30       PACK   CMP #'0'        ;< 30 ?
1679   EA86 90 F3              BCC RSPAC
1680   EA88 C9 47              CMP #'F'+1      ; > 47 ?
1681   EA8A B0 EF              BCS RSPAC
1682   EA8C C9 3A              CMP #'9'+1      ; < $10
1683   EA8E 90 06              BCC PAK1
1684   EA90 C9 40              CMP #'A'-1      ; > $10 ?
1685   EA92 90 E7              BCC RSPAC
1686   EA94 69 08              ADC #8          ;ADD 9 IF LETTER (C IS SET)
1687   EA96 2A          PAK1   ROL A           ;SHIFT A 4 TIMES
1688   EA97 2A                 ROL A
1689   EA98 2A                 ROL A
1690   EA99 2A                 ROL A
1691   EA9A 8E 2D A4           STX CPIY+3      ;SAVE X
1692   EA9D A2 04              LDX #4
1693   EA9F 2A          PAK2   ROL A           ;TRANSFER A TO STIY
1694   EAA0 2E 29 A4           ROL STIY+2      ; THRU CARRY
1695   EAA3 CA                 DEX
1696   EAA4 D0 F9              BNE PAK2
1697   EAA6 AE 2D A4           LDX CPIY+3      ;REST X
1698   EAA9 AD 29 A4           LDA STIY+2
1699   EAAC 18                 CLC
1700   EAAD 60                 RTS
1701   EAAE             
1702   EAAE             ;GET FOUR BYTE ADDR ,TAKE LAST FOUR CHR TO...
1703   EAAE             ;CALCULATE ADDR .ALLOW DELETE ALSO
1704   EAAE 20 D8 E7    ADDIN  JSR EQUAL
1705   EAB1 AD 15 A4    ADDNE  LDA CURPO2      ;SAVE POSITION
1706   EAB4 48                 PHA
1707   EAB5 A0 00              LDY #0
1708   EAB7 20 5F E9    ADDN1  JSR RDRUP
1709   EABA C9 0D              CMP #CR
1710   EABC F0 09              BEQ ADDN2
1711   EABE C9 20              CMP #' '
1712   EAC0 F0 05              BEQ ADDN2
1713   EAC2 C8                 INY
1714   EAC3 C0 0B              CPY #11         ;ALLOW 10
1715   EAC5 90 F0              BCC ADDN1
1716   EAC7 68          ADDN2  PLA
1717   EAC8 8D 2D A4           STA CPIY+3      ;SAVE
1718   EACB C0 00              CPY #0          ;IF FIRST CHR PUT DEFAULT VALUES
1719   EACD D0 0D              BNE ADDN3
1720   EACF A9 02              LDA #$02
1721   EAD1 8D 1D A4           STA ADDR+1      ;DEFAULT OF 0200
1722   EAD4 8D 1E A4           STA CKSUM       ;DEFAULT
1723   EAD7 8C 1C A4           STY ADDR
1724   EADA 18                 CLC
1725   EADB 60                 RTS
1726   EADC A2 00       ADDN3  LDX #0
1727   EADE 88                 DEY             ;Y-4
1728   EADF 88                 DEY
1729   EAE0 88                 DEY
1730   EAE1 88                 DEY
1731   EAE2 10 13              BPL ADDN5       ;BRANCH IF > 4 CHR
1732   EAE4 98                 TYA
1733   EAE5 49 FF              EOR #$FF
1734   EAE7 A8                 TAY             ;# OF LEADING 0
1735   EAE8 A9 30       ADDN4  LDA #$30
1736   EAEA 9D 1C A4           STA ADDR,X
1737   EAED E8                 INX
1738   EAEE 88                 DEY
1739   EAEF 10 F7              BPL ADDN4
1740   EAF1 AC 2D A4           LDY CPIY+3      ;NOW THE CHR
1741   EAF4 4C FD EA           JMP ADDN6
1742   EAF7 98          ADDN5  TYA             ;PUT CHR
1743   EAF8 18                 CLC
1744   EAF9 6D 2D A4           ADC CPIY+3
1745   EAFC A8                 TAY
1746   EAFD B9 38 A4    ADDN6  LDA DIBUFF,Y    ;FROM DISP BUFF
1747   EB00 9D 1C A4           STA ADDR,X
1748   EB03 C8                 INY
1749   EB04 E8                 INX
1750   EB05 E0 04              CPX #4
1751   EB07 D0 F4              BNE ADDN6
1752   EB09 A2 01              LDX #1
1753   EB0B A0 00              LDY #0          ;CNVRT CHR TO HEX
1754   EB0D B9 1C A4    ADDN7  LDA ADDR,Y
1755   EB10 20 7D EA           JSR HEX
1756   EB13 B0 16              BCS ADDN8
1757   EB15 C8                 INY
1758   EB16 B9 1C A4           LDA ADDR,Y
1759   EB19 C8                 INY
1760   EB1A 20 84 EA           JSR PACK        ;PACK TWO CHRS INTO 1 BYTE
1761   EB1D B0 0C              BCS ADDN8       ;BRCNH IF ERROR
1762   EB1F 9D 1C A4           STA ADDR,X
1763   EB22 CA                 DEX
1764   EB23 10 E8              BPL ADDN7
1765   EB25 E8                 INX             ;X=0
1766   EB26 8E 1E A4           STX CKSUM       ;TO INDICATE WE GOT AN ADDR
1767   EB29 18                 CLC             ;NO INVALID CHARS
1768   EB2A 60                 RTS
1769   EB2B 20 94 E3    ADDN8  JSR CKER00      ;OUTPUT ERROR MSG
1770   EB2E 20 24 EA           JSR CRCK        ;<CR>
1771   EB31 38                 SEC             ;SET CARRY FOR INVALID CHR
1772   EB32 60                 RTS
1773   EB33             
1774   EB33             ;MEMORY FAIL TO WRITE MSG & SPECIFIC ADDRESS
1775   EB33 20 24 EA    MEMERR JSR CRCK
1776   EB36 20 CD E2           JSR NXTADD      ;ADD Y TO ADDR+1,ADDR
1777   EB39 A0 31              LDY #M11-M1     ;PRINT "MEM FAIL"
1778   EB3B 20 AF E7           JSR KEP         ;FAIL MSG
1779   EB3E 20 DB E2           JSR WRITAZ      ;PRINT ADDR+1 , ADDR
1780   EB41 4C A1 E1           JMP COMIN
1781   EB44             
1782   EB44             ;CLEAR DISPLAY & PRINTER POINTERS
1783   EB44 A9 00       CLR    LDA #0
1784   EB46 8D 15 A4           STA CURPO2      ;DISP PNTR
1785   EB49 8D 16 A4           STA CURPOS      ;PRINTR PNTR
1786   EB4C 60                 RTS
1787   EB4D             
1788   EB4D             ;CLEAR CKSUM
1789   EB4D A9 00       CLRCK  LDA #0
1790   EB4F 8D 1F A4           STA CKSUM+1
1791   EB52 8D 1E A4           STA CKSUM
1792   EB55 60                 RTS
1793   EB56             
1794   EB56             ;CODE FOR PAGE ZERO SIMULATION
1795   EB56             ;SUBR LDAY-SIMULATES LDA (N),Y INSTR WITHOUT PAG 0
1796   EB56             ;BY PUTTING INDIR ADDR INTO RAM & THEN EXEC LDA NM,Y
1797   EB56 A9 25       PCLLD  LDA #SAVPC%256      ;FOR DISASSEMBLER
1798   EB58 8C 2D A4    LDAY   STY CPIY+3      ;SAVE Y
1799   EB5B A8                 TAY
1800   EB5C B9 00 A4           LDA MONRAM,Y    ;MONRAM=MONITOR RAM
1801   EB5F 8D 2B A4           STA LDIY+1
1802   EB62 B9 01 A4           LDA MONRAM+1,Y
1803   EB65 8D 2C A4           STA LDIY+2
1804   EB68 AC 2D A4           LDY CPIY+3      ;REST Y
1805   EB6B A9 B9              LDA #$B9        ;INST FOR LDA NM,Y
1806   EB6D 8D 2A A4           STA LDIY
1807   EB70 A9 60              LDA #$60        ;RTS
1808   EB72 8D 2D A4           STA LDIY+3
1809   EB75 4C 2A A4           JMP LDIY        ;START EXECUTING LDA (),Y
1810   EB78             
1811   EB78             ;SUBR STORE AT ADDR & CMP WITHOUT PAG 0
1812   EB78             ;REPLACES STA (ADDR),Y  &  CMP (ADDR),Y
1813   EB78             ;LOOK THAT ADDR & ADDR+1 ARE NOT ON PAG 0
1814   EB78 48          SADDR  PHA
1815   EB79 AD 1C A4           LDA ADDR
1816   EB7C 8D 28 A4           STA STIY+1
1817   EB7F 8D 2B A4           STA CPIY+1
1818   EB82 AD 1D A4           LDA ADDR+1
1819   EB85 8D 29 A4           STA STIY+2
1820   EB88 8D 2C A4           STA CPIY+2
1821   EB8B A9 99              LDA #$99        ;STA INSTR
1822   EB8D 8D 27 A4           STA STIY
1823   EB90 A9 D9              LDA #$D9        ;CMP INSTR
1824   EB92 8D 2A A4           STA CPIY
1825   EB95 A9 60              LDA #$60        ;RTS
1826   EB97 8D 2D A4           STA LDIY+3
1827   EB9A 68                 PLA
1828   EB9B 4C 27 A4           JMP STIY        ;START EXECUTING STA (),Y
1829   EB9E             
1830   EB9E             ;PUSH X & Y WITHOUT CHANGING THE REGS
1831   EB9E 8D 2D A4    PHXY   STA CPIY+3      ;SAVE ACC
1832   EBA1 98                 TYA
1833   EBA2 48                 PHA             ;PUSH Y
1834   EBA3 8A                 TXA
1835   EBA4 48                 PHA             ;PUSH X
1836   EBA5 20 BA EB           JSR SWSTAK      ;SWAP X , Y WITH RTRN ADDR FROM S`
1837   EBA8 AD 2D A4           LDA CPIY+3
1838   EBAB 60                 RTS
1839   EBAC             
1840   EBAC             ;PULL X & Y WITHOUT CHANGING ACC
1841   EBAC             ;IT HAS TO BE CALLED BY JSR & NOT BY JMP INSTR
1842   EBAC             ;SINCE IT SWAPS THE STACK
1843   EBAC 8D 2D A4    PLXY   STA CPIY+3
1844   EBAF 20 BA EB           JSR SWSTAK      ;SWAP X , Y WITH RTRN ADDR FROM`
1845   EBB2 68                 PLA
1846   EBB3 AA                 TAX             ;PULL X
1847   EBB4 68                 PLA
1848   EBB5 A8                 TAY             ;PULL Y
1849   EBB6 AD 2D A4           LDA CPIY+3
1850   EBB9 60                 RTS
1851   EBBA             
1852   EBBA             ;SWAP STACK
1853   EBBA BA          SWSTAK TSX
1854   EBBB A9 02              LDA #2
1855   EBBD 48          SWST1  PHA
1856   EBBE BD 06 01           LDA $0106,X     ;GET PCH OR PCL
1857   EBC1 BC 04 01           LDY $0104,X     ;GET Y OR X REGS
1858   EBC4 9D 04 01           STA $0104,X
1859   EBC7 98                 TYA
1860   EBC8 9D 06 01           STA $0106,X
1861   EBCB CA                 DEX
1862   EBCC 68                 PLA
1863   EBCD 38                 SEC
1864   EBCE E9 01              SBC #1
1865   EBD0 D0 EB              BNE SWST1
1866   EBD2 BD 08 01           LDA $0108,X     ;RESTORE Y & X FROM STACK
1867   EBD5 A8                 TAY
1868   EBD6 BD 07 01           LDA $0107,X
1869   EBD9 AA                 TAX
1870   EBDA 60                 RTS
1871   EBDB             
1872   EBDB             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1873   EBDB             ;GET A CHAR FROM TTY SUBR INTO ACC ,SAVES X
1874   EBDB 8A          GETTTY TXA             ;SAVE X
1875   EBDC 48                 PHA
1876   EBDD A2 07              LDX #$07        ;SET UP FOR 8 BIT CNT
1877   EBDF 8E 2A A4           STX CPIY        ;CLR MSB
1878   EBE2 2C C0 A4    GET1   BIT DRB         ;A^M ,  PB6->V
1879   EBE5 70 FB              BVS GET1        ;WAIT FOR START BIT
1880   EBE7 20 0F EC           JSR DELAY       ;DELAY 1 BIT
1881   EBEA 20 23 EC           JSR DEHALF      ;DELAY 1/2 BIT TIME
1882   EBED AD C0 A4    GET3   LDA DRB         ;GET 8 BITS
1883   EBF0 29 40              AND #$40        ;MASK OFF OTHER BITS,ONLY PB6
1884   EBF2 4E 2A A4           LSR CPIY        ;SHIFT RIGHT CHARACTER
1885   EBF5 0D 2A A4           ORA CPIY
1886   EBF8 8D 2A A4           STA CPIY
1887   EBFB 20 0F EC           JSR DELAY       ;DELAY 1 BIT TIME
1888   EBFE CA                 DEX
1889   EBFF D0 EC              BNE GET3        ;GET NEXT BIT
1890   EC01 20 0F EC           JSR DELAY       ;DO NOT CARE FOR PARITY BIT
1891   EC04 20 23 EC           JSR DEHALF      ;UNTIL WE GET BACK TO ONE AGAIN
1892   EC07 68                 PLA             ;RESTORE X
1893   EC08 AA                 TAX
1894   EC09 AD 2A A4           LDA CPIY
1895   EC0C 29 7F              AND #$7F        ;CLEAR PARITY BIT
1896   EC0E 60                 RTS
1897   EC0F             
1898   EC0F             ;DELAY 1 BIT TIME AS GIVEN BY BAUD RATE
1899   EC0F AD 18 A4    DELAY  LDA CNTL30      ;START TIMER T2
1900   EC12 8D C8 A4           STA T2L
1901   EC15 AD 17 A4           LDA CNTH30
1902   EC18 8D C9 A4    DE1    STA T2H
1903   EC1B AD CD A4    DE2    LDA IFR         ;GET INT FLG FOR T2
1904   EC1E 29 20              AND #MT2
1905   EC20 F0 F9              BEQ DE2         ;TIME OUT ?
1906   EC22 60                 RTS
1907   EC23             
1908   EC23             ;DELAY HALF BIT TIME
1909   EC23             ;TOTAL TIME DIVIDED BY 2
1910   EC23 AD 17 A4    DEHALF LDA CNTH30
1911   EC26 4A                 LSR A           ;LSB TO CARRY
1912   EC27 AD 18 A4           LDA CNTL30
1913   EC2A 6A                 ROR A           ;SHIFT WITH CARRY
1914   EC2B 8D C8 A4           STA T2L
1915   EC2E AD 17 A4           LDA CNTH30
1916   EC31 4A                 LSR A
1917   EC32 8D C9 A4           STA T2H
1918   EC35 4C 1B EC           JMP DE2
1919   EC38             
1920   EC38             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1921   EC38 A9 00       GETKD0 LDA #0
1922   EC3A 8D 77 A4           STA IDOT        ;GO ANOTHER 90 DOTS
1923   EC3D 20 4A F0           JSR IPO0        ;OUTPUT 90 DOTS TO PRI (ZEROS)
1924   EC40             
1925   EC40             ;GET A CHAR FROM KB SUBROUTINE
1926   EC40             ;FROM KB Y=ROW ,STBKEY=COLUMNS (STROBE)
1927   EC40             ;X=CTRL OR SHIFT ,OTHERWISE X=0
1928   EC40             ;GETKEY  
1929   EC40             ;GETKY
1930   EC40             ;        JSR PS2KB_Input
1931   EC40             ;        JMP GETK8
1932   EC40 20 EF EC    GETKEY JSR ROONEK      ;WAIT IF LAST KEY STILL DOWN
1933   EC43 20 2A ED    GETKY  JSR DEBKEY      ;DEBOUNCE KEY (5 MSEC)
1934   EC46             ;CTRL OR SHIFT ?
1935   EC46 A9 8F              LDA #$8F        ;CHCK CLMN 5,6,7
1936   EC48 8D E0 A4           STA DRA2
1937   EC4B AD E2 A4           LDA DRB2        ;CHCK ROW 1
1938   EC4E 4A                 LSR A
1939   EC4F B0 20              BCS GETK1       ;IF=1 ,NO CTRL OR SHIFT
1940   EC51 A2 03              LDX #3          ;CLMN 5,6,7 (CNTRL,SHIFTL,SHIFTR)
1941   EC53 A9 7F              LDA #$7F        ;CTRL OR SHIFT ,SO WHICH ONE?
1942   EC55 38          GETK0  SEC
1943   EC56 6A                 ROR A
1944   EC57 48                 PHA
1945   EC58 20 0B ED           JSR ONEK2       ;LETS GET CTRL OR SHIFT INTO X
1946   EC5B AD E2 A4           LDA DRB2
1947   EC5E 4A                 LSR A           ;ONLY ROW 1
1948   EC5F 90 06              BCC GETK00      ;GOT YOU
1949   EC61 68                 PLA
1950   EC62 CA                 DEX
1951   EC63 D0 F0              BNE GETK0
1952   EC65 F0 DC              BEQ GETKY       ;THERE IS A MISTAKE CHECK AGAIN
1953   EC67 68          GETK00 PLA             ;NOW GET STBKEY INTO X
1954   EC68 AD 2B A4           LDA STBKEY      ;CLMN INTO X
1955   EC6B 49 FF              EOR #$FF        ;COMPLEMENT BECAUSE STRBS ARE 0
1956   EC6D AA                 TAX             ;CTRL OR SHIFT TO X
1957   EC6E EE 2A A4           INC KMASK       ;SET MSK=$01
1958   EC71             ;NOW GET ANY KEY
1959   EC71 20 05 ED    GETK1  JSR ONEKEY      ;GET A KEY
1960   EC74 88                 DEY             ;CHK THE ROW (1-8)
1961   EC75 D0 09              BNE GETK1B      ;CHK IF CTRL OR SHIFT
1962   EC77 AD 2B A4           LDA STBKEY      ;WERE ENTERED AT THE LAST MOMENT
1963   EC7A C9 F7              CMP #$F7        ;IF CLMN 5,6,7,8 TO IT AGAIN
1964   EC7C B0 04              BCS GETK2
1965   EC7E 90 C3              BCC GETKY       ;SEND IT TO GET CTRL OR SHIFT
1966   EC80 30 C1       GETK1B BMI GETKY       ;NO KEY ,CLEAR MSK
1967   EC82             ;WE HAVE A KEY ,DECODE IT
1968   EC82 20 2C ED    GETK2  JSR DEBK1       ;DEBOUNCE KEY (5 MSEC)
1969   EC85 98                 TYA             ;MULT BY 8
1970   EC86 0A                 ASL A
1971   EC87 0A                 ASL A
1972   EC88 0A                 ASL A
1973   EC89 A8                 TAY             ;NOW Y HAS ROW ADDR FROM ROW 1
1974   EC8A AD 2B A4           LDA STBKEY      ;ADD COLUMN TO Y
1975   EC8D 4A          GETK3  LSR A
1976   EC8E 90 03              BCC GETK4
1977   EC90 C8                 INY
1978   EC91 D0 FA              BNE GETK3
1979   EC93 B9 21 F4    GETK4  LDA ROW1,Y      ;GET THE CHR
1980   EC96 48                 PHA
1981   EC97 8A                 TXA             ;SEE IF CTRL OR SHIFT WAS USED
1982   EC98 F0 24              BEQ GETK7       ;BRCH IF NO CTRL OR SHIFT
1983   EC9A 29 10              AND #$10        ;CTRL ?
1984   EC9C F0 06              BEQ GETK5       ;NO ,GO GETKS
1985   EC9E 68                 PLA
1986   EC9F 29 3F              AND #$3F        ;MSK OFF 2 MSB FOR CONTROL
1987   ECA1 4C BF EC           JMP GETK8       ;EXIT
1988   ECA4 68          GETK5  PLA
1989   ECA5 48                 PHA             ;SAVE IT
1990   ECA6 29 40              AND #$40        ;IF ALPHA CHARS DO NOT SHIFT
1991   ECA8 D0 14              BNE GETK7
1992   ECAA 68                 PLA
1993   ECAB 48                 PHA
1994   ECAC 29 0F              AND #$0F        ;ONLY LSB
1995   ECAE F0 0E              BEQ GETK7       ;DO NOT INTERCHANGE <SPACE> OR 0
1996   ECB0 C9 0C              CMP #$0C        ;ACC>=$0C ?
1997   ECB2 B0 05              BCS GETK6       ;YES ACC>=$0C
1998   ECB4 68                 PLA             ;NO, ACC<$0C
1999   ECB5 29 EF              AND #$EF        ;STRIP OFF BIT 4
2000   ECB7 D0 06              BNE GETK8       ;EXIT
2001   ECB9 68          GETK6  PLA             ;ACC>=$0C
2002   ECBA 09 10              ORA #$10        ;BIT 4= 1
2003   ECBC D0 01              BNE GETK8       ;EXIT
2004   ECBE 68          GETK7  PLA
2005   ECBF             ;CHECK FOR "ADV PAP","PRI LINE", OR "TOGL PRIFLG"
2006   ECBF             ;IN THIS WAY WE DONT HAVE TO CHCK FOR THIS COMM
2007   ECBF C9 60       GETK8  CMP #$60        ;ADV PAPER COMM
2008   ECC1 D0 06              BNE GETK11
2009   ECC3 E0 00              CPX #0          ;IF SHIFT IS NOT ADV PAPER
2010   ECC5             ;       CMP #$40
2011   ECC5 F0 25              BEQ GETK10      ;NO SHIFT ,SO ADVPAPER
2012   ECC7 29 4F              AND #$4F        ;CONVRT TO "@"
2013   ECC9             ;        NOP
2014   ECC9             ;        NOP
2015   ECC9 C9 1C       GETK11 CMP #$1C         ;SEE IF TOGGL PRIFLG (CONTRL PRI)
2016   ECCB D0 14              BNE GETK13
2017   ECCD 20 E1 E6           JSR PRITR       ;GO TOGGLE FLG
2018   ECD0 A0 01              LDY #1          ;GET THE PTRS BACK 3 SPACES
2019   ECD2 B9 15 A4    GETK12 LDA CURPO2,Y
2020   ECD5 38                 SEC
2021   ECD6 E9 03              SBC #3          ;BECAUSE "ON ,OFF" MSGS
2022   ECD8 99 15 A4           STA CURPO2,Y
2023   ECDB 88                 DEY
2024   ECDC 10 F4              BPL GETK12
2025   ECDE 4C 40 EC           JMP GETKEY
2026   ECE1 C9 5C       GETK13 CMP #BACKSLASH  ;PRINT LINE COMMAND
2027   ECE3 D0 06              BNE GETK14
2028   ECE5 20 4A F0           JSR IPS0                 ;PRINT WHATEVER IS IN BUFFER
2029   ECE8 4C 40 EC           JMP GETKEY
2030   ECEB 60          GETK14 RTS
2031   ECEC 4C 38 EC    GETK10 JMP GETKD0
2032   ECEF             
2033   ECEF             ;WAIT IF LAST KEY STILL DOWN  (ROLLOVER)
2034   ECEF AD E2 A4    ROONEK LDA DRB2        ;SEE IF KEY STILL DOWN
2035   ECF2 C9 FF              CMP #$FF
2036   ECF4 F0 0A              BEQ ROO1        ;NO KEY AT ALL, CLR ROLLFL
2037   ECF6 0D 7F A4           ORA ROLLFL      ;ACCEPT ONLY LAST KEY
2038   ECF9 49 FF              EOR #$FF        ;STRBS ARE ZEROS TO INVER
2039   ECFB D0 F2              BNE ROONEK
2040   ECFD 20 2A ED           JSR DEBKEY      ;CLR KMASK & DEBOUNCE RELEASE
2041   ED00 A9 00       ROO1   LDA #0          ;CLR KMASK
2042   ED02 8D 2A A4           STA KMASK
2043   ED05             ;GO THRU KB ONCE AND RTN ,IF ANY
2044   ED05             ;KEY Y=ROW (1-8) & STBKEY=CLMN
2045   ED05             ;IF NO KEY Y=0 ,STBKEY=$FF
2046   ED05 A9 7F       ONEKEY LDA #$7F        ;FIRST STROBE TO MSB
2047   ED07 D0 02              BNE ONEK2       ;START AT ONEK2
2048   ED09 38          ONEK1  SEC             ;ONLY ONE PULSE (ZERO)
2049   ED0A 6A                 ROR A           ;SHIFT TO RIGHT
2050   ED0B 8D E0 A4    ONEK2  STA DRA2        ;OUTPUT CLMN STROBE
2051   ED0E 8D 2B A4           STA STBKEY      ;SAVE IT
2052   ED11 A0 08              LDY #8          ;CHECK 8 ROWS
2053   ED13 AD E2 A4           LDA DRB2        ;ANY KEY ?
2054   ED16 0D 2A A4           ORA KMASK       ;DISABLE ROW 1 IF CTRL OR SHIFT
2055   ED19 8D 7F A4           STA ROLLFL      ;SAVE WHICH KEY IT WAS
2056   ED1C 0A          ONEK3  ASL A
2057   ED1D 90 0A              BCC ONEK4       ;JUMP IF KEY (ZERO)
2058   ED1F 88                 DEY
2059   ED20 D0 FA              BNE ONEK3
2060   ED22 AD 2B A4           LDA STBKEY
2061   ED25 C9 FF              CMP #$FF        ;LAST CLMN ?
2062   ED27 D0 E0              BNE ONEK1       ;NO ,DO NEXT CLMN
2063   ED29 60          ONEK4  RTS
2064   ED2A             
2065   ED2A A2 00       DEBKEY LDX #0          ;CLEAR CNTRL OR SHIFT
2066   ED2C A9 00       DEBK1  LDA #0          ;CLR KMASK
2067   ED2E 8D 2A A4           STA KMASK
2068   ED31 A9 88              LDA #DEBTIM%256     ;DEBOUNCE TIME FOR KEYBOARD
2069   ED33 8D C8 A4           STA T2L
2070   ED36 A9 13              LDA #DEBTIM/256
2071   ED38 4C 18 EC           JMP DE1         ;WAIT FOR 5 MSEC
2072   ED3B             
2073   ED3B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2074   ED3B             ;GET A CHAR FROM TAPE SUBROUTINE
2075   ED3B             ;A BUFFER IS USED TO GET BLOCKS OF DATA
2076   ED3B             ;FROM TAPE ,EXCEPT WHEN FORMAT EQUAL TO
2077   ED3B             ;KIM-1 (THE WHOLE FILE IS LOADED AT ONE TIME)
2078   ED3B 20 9E EB    TIBYTE JSR PHXY        ;PUSH X
2079   ED3E AE 36 A4           LDX TAPTR       ;POINTER FOR BUFFER
2080   ED41 E0 50              CPX #80         ;IS BUFFER EMPTY ?
2081   ED43 D0 03              BNE TIB1
2082   ED45 20 53 ED           JSR TIBY1       ;LOAD ANOTHER BLOCK
2083   ED48 BD 16 01    TIB1   LDA TABUFF,X
2084   ED4B E8                 INX
2085   ED4C 8E 36 A4           STX TAPTR
2086   ED4F 20 AC EB           JSR PLXY        ;PULL X
2087   ED52 60                 RTS
2088   ED53             ;LOAD A BLOCK FROM TAPE INTO BUFFER
2089   ED53 20 EA ED    TIBY1  JSR TAISET      ;SET TAPE FOR INPUT
2090   ED56 20 29 EE    TIBY3  JSR GETTAP      ;GET A CHAR FROM TAPE
2091   ED59 C9 23              CMP #'#'        ;CHECK FIRST CHR FOR
2092   ED5B F0 06              BEQ TIBY4       ;START OF BLOCK
2093   ED5D C9 16              CMP #$16        ;IF NOT # SHOULD BE SYN
2094   ED5F D0 F2              BNE TIBY1
2095   ED61 F0 F3              BEQ TIBY3
2096   ED63 A2 00       TIBY4  LDX #0
2097   ED65 20 29 EE    TIBY5  JSR GETTAP      ;NOW LOAD INTO BUFFER
2098   ED68 9D 16 01           STA TABUFF,X
2099   ED6B E8                 INX
2100   ED6C E0 52              CPX #82
2101   ED6E D0 F5              BNE TIBY5
2102   ED70 AD C0 A4           LDA DRB
2103   ED73 29 CF              AND #$CF
2104   ED75 8D C0 A4           STA DRB         ;TURN OFF TAPES
2105   ED78 58                 CLI             ;ENABL INTERR
2106   ED79 20 BD ED           JSR ADDBK1      ;DISPLAY BLK COUNT
2107   ED7C A2 00              LDX #0          ;TO CLEAR PTR IN TIBYTE
2108   ED7E AD 15 01           LDA BLK         ;CHECK THE BLOCK COUNT
2109   ED81 F0 05              BEQ TIBY5A      ;IF FIRST BLK ,DO NOT CMP
2110   ED83 DD 16 01           CMP TABUFF,X
2111   ED86 D0 28              BNE TIBY7       ;BRANCH IF WE MISSED ONE BLOCK
2112   ED88 E8          TIBY5A INX
2113   ED89 8E 36 A4           STX TAPTR
2114   ED8C EE 15 01           INC BLK         ;INCR BLK CONT
2115   ED8F AD 67 01           LDA TABUFF+81   ;STORE THIS BLK CKSUM
2116   ED92 48                 PHA
2117   ED93 AD 66 01           LDA TABUFF+80
2118   ED96 48                 PHA
2119   ED97 CE 12 A4           DEC INFLG       ;SET INFLG DIFF FROM OUTFLG
2120   ED9A 20 E7 F1           JSR BKCKSM      ;COMPUT BLK CKSUM FOR THIS BLK
2121   ED9D 68                 PLA
2122   ED9E CD 66 01           CMP TABUFF+80   ;DO THEY AGREE ?
2123   EDA1 D0 0C              BNE TIBY6
2124   EDA3 68                 PLA
2125   EDA4 CD 67 01           CMP TABUFF+81
2126   EDA7 D0 07              BNE TIBY7
2127   EDA9 EE 12 A4           INC INFLG       ;RESTORE INPUT DEVICE
2128   EDAC A2 01              LDX #1          ;TO GET FIRST CHR IN TIBYTE
2129   EDAE 60                 RTS
2130   EDAF 68          TIBY6  PLA             ;RESTORE STACK PTR
2131   EDB0 68          TIBY7  PLA
2132   EDB1 68                 PLA
2133   EDB2 68                 PLA
2134   EDB3 68                 PLA
2135   EDB4 20 8E E3           JSR CKER0
2136   EDB7 4C A1 E1           JMP COMIN
2137   EDBA             
2138   EDBA             ;ADD 1 TO BLK COUNT AND OUTPUT IT
2139   EDBA EE 15 01    ADDBLK INC BLK         ;INCR BLK CNT
2140   EDBD EE 11 A4    ADDBK1 INC PRIFLG      ;SO DONT OUTPUT TO PRINTR
2141   EDC0 A9 12              LDA #18         ;ONLY OUTPUT IN THIS POSITION
2142   EDC2 8D 15 A4           STA CURPO2
2143   EDC5 AD 4A A4           LDA DIBUFF+18   ;SAVE DISBUF (FOR EDIT)
2144   EDC8 48                 PHA
2145   EDC9 AD 4B A4           LDA DIBUFF+19
2146   EDCC 48                 PHA
2147   EDCD AE 13 A4           LDX OUTFLG      ;SAVE OUTFLG
2148   EDD0 A9 0D              LDA #CR
2149   EDD2 8D 13 A4           STA OUTFLG      ;TO OUTPUT TO TERMINAL
2150   EDD5 AD 16 01           LDA BLK+1       ;BLK CNT COMING FROM TAPE
2151   EDD8 20 46 EA           JSR NUMA        ;OUTPUT IN ASCII
2152   EDDB 8E 13 A4           STX OUTFLG      ;RESTORE OUTFLG
2153   EDDE 68                 PLA
2154   EDDF 8D 4B A4           STA DIBUFF+19
2155   EDE2 68                 PLA
2156   EDE3 8D 4A A4           STA DIBUFF+18
2157   EDE6 CE 11 A4           DEC PRIFLG      ;RESTORE PRI FLG
2158   EDE9 60                 RTS
2159   EDEA             
2160   EDEA             ;SET TAPE (1 OR 2) FOR INPUT
2161   EDEA A9 37       TAISET LDA #$37        ;SET PB7 FOR INPUT
2162   EDEC 8D C2 A4           STA DDRB
2163   EDEF AD 34 A4           LDA TAPIN       ;INPUT FLG (TAP 1=2 OR TAP 2=1)
2164   EDF2 20 1C EE           JSR TIOSET      ;RESET PB4 OR PB5
2165   EDF5 A9 EE              LDA #MOFF+DATIN ;SET CA2=1 (DATA IN)
2166   EDF7 8D CC A4           STA PCR
2167   EDFA A9 FF              LDA #$FF        ;PREPARE T2
2168   EDFC 8D C8 A4           STA T2L         ;LACTH
2169   EDFF             ;CHCK BIT BY BIT UNTIL $16
2170   EDFF 20 3B EE    SYNC   JSR RDBIT       ;GET A BIT IN MSB
2171   EE02 4E 2A A4           LSR CPIY        ;MAKE ROOM FOR BIT
2172   EE05 0D 2A A4           ORA CPIY        ;PUT BIT INTO MSB
2173   EE08 8D 2A A4           STA CPIY 
2174   EE0B C9 16              CMP #$16        ;SYN CHAR ?
2175   EE0D D0 F0              BNE SYNC
2176   EE0F A2 05              LDX #$05        ;TEST FOR 5 SYN CHARS
2177   EE11 20 29 EE    SYNC1  JSR GETTAP
2178   EE14 C9 16              CMP #$16
2179   EE16 D0 E7              BNE SYNC        ;IF NOT 2 CHAR RE-SYNC
2180   EE18 CA                 DEX
2181   EE19 D0 F6              BNE SYNC1
2182   EE1B 60                 RTS
2183   EE1C             
2184   EE1C             ;SET PB4 OR PB5 OFF
2185   EE1C             ;USED BY IN/OUT SET UPS
2186   EE1C D0 04       TIOSET BNE TIOS1       ;BRCH IF TAP1
2187   EE1E A9 14              LDA #$14        ;SET TAP 2 OFF (PB5=0)
2188   EE20 D0 02              BNE TIOS2
2189   EE22 A9 24       TIOS1  LDA #$24        ;SET TAP 1 OFF (PB4=0)
2190   EE24 8D C0 A4    TIOS2  STA DRB
2191   EE27 78                 SEI             ;DISABLE INTERR WHILE TAP
2192   EE28 60                 RTS
2193   EE29             
2194   EE29             ;GET 1 CHAR FROM TAPE AND RETURN
2195   EE29             ;WITH CHR IN ACC, USE CPIY TO ASM CHR ,USES Y
2196   EE29 A0 08       GETTAP LDY #$08        ;READ 8 BITS
2197   EE2B 20 3B EE    GETA1  JSR RDBIT       ;GET NEXT DATA BIT
2198   EE2E 4E 2A A4           LSR CPIY        ;MAKE ROOM FOR MSB
2199   EE31 0D 2A A4           ORA CPIY        ;OR IN SIGN BIT
2200   EE34 8D 2A A4           STA CPIY        ;REPLACE CHAR
2201   EE37 88                 DEY
2202   EE38 D0 F1              BNE GETA1
2203   EE3A 60                 RTS
2204   EE3B             ;GET ONE BIT FROM TAPE AND
2205   EE3B             ;RETURN IT IN SIGN OF A (MSB)
2206   EE3B AD 08 A4    RDBIT  LDA TSPEED      ;ARE WE IN C7 OR 5B,5A FREQUENC`
2207   EE3E 30 27              BMI RDBIT4      ;JUMP TO C7 FREQ FORMAT
2208   EE40 20 75 EE           JSR CKFREQ      ;START BIT IN HIGH FREQ
2209   EE43 20 75 EE    RDBIT1 JSR CKFREQ      ;HIGH TO LOW FREQ TRANS
2210   EE46 B0 FB              BCS RDBIT1
2211   EE48 AD F6 A4           LDA DIV64       ;GET HIGH FREQ TIMING
2212   EE4B 48                 PHA
2213   EE4C A9 FF              LDA #$FF        ;SET UP TIMER
2214   EE4E 8D F6 A4           STA DIV64
2215   EE51 20 75 EE    RDBIT2 JSR CKFREQ      ;LOW TO HIGH FREQ TRANS
2216   EE54 90 FB              BCC RDBIT2      ;WAIT TILL FREQ IS HIGH
2217   EE56 68                 PLA
2218   EE57 38                 SEC
2219   EE58 ED F6 A4           SBC DIV64       ;(256-T1) - (256-T2) =T2-T1
2220   EE5B 48                 PHA             ;LOW FREQ TIME-HIGH FREQ TIME
2221   EE5C A9 FF              LDA #$FF
2222   EE5E 8D F6 A4           STA DIV64       ;SET UP TIMER
2223   EE61 68                 PLA
2224   EE62 49 FF              EOR #$FF
2225   EE64 29 80              AND #$80
2226   EE66 60                 RTS
2227   EE67             ;EACH BIT STARTS WITH HALF PULSE OF 2400 & THEN
2228   EE67             ;3 HALF PULSES OF 1200 HZ FOR 0 ,3 PUSLES OF 2400 FOR 1
2229   EE67             ;THE READING IS MADE ON THE FOURTH 1/2 PULSE ,WHERE
2230   EE67             ;THE SIGNAL HAS STABILIZED
2231   EE67 20 75 EE    RDBIT4 JSR CKFREQ      ;SEE WHICH FREQ
2232   EE6A 90 FB              BCC RDBIT4
2233   EE6C 20 75 EE           JSR CKFREQ
2234   EE6F 20 75 EE           JSR CKFREQ
2235   EE72 4C B5 FF           JMP PATC24      ;NOW READ THE BIT
2236   EE75             
2237   EE75 2C C0 A4    CKFREQ BIT DRB         ;ARE WE HIGH OR LOW ?
2238   EE78 30 27              BMI CKF4
2239   EE7A 2C C0 A4    CKF1   BIT DRB         ;WAIT TILL HIGH
2240   EE7D 10 FB              BPL CKF1
2241   EE7F 65 00              ADC $00         ;EQUALIZER
2242   EE81 AD C9 A4    CKF2   LDA T2H         ;SAVE CNTR
2243   EE84 48                 PHA
2244   EE85 AD C8 A4           LDA T2L
2245   EE88 48                 PHA
2246   EE89 A9 FF              LDA #$FF
2247   EE8B 8D C9 A4           STA T2H         ;START CNTR
2248   EE8E AD 08 A4           LDA TSPEED
2249   EE91 30 06              BMI CKF3        ;SUPER SPEED ?
2250   EE93 68                 PLA
2251   EE94 CD 08 A4           CMP TSPEED      ;HIGH OR LOW FREC
2252   EE97 68                 PLA             ;C=1 IF HIGH ,C=0 IF LOW
2253   EE98 60                 RTS
2254   EE99 68          CKF3   PLA
2255   EE9A CD 08 A4           CMP TSPEED      ;CENTER FREQ
2256   EE9D 68          CKF3A  PLA
2257   EE9E E9 FE              SBC #$FE
2258   EEA0 60                 RTS
2259   EEA1 2C C0 A4    CKF4   BIT DRB         ;WAIT TILL LOW
2260   EEA4 30 FB              BMI CKF4
2261   EEA6 10 D9              BPL CKF2        ;GO GET TIMING
2262   EEA8             
2263   EEA8             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2264   EEA8             ;OUTPUT ACC TO TTY SUBROUTINE
2265   EEA8             ;X,Y ARE PRESERVED
2266   EEA8 48          OUTTTY PHA             ;SAVE A
2267   EEA9 20 9E EB           JSR PHXY        ;PUSH X
2268   EEAC 8D 27 A4           STA STIY        ;PUT CHAR HERE
2269   EEAF 20 0F EC           JSR DELAY       ;STOP BIT FROM LAST CHAR
2270   EEB2 AD C0 A4           LDA DRB
2271   EEB5 29 FB              AND #$FB        ;START BIT PB2=0
2272   EEB7 8D C0 A4           STA DRB         ;TTO=PB2
2273   EEBA 8D 28 A4           STA STIY+1      ;SAVE THIS PATTERN
2274   EEBD 20 0F EC           JSR DELAY
2275   EEC0 A2 08              LDX #$08        ;8 BITS
2276   EEC2 2E 27 A4           ROL STIY        ;GET FIRST LSB INTO BIT 2
2277   EEC5 2E 27 A4           ROL STIY
2278   EEC8 2E 27 A4           ROL STIY
2279   EECB 6E 27 A4    OUTT1  ROR STIY
2280   EECE AD 27 A4           LDA STIY
2281   EED1 29 04              AND #$04        ;GET ONLY BIT 2 FOR PB2
2282   EED3 0D 28 A4           ORA STIY+1      ;PUT BIT INTO PATTERN
2283   EED6 8D C0 A4           STA DRB         ;NOW TO TTY
2284   EED9 08                 PHP             ;PRESERVE CARRY FOR ROTATE
2285   EEDA 20 0F EC           JSR DELAY
2286   EEDD 28                 PLP
2287   EEDE CA                 DEX
2288   EEDF D0 EA              BNE OUTT1
2289   EEE1 A9 04              LDA #$04        ;STOP BIT
2290   EEE3 0D 28 A4           ORA STIY+1
2291   EEE6 8D C0 A4           STA DRB
2292   EEE9 20 0F EC           JSR DELAY       ;STOP BIT
2293   EEEC 20 AC EB           JSR PLXY        ;PULL X
2294   EEEF 68                 PLA
2295   EEF0 C9 0A              CMP #LF
2296   EEF2 F0 07              BEQ OUTT2
2297   EEF4 C9 FF              CMP #NULLC
2298   EEF6 F0 03              BEQ OUTT2
2299   EEF8 4C 05 EF           JMP OUTDIS      ;USE THAT BUFF
2300   EEFB 60          OUTT2  RTS
2301   EEFC             
2302   EEFC             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2303   EEFC             ;OUTPUT A CHR TO D/P SUBR (SINGLE ENTRY FOR BOTH SUBR)
2304   EEFC             ;IF CHAR=<CR> CLEAR DISPLAY & PRINTER
2305   EEFC 20 00 F0    OUTDP  JSR OUTPRI      ;FIRST TO PRI THEN TO DISP
2306   EEFF EA                 NOP
2307   EF00 EA                 NOP
2308   EF01 EA                 NOP
2309   EF02 6C 06 A4    OUTDP1 JMP (DILINK)    ;HERE HE COULD ECHO SOMEWHERE ELSE`
2310   EF05             
2311   EF05             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2312   EF05             ;OUTPUT ACC TO DISPLAY SUBROUTINE
2313   EF05             ;IF SIGN BIT (MSB)=1 DISP DO NOT CLR TO THE RIGHT
2314   EF05 48          OUTDIS PHA             ;SAVE A
2315   EF06 20 9E EB           JSR PHXY        ;PUSH X
2316   EF09 C9 0D              CMP #CR         ;<CR> ?
2317   EF0B D0 07              BNE OUTD1
2318   EF0D A2 00              LDX #0          ;YES
2319   EF0F 8E 15 A4           STX CURPO2      ;CLEAR DISP POINTER
2320   EF12 F0 42              BEQ OUTD5       ;GO CLEAR DISP
2321   EF14 4C 9C FE    OUTD1  JMP PATCH4
2322   EF17 E0 3C       OUTD1A CPX #60         ;LAST CHAR FOR DISP?
2323   EF19 90 05              BCC OUTD2
2324   EF1B 20 AC EB           JSR PLXY        ;GO BACK
2325   EF1E 68                 PLA             ;DO NOT STORE
2326   EF1F 60                 RTS
2327   EF20 9D 38 A4    OUTD2  STA DIBUFF,X    ;PUT CHAR IN BUFF
2328   EF23 EE 15 A4           INC CURPO2      ;INC POINTER
2329   EF26 E0 14              CPX #20         ;DISPLAY FULL?
2330   EF28 90 1E              BCC OUTD4
2331   EF2A 20 2F EF           JSR OUTD2A      ;THIS WAY SCROLL IS A SUBR
2332   EF2D 30 47              BMI OUTD7       ;EXIT DISP
2333   EF2F             ;YES, SCROLL CHARS TO THE LEFT
2334   EF2F 8A          OUTD2A TXA             ;X---> Y
2335   EF30 A8                 TAY
2336   EF31 A2 13              LDX #19         ;ADDR FOR DISP DO NOT
2337   EF33 8E 27 A4    OUTD3  STX STIY        ;DECREM IN BINARY
2338   EF36 B9 38 A4           LDA DIBUFF,Y    ;FROM BUFFER TO DISP
2339   EF39 09 80              ORA #$80        ;NO CURSOR
2340   EF3B 20 7B EF           JSR OUTDD1      ;CONVERT X INTO REAL ADDR
2341   EF3E 88                 DEY
2342   EF3F CE 27 A4           DEC STIY
2343   EF42 AE 27 A4           LDX STIY
2344   EF45 10 EC              BPL OUTD3       ;AGAIN UNTIL WHOLE DISP
2345   EF47 60                 RTS
2346   EF48 48          OUTD4  PHA
2347   EF49 09 80              ORA #$80        ;NO CURSOR
2348   EF4B 20 7B EF           JSR OUTDD1      ;X=<$19 ,CONVRT TO REAL ADDR
2349   EF4E 68                 PLA
2350   EF4F 29 80              AND #$80        ;IF MSB=0 CLEAR REST OF DISPLAY
2351   EF51 D0 23              BNE OUTD7
2352   EF53 AE 15 A4           LDX CURPO2
2353   EF56             ;CLEAR DISP TO THE RIGHT
2354   EF56 E0 14       OUTD5  CPX #20
2355   EF58 B0 1C              BCS OUTD7
2356   EF5A 8E 27 A4           STX STIY
2357   EF5D A9 A0              LDA #' '+$80    ;<SPACE>
2358   EF5F 20 7B EF           JSR OUTDD1      ;CONVRT TO REAL ADDR
2359   EF62 EE 27 A4           INC STIY
2360   EF65 AE 27 A4           LDX STIY
2361   EF68 D0 EC              BNE OUTD5       ;GO NEXT
2362   EF6A 4C 76 EF           JMP OUTD7
2363   EF6D EA                 NOP
2364   EF6E EA                 NOP
2365   EF6F EA                 NOP
2366   EF70 EA                 NOP
2367   EF71 EA                 NOP
2368   EF72 EA                 NOP
2369   EF73 EA                 NOP
2370   EF74 EA                 NOP
2371   EF75 EA                 NOP
2372   EF76 20 AC EB    OUTD7  JSR PLXY        ;REST ,SO PRINTR INDEPEN
2373   EF79 68                 PLA
2374   EF7A 60                 RTS
2375   EF7B             
2376   EF7B             ;CONVERT X INTO REAL ADDR FOR DISPLAY
2377   EF7B             ;AND OUTPUT IT  PB=DATA ; PA=W,CE ,A0 A1 (6520)
2378   EF7B 48          OUTDD1 PHA             ;SAVE DATA
2379   EF7C 8A                 TXA
2380   EF7D 48                 PHA             ;SAVE X
2381   EF7E 4A                 LSR A           ;DIVIDE X BY 4
2382   EF7F 4A                 LSR A           ;TO GET CHIP SELECT
2383   EF80 AA                 TAX             ;BACK TO X
2384   EF81 A9 04              LDA #4          ;FIRST CHIP SELECT
2385   EF83 E0 00              CPX #0          ;FIRST CHIP ?
2386   EF85 F0 04              BEQ OUTDD3
2387   EF87 0A          OUTDD2 ASL A
2388   EF88 CA                 DEX
2389   EF89 D0 FC              BNE OUTDD2      ;BACK TILL RIGH CS
2390   EF8B 8D 28 A4    OUTDD3 STA STIY+1      ;SAVE CS TEMPORARILY
2391   EF8E 68                 PLA             ;GET X AGAIN FOR CHAR
2392   EF8F 29 03              AND #$03        ;IN THAT CHIP
2393   EF91 0D 28 A4           ORA STIY+1      ;OR IN CS AND CHAR
2394   EF94             ;STORE ADDR AND DATA INTO DISPL
2395   EF94 49 FF              EOR #$FF        ;W=1 , CE=0 & A1,A0
2396   EF96 8D D0 A4           STA RA
2397   EF99 AA                 TAX             ;SAVE A IN X
2398   EF9A 68                 PLA             ;GET DATA
2399   EF9B 48                 PHA
2400   EF9C 8D D2 A4           STA RB
2401   EF9F 8A                 TXA
2402   EFA0 49 80              EOR #$80        ;SET W=0
2403   EFA2 8D D0 A4           STA RA
2404   EFA5 EA                 NOP
2405   EFA6 09 7C              ORA #$7C        ;SET CE=1
2406   EFA8 8D D0 A4           STA RA
2407   EFAB A9 FF              LDA #$FF        ;SET W=1
2408   EFAD 8D D0 A4           STA RA
2409   EFB0 68                 PLA             ;RETURN DATA
2410   EFB1 60                 RTS
2411   EFB2             
2412   EFB2 A9 C8       PS2KB_Init     lda      #$c8
2413   EFB4 8D BC A4                   sta      UPCR           ;Via1PCR
2414   EFB7 AD B1 A4                   lda	UDRAH          ;Via1PRA                              
2415   EFBA A2 03              LDX #3          ;PORTS USED FOR KB
2416   EFBC BD 52 E7    RS2    LDA INTAB2,X    ;PA0-PA7 AS OUTPUT
2417   EFBF 9D E0 A4           STA DRA2,X      ;PB0-PB7 AS INPUT
2418   EFC2 CA                 DEX
2419   EFC3 10 F7              BPL RS2
2420   EFC5 60                         rts                     ; done
2421   EFC6                            
2422   EFC6             PS2KB_Scan
2423   EFC6 AD BD A4                    lda     UIFR            ; LOAD STATUS REGISTER
2424   EFC9 4A                          lsr     A
2425   EFCA 4A                          lsr     A
2426   EFCB 90 03                       BCC     kcirtn          ; RETURN IF NOTHING
2427   EFCD AD B1 A4                    LDA     UDRAH           ; LOAD DATA BYTE
2428   EFD0 60          kcirtn          RTS                     ; RETURN TO CALLER
2429   EFD1             
2430   EFD1             PS2KB_Input
2431   EFD1 20 C6 EF                    JSR     PS2KB_Scan
2432   EFD4 90 FB                       BCC     PS2KB_Input
2433   EFD6 60                          RTS
2434   EFD7             
2435   EFF9                    *=$EFF9
2436   EFF9 EA                 .DB $EA
2437   F000                    *=$F000
2438   F000             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2439   F000             ;OUTPUT ACC TO PRINTER SUBROUTINE
2440   F000             ;PRINTS ON 21RST CHAR OR WHEN <CR>
2441   F000             ;IT WILL PUT IT ON BUBFFER BUT WONT PRINT IF
2442   F000             ;PRIFLG=0
2443   F000 48          OUTPRI PHA             ;SAVE CHR TO BE OUTPUT
2444   F001 20 9E EB           JSR PHXY        ;SAVE X
2445   F004 C9 0D              CMP #CR         ;SEE IF CR
2446   F006 F0 07              BEQ OUT01       ;YES SO PRINT THE BUFF
2447   F008 AE 16 A4           LDX CURPOS      ;PTR TO NEXT POS IN BUFF
2448   F00B E0 14              CPX #20         ;SEE IF BUFF FULL
2449   F00D D0 16              BNE OUT04       ;NOT FULL SO RETURN
2450   F00F             ;<CR> SO FILL REST OF BUFFER WITH BLANKS
2451   F00F 48          OUT01  PHA
2452   F010 A9 00              LDA #0          ;CURPOS = 0
2453   F012 AE 16 A4           LDX CURPOS      ;SEE IF ANYTHING IN BUFFER
2454   F015 8D 16 A4           STA CURPOS
2455   F018 20 38 F0           JSR OUTPR       ;CLEAR PRIBUF TO THE RIGHT
2456   F01B             ;BUFFER FILLED SO PRINT IT
2457   F01B 20 45 F0           JSR IPST        ;START THE PRINT
2458   F01E A2 00              LDX #0          ;STORE CHR IN BUFF (FIRST LOC)
2459   F020 68                 PLA             ;GET IT
2460   F021 C9 0D              CMP #CR         ;DONT STORE IF <CR>
2461   F023 F0 0E              BEQ OUT05
2462   F025 9D 60 A4    OUT04  STA IBUFM,X     ;STORE CHR IN BUFF
2463   F028 EE 16 A4           INC CURPOS      ;INCR BUFF PNTR
2464   F02B E8                 INX
2465   F02C 29 80              AND #$80
2466   F02E D0 03              BNE OUT05       ;DONT CLR IF MSB=1
2467   F030 20 38 F0           JSR OUTPR       ;CLEAR PRIBUFF TO THE RIGHT
2468   F033 20 AC EB    OUT05  JSR PLXY        ;RESTORE REGS
2469   F036 68                 PLA
2470   F037 60                 RTS
2471   F038 A9 20       OUTPR  LDA #' '        ;FILL REST OF BUFF WITH BLANKS
2472   F03A E0 14       OUTPR1 CPX #20         ;SEE IF END OF BUFF
2473   F03C F0 06              BEQ OUTPR2
2474   F03E 9D 60 A4           STA IBUFM,X     ;NO SO STORE BLANK
2475   F041 E8                 INX             ;INCR BUFF PNTR
2476   F042 10 F6              BPL OUTPR1
2477   F044 60          OUTPR2 RTS
2478   F045             
2479   F045             ;SUB TO OUTPUT BUFFER, 70 DOTS (10 DOTS AT
2480   F045             ;A TIME BY 7 ROWS) FOR EACH LINE OF PRINTING
2481   F045 2C 11 A4    IPST   BIT PRIFLG      ;PRINT FLG ON ?
2482   F048 10 46              BPL IPO4
2483   F04A             ;----------------------------------------------------
2484   F04A             IPS0
2485   F04A             IPO0   
2486   F04A             ;    BRK
2487   F04A             ;    NOP
2488   F04A             ;        LDA #$24
2489   F04A 20 9E EB            JSR PHXY        ;PUSH X
2490   F04D 8D 27 A4           STA STIY        ;PUT CHAR HERE
2491   F050 20 0F EC           JSR DELAY       ;STOP BIT FROM LAST CHAR
2492   F053 AD C0 A4           LDA DRB
2493   F056             ;       AND #$FB        ;START BIT PB2=0
2494   F056 29 FE              AND #$FE        ;START BIT PB0=0
2495   F058 8D C0 A4           STA DRB         ;TTO=PB2
2496   F05B 8D 28 A4           STA STIY+1      ;SAVE THIS PATTERN
2497   F05E 20 0F EC           JSR DELAY
2498   F061 A2 08              LDX #$08        ;8 BITS
2499   F063 2E 27 A4           ROL STIY        ;GET FIRST LSB INTO BIT 2
2500   F066 2E 27 A4           ROL STIY
2501   F069 2E 27 A4           ROL STIY
2502   F06C 6E 27 A4    OUTP1  ROR STIY
2503   F06F AD 27 A4           LDA STIY
2504   F072             ;       AND #$04        ;GET ONLY BIT 2 FOR PB2
2505   F072 29 01              AND #$01        ;GET ONLY BIT 0 FOR PB2
2506   F074 0D 28 A4           ORA STIY+1      ;PUT BIT INTO PATTERN
2507   F077 8D C0 A4           STA DRB         ;NOW TO TTY
2508   F07A 08                 PHP             ;PRESERVE CARRY FOR ROTATE
2509   F07B 20 0F EC           JSR DELAY
2510   F07E 28                 PLP
2511   F07F CA                 DEX
2512   F080 D0 EA              BNE OUTP1
2513   F082             ;       LDA #$04        ;STOP BIT
2514   F082 A9 01              LDA #$01        ;STOP BIT
2515   F084 0D 28 A4           ORA STIY+1
2516   F087 8D C0 A4           STA DRB
2517   F08A 20 0F EC           JSR DELAY       ;STOP BIT
2518   F08D 20 AC EB           JSR PLXY        ;PULL X      
2519   F090             IPO3       
2520   F090             ;----------------------------------------------------
2521   F090             ;IPS0   JSR PINT        ;INITIALIZE VALUES
2522   F090             ;       JSR IPSU        ;SET UP FIRS OUTPUT PATTERN
2523   F090             ;IPO0   LDA #PRST+SP12+MON ;TURN MOTOR ON
2524   F090             ;       STA PCR
2525   F090             ;       JSR PAT23       ;TIME OUT ?
2526   F090             ;       BNE IPO2        ;NO, START SIGNAL RECEIVED
2527   F090             ;       JSR PAT23       ;YES, TRY AGAIN
2528   F090             ;       BNE IPO2        ;OK
2529   F090             ;       JMP PRIERR      ;TWO TIME OUTS - ERROR
2530   F090             ;       NOP
2531   F090             ;       NOP
2532   F090             ;       NOP
2533   F090             ;       NOP
2534   F090             ;IPO2   JSR PRNDOT      ;STRB P1=1 PRINT DOTS (1.7MSEC)
2535   F090             ;       JSR PRNDOT      ;STRB P2=1 PRINT DOTS (1.7MSEC)
2536   F090             ;CHECK FOR 90, WHEN 70 PRNDOT WILL OUTPUT ZEROS
2537   F090             ;       LDA IDOT
2538   F090             ;       CMP #90
2539   F090             ;       BCC IPO2        ;L.T. 90 THEN GO STROB P1
2540   F090             ;IPO3   LDA #PRST+SP12+MOFF ;TURN MOTOR OFF
2541   F090             ;       STA PCR
2542   F090             ;----------------------------------------------------
2543   F090 60          IPO4   RTS
2544   F091             
2545   F091 20 44 EB    PRIERR JSR CLR         ;CLEAR PRI PNTR
2546   F094 20 B1 FE           JSR PATCH5      ;TURN PRI OFF
2547   F097 A0 3B              LDY #M12-M1
2548   F099 20 AF E7           JSR KEP
2549   F09C 4C A1 E1           JMP COMIN       ;BACK WHERE SUBR WAS CALLED
2550   F09F             
2551   F09F             ;SUBR TO INCR DOT COUNTER,WHEN
2552   F09F             ;NEG TRANS OUTPUT CHR FOR 1.7 MSEC
2553   F09F             ;CLEAR & SET UP NEXT PATTERN
2554   F09F A9 00       PRNDOT LDA #0          ;CLR INTERRPTS
2555   F0A1 8D C1 A4           STA DRAH
2556   F0A4 AD CD A4    PRDOT0 LDA IFR
2557   F0A7             ;       AND #MSP12      ;ANY STROBES ?
2558   F0A7             ;       BEQ PRDOT0
2559   F0A7             ;       LDA PCR
2560   F0A7             ;       EOR #$01
2561   F0A7             ;       STA PCR
2562   F0A7             ;       INC IDOT
2563   F0A7             ;       LDA IOUTU       ;2 LEFT ELEM
2564   F0A7             ;       ORA DRB         ;DO NOT TURN TTY OUTPUT OFF
2565   F0A7             ;              STA DRB
2566   F0A7 AD 78 A4           LDA IOUTL       ;7 RIGHT ELEM, CLR CA1 INTER FLG
2567   F0AA 8D C1 A4           STA DRAH
2568   F0AD A9 A4              LDA #PRTIME%256
2569   F0AF 8D C8 A4           STA T2L
2570   F0B2 A9 06              LDA #PRTIME/256 ;START T2 FOR 1.7 MSEC
2571   F0B4 8D C9 A4           STA T2H
2572   F0B7 20 E3 F0           JSR IPSU        ;SET NEXT PATTERN WHILE WAITING
2573   F0BA 20 1B EC           JSR DE2         ;WAIT TILL TIME OUT
2574   F0BD A9 00              LDA #0          ;THERMAL ELEM OFF
2575   F0BF 8D C1 A4           STA DRAH
2576   F0C2 AD C0 A4           LDA DRB         ;BUT DONT CHANGE TAPE CONTROLS
2577   F0C5 29 FC              AND #$FC
2578   F0C7 8D C0 A4           STA DRB
2579   F0CA 60                 RTS
2580   F0CB             
2581   F0CB             ; SUBROUTINE PINT -- INIT VARS FOR PRINTER
2582   F0CB A9 FF       PINT   LDA #$FF
2583   F0CD 8D 74 A4           STA IDIR        ;DIRECTION <= -
2584   F0D0 A9 05              LDA #5
2585   F0D2 8D 75 A4           STA ICOL        ;COLUMN <= LEFTMOST +1
2586   F0D5 A9 01              LDA #1
2587   F0D7 8D 76 A4           STA IOFFST      ;OFFSET <= LEFT CHARACTER
2588   F0DA 8D 7C A4           STA IMASK
2589   F0DD A9 00              LDA #0
2590   F0DF 8D 77 A4           STA IDOT        ;DOT COUNTER <= 0
2591   F0E2 60                 RTS
2592   F0E3             
2593   F0E3             ;THE VARIABLES FOR THE PRINTER ARE AS FOLLOWS:
2594   F0E3             ;
2595   F0E3             ;IDIR   DIRECT HEAD IS CURRENTLY MOVING (0=+, $FF=-)
2596   F0E3             ;ICOL   CLMN TO BE PRNTED NEXT (LEFTMOST=0,RIGHTMOST=4)
2597   F0E3             ;IOFFST OFFSET N PRINT BUFF (0=LEFT CHR, 1=RIGHT CHR)
2598   F0E3             ;IDOT   COUNT OF NUMBER OF DOTS PRINTED THUS FAR
2599   F0E3             ;IOUTL  SOLENOID PATTERN (8 CHRS ON RIGHT)
2600   F0E3             ;IOUTU  SOLENOID PATTERN (2 CHRS ON LEFT)
2601   F0E3             ;IBITL  1 BIT MSK USED IN SETTING NEXT SOLENOID VALUE
2602   F0E3             ;IBITU  UPPER PART OF MASK
2603   F0E3             ;IBUFM  START OF PRINT BUFFER (LEFTMOST CHR FIRST)
2604   F0E3             ;IMASK  MASK FOR CURRENT ROW BEING PRINTED
2605   F0E3             ;JUMP   ADDRESS OF TABLE FOR CURRENT COLUMN
2606   F0E3             ;
2607   F0E3             ;   THE DOT PATTERNS FOR THE CHRS ARE STORED SO THAT...
2608   F0E3             ;EACH BYTE CONTAINS THE DOTS FOR ONE COLUMN OF ONE...
2609   F0E3             ;CHR. SINCE EACH COLUMN CONTAINS SEVEN DOTS ,
2610   F0E3             ;THIS MEANS THAT ONE BIT PER BYTE IS UNUSED.
2611   F0E3             ;    THE PATTERNS ARE ORGANIZED INTO 5 TABLES OF 64...
2612   F0E3             ;BYTES WHERE EACH TABLE CONTAINS ALL THE DOT...
2613   F0E3             ;PATTERNS FOR A PARTICULAR COLUMN. THE BYTES IN EACH...
2614   F0E3             ;TABLE ARE ORDERED ACCORDING TO THE CHR CODE OF...
2615   F0E3             ;THE CHR BEING REFERENCED. THE CHR CODE CAN...
2616   F0E3             ;THUS BE USED TO DIRECTLY INDEX INTO THE TABLE.
2617   F0E3             
2618   F0E3             ;SUBROUTINE IPSU -- SET UP OUTPUT PATTERN FOR PRINTER
2619   F0E3             ;   THIS ROUTINE IS CALLED IN ORDER TO
2620   F0E3             ;SET UP THE NEXT GROUP OF SOLENOIDS TO
2621   F0E3             ;BE OUTPUT TO THE PRINTER.
2622   F0E3             ;   ON ENTRY THE CONTENTS OF ALL REGISTERS
2623   F0E3             ;ARE ARBITRARY
2624   F0E3             ;   ON EXIT THE CONTENTS OF A,X,Y ARE UNDEFINED
2625   F0E3 A2 00       IPSU   LDX #0          ;X POINTS TO VAR BLOCK FOR PRNTR
2626   F0E5 20 21 F1           JSR INCP        ;ADVANCE PTRS TO NXT DOT POSITION
2627   F0E8             ;X NOW CONTAINS INDEX INTO PRINT BUFFER
2628   F0E8 BD 60 A4    IPS1   LDA IBUFM,X     ;LOAD NEXT CHAR FROM BUFFER
2629   F0EB 29 3F              AND #$3F
2630   F0ED A8                 TAY
2631   F0EE A9 7D              LDA #JUMP%256       ;A<= DOT PATTERN FOR CHAR & COL
2632   F0F0 20 58 EB           JSR LDAY
2633   F0F3 2C 7C A4           BIT IMASK       ;SEE IF DOT IS SET
2634   F0F6 F0 16              BEQ IPS2        ;NO SO GO ON TO NEXT CHAR
2635   F0F8 AD 7A A4           LDA IBITL       ;DOT ON SO SET THE CURR SOLENOID
2636   F0FB F0 08              BEQ IPS3        ;LSB OF SOL MASK IS 0 , DO MSB
2637   F0FD 0D 78 A4           ORA IOUTL       ;SET THE SOLENOID IN THE PATTERN
2638   F100 8D 78 A4           STA IOUTL
2639   F103 D0 09              BNE IPS2        ;BRANCH ALWAYS
2640   F105 AD 7B A4    IPS3   LDA IBITU       ;SOLENOID IS ONE OF THE 2 MSD
2641   F108 0D 79 A4           ORA IOUTU       ;SET THE BIT IN THE PATTERN
2642   F10B 8D 79 A4           STA IOUTU
2643   F10E 0E 7A A4    IPS2   ASL IBITL       ;SHIFT MSK TO NXT CHR POSITION
2644   F111 2E 7B A4           ROL IBITU
2645   F114 CA                 DEX             ;DECR PTR INTO BUFFER
2646   F115 CA                 DEX
2647   F116 10 D0              BPL IPS1        ;NOT END YET
2648   F118             ;SOLENOID PATTERN IS SET UP IN IOUTU,IOUTL
2649   F118 AD 79 A4           LDA IOUTU       ;LEFTMOST 2
2650   F11B 29 03              AND #$03        ;DISABLE FOR SEGMENTS
2651   F11D 8D 79 A4           STA IOUTU
2652   F120 60                 RTS
2653   F121             
2654   F121             ; SUBROUTINE INCP
2655   F121             ;THIS SUBROUTINE IS USED TO UPDATE THE PRINTER VARIABLES
2656   F121             ;TO POINT TO THE NEXT DOT POSITION TO BE PRINTED
2657   F121             ;X REG IS USED TO POINT TO THE VARIABLE BLOCK OF
2658   F121             ;BEING UPDATED
2659   F121             ;ON EXIT X CONTAINS THE POINTER TO THE LAST CHARACTER IN
2660   F121             ;THE PRINT BUFFER
2661   F121             ;CONTENTS OF A,Y ON EXIT ARE ARBITRARY
2662   F121 BD 74 A4    INCP   LDA IDIR,X      ;EXAMINE DIRECTION(+ OR -)
2663   F124 10 1E              BPL OP03        ;DIRECTION = +
2664   F126             ;*DIRECTION = -
2665   F126 BD 75 A4           LDA ICOL,X      ;SEE WHAT THE COLUMN IS
2666   F129 F0 05              BEQ OP04        ;COLUMN = 0 SO END OF DIGIT
2667   F12B             ;**COLUMN # 0 SO JUST DECREMENT COLUMN
2668   F12B DE 75 A4           DEC ICOL,X
2669   F12E 10 33              BPL NEWCOL      ;BRANCH ALWAYS
2670   F130             ;**COLUMN = 0 SO SEE IF EVEN OR ODD DIGIT
2671   F130 BD 76 A4    OP04   LDA IOFFST,X
2672   F133 F0 0A              BEQ OP07        ;OFFSET = 0 SO DIRECTION CHANGE
2673   F135             ;***OFFSET = 1 SO MOVE TO RIGHT DIGIT
2674   F135 DE 76 A4           DEC IOFFST,X    ;OFFSET <= 0 (LEFT CHARACTER)
2675   F138 A9 04              LDA #4          ;COLUMN <= 4
2676   F13A 9D 75 A4           STA ICOL,X
2677   F13D 10 24              BPL NEWCOL      ;BRANCH ALWAYS
2678   F13F             ;***OFFSET = 0 SO CHANGE DIRECTION TO +
2679   F13F FE 74 A4    OP07   INC IDIR,X      ;DIRECTION <= $00 (+)
2680   F142 10 1C              BPL NEWROW      ;BRANCH ALWAYS
2681   F144             ;*DIRECTION = +
2682   F144 BD 75 A4    OP03   LDA ICOL,X      ;SEE IF LAST COLUMN IN DIGIT
2683   F147 C9 04              CMP #4
2684   F149 F0 05              BEQ OP05        ;COLUMN = 4 SO GO TO NEXT DIGIT
2685   F14B FE 75 A4           INC ICOL,X      ;JUST INCR COLUMN-NOT END OF DIGIT
2686   F14E 10 13              BPL NEWCOL      ;BRANCH ALWAYS
2687   F150             ;**AT COLUMN 4 -- SEE IF LEFT OR RIGHT DIGIT
2688   F150 BD 76 A4    OP05   LDA IOFFST,X
2689   F153 D0 08              BNE OP06        ;OFFSET # 0 SO RIGHT DIGIT
2690   F155 9D 75 A4           STA ICOL,X      ;COLUMN <= 0
2691   F158 FE 76 A4           INC IOFFST,X    ;OFFSET <= 1 (RIGHT CHARACTER)
2692   F15B 10 06              BPL NEWCOL      ;BRANCH ALWAYS
2693   F15D             ;***OFFSET = 1 SO DIRECTION CHANGE
2694   F15D DE 74 A4    OP06   DEC IDIR,X      ;DIRECTION <= $FF (-)
2695   F160             
2696   F160             ;START OF NEW PRINT ROW
2697   F160 1E 7C A4    NEWROW ASL IMASK,X     ;UPDATE ROW MASK FOR DOT PATTERNS
2698   F163             ;START OF NEW PRINT COLUMN
2699   F163 A9 00       NEWCOL LDA #0          ;CLEAR OUTPUT PATTERN
2700   F165 9D 78 A4           STA IOUTL,X     ;PATTERN FOR 8 RIGHT CHRS
2701   F168 9D 79 A4           STA IOUTU,X     ;PATTERN FOR 2 LEFT SOLEN
2702   F16B 9D 7B A4           STA IBITU,X     ;OUTPUT MSK FOR LEFTMOST SOLEN
2703   F16E A9 01              LDA #1
2704   F170 9D 7A A4           STA IBITL,X     ;OUTPUT MSK FOR RIGHTMOST SOLEN
2705   F173             ;GET ADDRESS OF DOT PATTERN TABLE FOR NEXT COLUMN
2706   F173 BD 75 A4           LDA ICOL,X      ;GET COLUMN NUMBER (0-4)
2707   F176 0A                 ASL A           ;*2 ,INDEX INTO TBL OF TBL ADDRS
2708   F177 A8                 TAY
2709   F178 B9 D7 F2           LDA MTBL,Y      ;LSB OF ADDR OF TABLE
2710   F17B 9D 7D A4           STA JUMP,X      ;PTR TO TBL WITH DOT PATTERNS
2711   F17E B9 D8 F2           LDA MTBL+1,Y    ;MSB OF TABLE ADDRESS
2712   F181 9D 7E A4           STA JUMP+1,X
2713   F184 A9 12              LDA #18         ;COMPUTE INDEX INTO PRNTR BUFFER
2714   F186 1D 76 A4           ORA IOFFST,X    ;+1 IF RIGHT CHR
2715   F189 AA                 TAX
2716   F18A 60                 RTS
2717   F18B             
2718   F18B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
2719   F18B             ;OUTPUT ACC TO TAPE BUFFER SUBROUTINE
2720   F18B             ; & WHEN FULL OUTPUT BUFF TO TAPE.
2721   F18B             ; IF INFLG=OUTFLG= T USE TWO BUFFERS
2722   F18B             ;OTHERWISE USE SAME BUFFER FOR INPUT
2723   F18B             ;AND OUTPUT (MONIT BUFFER)
2724   F18B 20 9E EB    TOBYTE JSR PHXY        ;SAVE X
2725   F18E AE 37 A4           LDX TAPTR2      ;TAPE BUFFER POINTER FOR OUTPUT
2726   F191 20 0F F2           JSR BKCK2       ;STORE IN BUFFER
2727   F194 E8                 INX
2728   F195 8E 37 A4           STX TAPTR2      ;FOR NEXT
2729   F198 E0 50              CPX #80         ;BUFFER FULL?
2730   F19A D0 32              BNE TABY3       ;NO , GO BACK
2731   F19C             ;OUTPUT A BLOCK FROM BUFFER TO TAPE
2732   F19C 20 E7 F1           JSR BKCKSM      ;COMPUT BLOCK CHECKSUM
2733   F19F 20 1D F2           JSR TAOSET      ;SET TAPE FOR OUTPUT
2734   F1A2 A9 23              LDA #'#'        ;CHAR FOR BEGINNING
2735   F1A4 20 4A F2           JSR OUTTAP      ;OF BLOCK
2736   F1A7             ;OUTPUT CHRS FROM ACTIVE BUFFER
2737   F1A7 20 D2 F1    TABY2  JSR CKBUFF      ;LOAD CHR FROM ACTIVE BUFFER
2738   F1AA 20 4A F2           JSR OUTTAP      ; FROM BUFFER
2739   F1AD E8                 INX
2740   F1AE E0 53              CPX #83         ;2 BLOCK CKSUM CHR + 1 EXTRA CHR..
2741   F1B0 D0 F5              BNE TABY2       ;OTHERWISE ERROR
2742   F1B2 AD C0 A4           LDA DRB
2743   F1B5 29 CF              AND #$CF        ;TURN TAPES OFF PB5,PB4
2744   F1B7 8D C0 A4           STA DRB
2745   F1BA 58                 CLI             ;ENABLE INTERRUPT
2746   F1BB A9 00              LDA #0
2747   F1BD 8D 37 A4           STA TAPTR2      ;CLR TAPE BUFF PTR
2748   F1C0 A9 00              LDA #T1I        ;RESET FREE RUNNING TO 1 SHOT
2749   F1C2 8D CB A4           STA ACR
2750   F1C5 20 9A FF           JSR PAT22       ;ADD 1 TO BLK COUNT & OUTPUT
2751   F1C8 AD 68 01           LDA BLKO        ;PUT BLK CNT IN FIRST LOC (TABUFF)
2752   F1CB 20 8B F1           JSR TOBYTE
2753   F1CE 20 AC EB    TABY3  JSR PLXY
2754   F1D1 60                 RTS
2755   F1D2             
2756   F1D2             ;CHCK ACTIVE BUFFER AND LOAD A CHR
2757   F1D2             ;CARRY=0 IF ONLY 1 BUFFER ,C=1 IF 2 BUFFERS
2758   F1D2 AD 12 A4    CKBUFF LDA INFLG
2759   F1D5 CD 13 A4           CMP OUTFLG
2760   F1D8 D0 08              BNE CBUFF1
2761   F1DA C9 54              CMP #'T'        ;SEE IF INFLG=OUTFLG = T
2762   F1DC D0 04              BNE CBUFF1
2763   F1DE 38                 SEC             ;USE PAGE 1 FOR OUTPUT BUFFER
2764   F1DF B5 AD              LDA TABUF2,X
2765   F1E1 60                 RTS
2766   F1E2 18          CBUFF1 CLC             ;USE SAME BUFFER FOR I/O
2767   F1E3 BD 16 01           LDA TABUFF,X
2768   F1E6 60                 RTS
2769   F1E7             
2770   F1E7             ;COMPUTE BLOCK CHECKSUM & PUT IT
2771   F1E7             ;AT THE END OF ACTIVE BUFFER
2772   F1E7 A9 00       BKCKSM LDA #0          ;CLEAR BLK CKSUM LOCAT
2773   F1E9 8D 66 01           STA TABUFF+80
2774   F1EC 8D 67 01           STA TABUFF+81
2775   F1EF A2 4F              LDX #79
2776   F1F1 20 D2 F1    BKCK1  JSR CKBUFF      ;GET CHR FROM EITHER BUFFER
2777   F1F4 18                 CLC
2778   F1F5 6D 66 01           ADC TABUFF+80   ;ADD TO CKSUM
2779   F1F8 8D 66 01           STA TABUFF+80
2780   F1FB 90 03              BCC *+5
2781   F1FD EE 67 01           INC TABUFF+81
2782   F200 CA                 DEX
2783   F201 10 EE              BPL BKCK1       ;DO THE WHOLE BUFFER
2784   F203 A2 50              LDX #80
2785   F205 AD 66 01           LDA TABUFF+80   ;PUT CKSUM INTO RIGHT BUFFER
2786   F208 20 0F F2           JSR BKCK2
2787   F20B E8                 INX
2788   F20C AD 67 01           LDA TABUFF+81
2789   F20F 48          BKCK2  PHA             ;OUTPUT A CHAR TO RIGHT BUFFER
2790   F210 20 D2 F1           JSR CKBUFF      ;GET WHICH BUFFER
2791   F213 68                 PLA
2792   F214 B0 04              BCS BKCK3       ;BRNCH TO SECOND BUFFER
2793   F216 9D 16 01           STA TABUFF,X
2794   F219 60                 RTS
2795   F21A 95 AD       BKCK3  STA TABUF2,X    ;TO PAG 1
2796   F21C 60                 RTS
2797   F21D             
2798   F21D             ;SET TAPE (1 OR 2) FOR OUTPUT
2799   F21D 20 C0 F2    TAOSET JSR SETSPD      ;SET UP SPEED (# OF HALF PULSES)
2800   F220 AD 35 A4           LDA TAPOUT      ;OUTPUT FLG (TAPE 1 OR 2)
2801   F223 20 1C EE           JSR TIOSET      ;SET PB4 OR PB5 TO ZERO
2802   F226 A9 EC              LDA #DATOUT+MOFF ;SET CA2=0 (DATA OUT)
2803   F228 8D CC A4           STA PCR
2804   F22B A9 C0              LDA #T1FR       ;SET TIMER IN FREE RUNNING
2805   F22D 8D CB A4           STA ACR
2806   F230 A9 00              LDA #00
2807   F232 8D C5 A4           STA T1CH        ;START TIMER T1
2808   F235 AE 09 A4           LDX GAP         ;OUTPUT 4*GAP SYN BYTES
2809   F238 A9 16       TAOS1  LDA #$16        ;SYN CHAR
2810   F23A 20 4A F2           JSR OUTTAP      ;TO TAPE
2811   F23D 20 4A F2           JSR OUTTAP
2812   F240 20 4A F2           JSR OUTTAP
2813   F243 20 4A F2           JSR OUTTAP
2814   F246 CA                 DEX
2815   F247 D0 EF              BNE TAOS1
2816   F249 60                 RTS
2817   F24A             
2818   F24A             ;OUTPUT ACC TO TAPE
2819   F24A 8E 2D A4    OUTTAP STX CPIY+3      ;SAVE X
2820   F24D A0 07              LDY #$07        ;FOR THE 8 BITS
2821   F24F 8C 27 A4           STY STIY
2822   F252 AE 08 A4           LDX TSPEED
2823   F255 30 39              BMI OUTTA1      ;IF ONE IS SUPER HIPER
2824   F257 48                 PHA
2825   F258 A0 02       TRY    LDY #2          ;SEND 3 UNITS
2826   F25A 8C 28 A4           STY STIY+1      ;STARTING AT 3700 HZ
2827   F25D BE 0A A4    ZON    LDX NPUL,Y      ;#OF HALF CYCLES
2828   F260 48                 PHA
2829   F261 B9 0B A4    ZON1   LDA TIMG,Y      ;SET UP LACTH FOR NEXT
2830   F264 8D C6 A4           STA T1LL        ;PULSE (80 OR CA) (FREC)
2831   F267 A9 00              LDA #0
2832   F269 8D C7 A4           STA T1LH
2833   F26C 2C CD A4    ZON2   BIT IFR         ;WAIT FOR PREVIOUS
2834   F26F 50 FB              BVC ZON2        ;CYCLE (T1 INT FLG)
2835   F271 AD C4 A4           LDA T1L         ;CLR INTERR FLG
2836   F274 CA                 DEX
2837   F275 D0 EA              BNE ZON1        ;SEND ALL CYCLES
2838   F277 68                 PLA
2839   F278 CE 28 A4           DEC STIY+1
2840   F27B F0 05              BEQ SETZ        ;BRCH IF LAST ONE
2841   F27D 30 07              BMI ROUT        ;BRCH IF NO MORE
2842   F27F 4A                 LSR A           ;TAKE NEXT BIT
2843   F280 90 DB              BCC ZON         ;...IF IT'S A ONE...
2844   F282 A0 00       SETZ   LDY #0          ;SWITCH TO 2400 HZ
2845   F284 F0 D7              BEQ ZON         ;UNCONDITIONAL BRCH
2846   F286 CE 27 A4    ROUT   DEC STIY        ;ONE LESS BIT
2847   F289 10 CD              BPL TRY         ;ANY MORE? GO BACK
2848   F28B 68          ROUT1  PLA             ;RECOVER CHR
2849   F28C AE 2D A4           LDX CPIY+3      ;RESTORE X
2850   F28F 60                 RTS
2851   F290             
2852   F290             ;OUTPUT HALF PULSE FOR 0 (1200 HZ) &
2853   F290             ;TWO HALF PULSES FOR 1 (2400 HZ)  (00 TSPEED)
2854   F290 48          OUTTA1 PHA
2855   F291 8D 28 A4           STA STIY+1      ;STORE ACC
2856   F294 A2 02       OUTTA2 LDX #2          ;# OF HALF PULSES
2857   F296 A9 D0              LDA #$D0        ;1/2 PULSE OF 2400
2858   F298 8D C6 A4           STA T1LL
2859   F29B A9 00              LDA #00
2860   F29D 8D C7 A4           STA T1LH
2861   F2A0 20 BC FF           JSR PATC25      ;WAIT TILL COMPLETED
2862   F2A3 4E 28 A4           LSR STIY+1      ;GET BITS FROM CHR
2863   F2A6 B0 0A              BCS OUTTA3
2864   F2A8 A9 A0              LDA #$A0        ;BIT=0 ,OUTPUT 1200 HZ
2865   F2AA 8D C6 A4           STA T1LL
2866   F2AD A9 01              LDA #$01
2867   F2AF 8D C7 A4           STA T1LH
2868   F2B2 20 BC FF    OUTTA3 JSR PATC25
2869   F2B5 CA                 DEX
2870   F2B6 10 FA              BPL OUTTA3      ;OUTPUT 3 HALF PULSES
2871   F2B8 88                 DEY
2872   F2B9 10 D9              BPL OUTTA2      ;ALL BITS ?
2873   F2BB 4C 8B F2           JMP ROUT1       ;RESTORE REGS
2874   F2BE EA                 NOP
2875   F2BF EA                 NOP
2876   F2C0             
2877   F2C0             ;SET SPEED FROM NORMAL TO 3 TIMES NORMAL
2878   F2C0 AD 08 A4    SETSPD LDA TSPEED      ;SPEED FLG
2879   F2C3 6A                 ROR A           ;NORMAL OR 3* NORM
2880   F2C4 A9 0C              LDA #12
2881   F2C6 90 02              BCC SETSP1
2882   F2C8 A9 04              LDA #4
2883   F2CA 8D 0A A4    SETSP1 STA NPUL
2884   F2CD A9 12              LDA #18
2885   F2CF 90 02              BCC SETSP2
2886   F2D1 A9 06              LDA #6
2887   F2D3 8D 0C A4    SETSP2 STA TIMG+1
2888   F2D6 60                 RTS
2889   F2D7             ;.FILE A3/2
2890   F2D7             
2891   F2D7             ; ADDRESS TABLE FOR EACH PRINT COLUMN
2892   F2D7             ; EACH TBL CONTAINS DOT PATTERNS FOR 1 OF THE 5 COLUMNS.
2893   F2D7             ;   DATA ARE STORED WITH EACH BYTE DEFINING ONE COLUMN...
2894   F2D7             ; OF A CHARACTER, WITH THE TOP DOT CORRESPONDING TO THE..
2895   F2D7             ; LSB IN THE BYTE
2896   F2D7 E1 F2 21 F3 MTBL   .DW COL0,COL1,COL2,COL3,COL4
2896   F2DB 61 F3 A1 F3 
2896   F2DF E1 F3 
2897   F2E1             
2898   F2E1             ;DOT PATTERNS FOR COLUMN ZERO (LEFTMOST COLUMN)
2899   F2E1 3E 7E 7F 3E COL0   .DB $3E,$7E,$7F,$3E,$7F,$7F,$7F,$3E  ;@ -- G
2899   F2E5 7F 7F 7F 3E 
2900   F2E9 7F 00 20 7F        .DB $7F,$00,$20,$7F,$7F,$7F,$7F,$3E  ;H -- O
2900   F2ED 7F 7F 7F 3E 
2901   F2F1 7F 3E 7F 46        .DB $7F,$3E,$7F,$46,$01,$3F,$07,$7F  ;P -- W
2901   F2F5 01 3F 07 7F 
2902   F2F9 63 07 61 7F        .DB $63,$07,$61,$7F,$03,$00,$02,$40  ;X -- (
2902   F2FD 03 00 02 40 
2903   F301 00 00 00 14        .DB $00,$00,$00,$14,$24,$63,$60,$00  ;  -- '
2903   F305 24 63 60 00 
2904   F309 00 00 14 08        .DB $00,$00,$14,$08,$40,$08,$40,$60  ;( -- /
2904   F30D 40 08 40 60 
2905   F311 3E 44 62 41        .DB $3E,$44,$62,$41,$18,$27,$3C,$01  ;0 -- 7
2905   F315 18 27 3C 01 
2906   F319 36 46 00 40        .DB $36,$46,$00,$40,$08,$14,$41,$02  ;8 -- ?
2906   F31D 08 14 41 02 
2907   F321             
2908   F321             ;DOT PATTERNS FOR COLUMN 1
2909   F321 41 09 49 41 COL1   .DB $41,$09,$49,$41,$41,$49,$09,$41  ;@ -- G
2909   F325 41 49 09 41 
2910   F329 08 41 40 08        .DB $08,$41,$40,$08,$40,$02,$06,$41  ;H -- O
2910   F32D 40 02 06 41 
2911   F331 09 41 09 49        .DB $09,$41,$09,$49,$01,$40,$18,$20  ;P -- W
2911   F335 01 40 18 20 
2912   F339 14 08 51 41        .DB $14,$08,$51,$41,$04,$00,$01,$40  ;X -- (
2912   F33D 04 00 01 40 
2913   F341 00 00 07 7F        .DB $00,$00,$07,$7F,$2A,$13,$4E,$04  ;  -- '
2913   F345 2A 13 4E 04 
2914   F349 1C 41 08 08        .DB $1C,$41,$08,$08,$30,$08,$00,$10  ;( -- /
2914   F34D 30 08 00 10 
2915   F351 51 42 51 41        .DB $51,$42,$51,$41,$14,$45,$4A,$71  ;0 -- 7
2915   F355 14 45 4A 71 
2916   F359 49 49 00 34        .DB $49,$49,$00,$34,$14,$14,$41,$01  ;8 -- ?
2916   F35D 14 14 41 01 
2917   F361             
2918   F361             ;DOT PATTERNS FOR COLUMN 2
2919   F361 5D 09 49 41 COL2   .DB $5D,$09,$49,$41,$41,$49,$09,$41  ;@ -- G
2919   F365 41 49 09 41 
2920   F369 08 7F 41 14        .DB $08,$7F,$41,$14,$40,$0C,$08,$41  ;H -- O
2920   F36D 40 0C 08 41 
2921   F371 09 51 19 49        .DB $09,$51,$19,$49,$7F,$40,$60,$18  ;P -- W
2921   F375 7F 40 60 18 
2922   F379 08 78 49 41        .DB $08,$78,$49,$41,$08,$41,$01,$40  ;X -- (
2922   F37D 08 41 01 40 
2923   F381 00 4F 00 14        .DB $00,$4F,$00,$14,$7F,$08,$59,$02  ;  -- '
2923   F385 7F 08 59 02 
2924   F389 22 22 3E 3E        .DB $22,$22,$3E,$3E,$00,$08,$00,$08  ;( -- /
2924   F38D 00 08 00 08 
2925   F391 49 7F 51 49        .DB $49,$7F,$51,$49,$12,$45,$49,$09  ;0 -- 7
2925   F395 12 45 49 09 
2926   F399 49 49 44 00        .DB $49,$49,$44,$00,$22,$14,$22,$51  ;8 -- ?
2926   F39D 22 14 22 51 
2927   F3A1             
2928   F3A1             ;DOT PATTERNS FOR COLUMN 3
2929   F3A1 55 09 49 41 COL3   .DB $55,$09,$49,$41,$22,$49,$09,$49  ;@ -- G
2929   F3A5 22 49 09 49 
2930   F3A9 08 41 3F 22        .DB $08,$41,$3F,$22,$40,$02,$30,$41  ;H -- O
2930   F3AD 40 02 30 41 
2931   F3B1 09 21 29 49        .DB $09,$21,$29,$49,$01,$40,$18,$20  ;P -- W
2931   F3B5 01 40 18 20 
2932   F3B9 14 08 45 00        .DB $14,$08,$45,$00,$10,$41,$01,$40  ;X -- (
2932   F3BD 10 41 01 40 
2933   F3C1 00 00 07 7F        .DB $00,$00,$07,$7F,$2A,$64,$26,$01  ;  -- '
2933   F3C5 2A 64 26 01 
2934   F3C9 41 1C 08 08        .DB $41,$1C,$08,$08,$00,$08,$00,$04  ;( -- /
2934   F3CD 00 08 00 04 
2935   F3D1 45 40 49 55        .DB $45,$40,$49,$55,$7F,$45,$49,$05  ;0 -- 7
2935   F3D5 7F 45 49 05 
2936   F3D9 49 29 00 00        .DB $49,$29,$00,$00,$41,$14,$14,$09  ;8 -- ?
2936   F3DD 41 14 14 09 
2937   F3E1             ;DOT PATTERNS FOR COLUMN 4
2938   F3E1 1E 7E 36 22 COL4   .DB $1E,$7E,$36,$22,$1C,$41,$01,$7A  ;@ -- G
2938   F3E5 1C 41 01 7A 
2939   F3E9 7F 00 01 41        .DB $7F,$00,$01,$41,$40,$7F,$7F,$3E  ;H -- O
2939   F3ED 40 7F 7F 3E 
2940   F3F1 06 5E 46 31        .DB $06,$5E,$46,$31,$01,$3F,$07,$7F  ;P -- W
2940   F3F5 01 3F 07 7F 
2941   F3F9 63 07 43 00        .DB $63,$07,$43,$00,$60,$7F,$02,$40  ;X -- (
2941   F3FD 60 7F 02 40 
2942   F401 00 00 00 14        .DB $00,$00,$00,$14,$12,$63,$50,$00  ;  -- '
2942   F405 12 63 50 00 
2943   F409 00 00 14 08        .DB $00,$00,$14,$08,$00,$08,$00,$03  ;( -- /
2943   F40D 00 08 00 03 
2944   F411 3E 40 46 22        .DB $3E,$40,$46,$22,$10,$39,$31,$03  ;0 -- 7
2944   F415 10 39 31 03 
2945   F419 36 1E 00 00        .DB $36,$1E,$00,$00,$41,$14,$08,$06  ;8 -- ?
2945   F41D 41 14 08 06 
2946   F421             
2947   F421             ;ASCII CHARACTERS FOR KB
2948   F421 20 08 00 0D ROW1   .DB $20,$08,$00,$0D,$00,$00,$00,$00
2948   F425 00 00 00 00 
2949   F429 00 60 5C 00 ROW2   .DB $00,$60,'\',$00,$00,$00,$7F,$00
2949   F42D 00 00 7F 00 
2950   F431 2E 4C 50 2D ROW3   .DB ".LP-:0;/"
2950   F435 3A 30 3B 2F 
2951   F439 4D 4A 49 4F ROW4   .DB "MJIO98K,"
2951   F43D 39 38 4B 2C 
2952   F441 42 47 59 55 ROW5   .DB "BGYU76HN"
2952   F445 37 36 48 4E 
2953   F449 43 44 52 54 ROW6   .DB "CDRT54FV"
2953   F44D 35 34 46 56 
2954   F451 5A 41 57 45 ROW7   .DB "ZAWE32SX"
2954   F455 33 32 53 58 
2955   F459 00 00 1B 51 ROW8   .DB $00,$00,$1B,"Q1",$5E,"]["
2955   F45D 31 5E 5D 5B 
2956   F461             
2957   F461             ;DISASSEMBLE INSTRUCTIONS AND SHOW REGS IS REGF SET
2958   F461 AD 0E A4    REGQ   LDA REGF        ;GET FLAG
2959   F464 F0 06              BEQ DISASM
2960   F466 20 32 E2           JSR REG1        ;SHOW THE SIX REGS
2961   F469 20 24 EA           JSR CRCK        ;<CR>
2962   F46C             
2963   F46C 20 45 F5    DISASM JSR PRBL2
2964   F46F 20 3C F5           JSR PRPC        ;OUTPUT PROG COUNTR
2965   F472 A0 00              LDY #0
2966   F474 20 56 EB           JSR PCLLD
2967   F477 A8                 TAY
2968   F478 4A                 LSR A
2969   F479 90 0B              BCC IEVEN
2970   F47B 4A                 LSR A
2971   F47C B0 17              BCS ERR
2972   F47E C9 22              CMP #$22
2973   F480 F0 13              BEQ ERR
2974   F482 29 07              AND #7
2975   F484 09 80              ORA #$80
2976   F486 4A          IEVEN  LSR A
2977   F487 AA                 TAX
2978   F488 BD 5B F5           LDA MODE,X
2979   F48B B0 04              BCS RTMODE
2980   F48D 4A                 LSR A
2981   F48E 4A                 LSR A
2982   F48F 4A                 LSR A
2983   F490 4A                 LSR A
2984   F491 29 0F       RTMODE AND #$F
2985   F493 D0 04              BNE GETFMT
2986   F495 A0 80       ERR    LDY #$80
2987   F497 A9 00              LDA #0
2988   F499 AA          GETFMT TAX
2989   F49A BD 9F F5           LDA MODE2,X
2990   F49D 8D 16 01           STA FORMA
2991   F4A0 29 03              AND #3
2992   F4A2 85 EA              STA LENGTH
2993   F4A4 98                 TYA             ;OPCODE
2994   F4A5 29 8F              AND #$8F
2995   F4A7 AA                 TAX
2996   F4A8 98                 TYA             ;OPCODE IN A AGAIN
2997   F4A9 A0 03              LDY #3
2998   F4AB E0 8A              CPX #$8A
2999   F4AD F0 0B              BEQ MNNDX3
3000   F4AF 4A          MNNDX1 LSR A
3001   F4B0 90 08              BCC MNNDX3
3002   F4B2 4A                 LSR A
3003   F4B3 4A          MNNDX2 LSR A
3004   F4B4 09 20              ORA #$20
3005   F4B6 88                 DEY
3006   F4B7 D0 FA              BNE MNNDX2
3007   F4B9 C8                 INY
3008   F4BA 88          MNNDX3 DEY
3009   F4BB D0 F2              BNE MNNDX1
3010   F4BD 48                 PHA             ;SAVE MNEMONIC TABLE INDEX
3011   F4BE 20 56 EB           JSR PCLLD
3012   F4C1 20 46 EA           JSR NUMA
3013   F4C4 20 45 F5           JSR PRBL2       ;PRINT LAST BLANK
3014   F4C7 68                 PLA
3015   F4C8 A8                 TAY
3016   F4C9 B9 B9 F5           LDA MNEML,Y
3017   F4CC 8D 17 01           STA LMNEM
3018   F4CF B9 F9 F5           LDA MNEMR,Y
3019   F4D2 8D 18 01           STA RMNEM
3020   F4D5 A2 03              LDX #3          ;MUST BE
3021   F4D7 A9 00       PRMN1  LDA #0
3022   F4D9 A0 05              LDY #5
3023   F4DB 0E 18 01    PRMN2  ASL RMNEM
3024   F4DE 2E 17 01           ROL LMNEM
3025   F4E1 2A                 ROL A
3026   F4E2 88                 DEY
3027   F4E3 D0 F6              BNE PRMN2
3028   F4E5 69 BF              ADC #'?'+$80    ;ADD "?" OFFSET
3029   F4E7 20 BC E9           JSR OUTALL
3030   F4EA CA                 DEX
3031   F4EB D0 EA              BNE PRMN1
3032   F4ED 20 45 F5           JSR PRBL2
3033   F4F0 A2 06              LDX #6
3034   F4F2 A9 00              LDA #0
3035   F4F4 8D 29 A4           STA STIY+2      ;FLAG
3036   F4F7 E0 03       PRADR1 CPX #3
3037   F4F9 D0 1E              BNE PRADR3      ;IF X=3 PRINT ADDR VALUE
3038   F4FB A4 EA              LDY LENGTH
3039   F4FD F0 1A              BEQ PRADR3      ;1 BYTE INSTR
3040   F4FF AD 16 01    PRADR2 LDA FORMA
3041   F502 C9 E8              CMP #$E8        ;RELATIVE ADDRESSING
3042   F504 20 56 EB           JSR PCLLD
3043   F507 B0 27              BCS RELADR
3044   F509             ;SE IF SYMBOL
3045   F509 48                 PHA
3046   F50A AD 29 A4           LDA STIY+2
3047   F50D D0 03              BNE MR11A
3048   F50F EE 29 A4           INC STIY+2      ;SHOW WE WERE HERE
3049   F512             
3050   F512 68          MR11A  PLA
3051   F513 20 46 EA           JSR NUMA
3052   F516 88                 DEY
3053   F517 D0 E6              BNE PRADR2
3054   F519 0E 16 01    PRADR3 ASL FORMA
3055   F51C 90 0E              BCC PRADR4
3056   F51E BD AC F5           LDA CHAR1-1,X
3057   F521 20 BC E9           JSR OUTALL
3058   F524 BD B2 F5           LDA CHAR2-1,X
3059   F527 F0 03              BEQ PRADR4
3060   F529 20 BC E9           JSR OUTALL
3061   F52C CA          PRADR4 DEX
3062   F52D D0 C8              BNE PRADR1
3063   F52F 60                 RTS
3064   F530 20 4D F5    RELADR JSR PCADJ3
3065   F533 AA                 TAX
3066   F534 E8                 INX
3067   F535 D0 01              BNE PRNTXY
3068   F537 C8                 INY
3069   F538 98          PRNTXY TYA
3070   F539 4C 42 EA           JMP WRAX        ;PRINT A &X
3071   F53C AD 26 A4    PRPC   LDA SAVPC+1     ;PRINT PC
3072   F53F AE 25 A4           LDX SAVPC
3073   F542 20 42 EA           JSR WRAX
3074   F545 A9 20       PRBL2  LDA #' '
3075   F547 4C BC E9           JMP OUTALL
3076   F54A A5 EA              LDA LENGTH
3077   F54C 38                 SEC
3078   F54D AC 26 A4    PCADJ3 LDY SAVPC+1     ;PRG CNTR HIGH
3079   F550 AA                 TAX
3080   F551 10 01              BPL PCADJ4
3081   F553 88                 DEY
3082   F554 6D 25 A4    PCADJ4 ADC SAVPC       ;PROG CNTR LOW
3083   F557 90 01              BCC RTS1
3084   F559 C8                 INY
3085   F55A 60          RTS1   RTS
3086   F55B             
3087   F55B 40 02 45 03 MODE   .DB $40,2,$45,3,$D0,8,$40,9
3087   F55F D0 08 40 09 
3088   F563 30 22 45 33        .DB $30,$22,$45,$33,$D0,8,$40,9
3088   F567 D0 08 40 09 
3089   F56B 40 02 45 33        .DB $40,2,$45,$33,$D0,8,$40,9
3089   F56F D0 08 40 09 
3090   F573 40 02 45 B3        .DB $40,2,$45,$B3,$D0,8,$40,9
3090   F577 D0 08 40 09 
3091   F57B 00 22 44 33        .DB 0,$22,$44,$33,$D0,$8C,$44,0
3091   F57F D0 8C 44 00 
3092   F583 11 22 44 33        .DB $11,$22,$44,$33,$D0,$8C,$44,$9A
3092   F587 D0 8C 44 9A 
3093   F58B 10 22 44 33        .DB $10,$22,$44,$33
3094   F58F D0 08 40 09        .DB $D0,8,$40,9
3095   F593 10 22 44 33        .DB $10,$22,$44,$33,$D0,8,$40,9
3095   F597 D0 08 40 09 
3096   F59B 62 13 78 A9        .DB $62,$13,$78,$A9
3097   F59F             
3098   F59F 00 21 01 02 MODE2  .DB 0,$21,1,2,0,$80,$59,$4D
3098   F5A3 00 80 59 4D 
3099   F5A7 11 12 06 4A        .DB $11,$12,6,$4A,5,$1D
3099   F5AB 05 1D 
3100   F5AD             
3101   F5AD 2C 29 2C 23 CHAR1  .DB ",",$29,",#(","."
3101   F5B1 28 2E 
3102   F5B3 59 00 58 00 CHAR2  .DB "Y",0,"X",0,0,"A"
3102   F5B7 00 41 
3103   F5B9             
3104   F5B9 1C 8A 1C 23 MNEML  .DB $1C,$8A,$1C,$23,$5D,$8B,$1B
3104   F5BD 5D 8B 1B 
3105   F5C0 A1                 .DB $A1
3106   F5C1 9D 8A 1D 23        .DB $9D,$8A,$1D,$23,$9D,$8B,$1D,$A1
3106   F5C5 9D 8B 1D A1 
3107   F5C9 00 29 19 AE        .DB 0,$29,$19,$AE,$69,$A8,$19,$23
3107   F5CD 69 A8 19 23 
3108   F5D1 24 53 1B 23        .DB $24,$53,$1B,$23,$24,$53,$19,$A1
3108   F5D5 24 53 19 A1 
3109   F5D9 00 1A 5B 5B        .DB 0,$1A,$5B,$5B,$A5,$69,$24,$24
3109   F5DD A5 69 24 24 
3110   F5E1 AE AE A8 AD        .DB $AE,$AE,$A8,$AD,$29,0,$7C,0
3110   F5E5 29 00 7C 00 
3111   F5E9 15 9C 6D 9C        .DB $15,$9C,$6D,$9C,$A5,$69,$29,$53
3111   F5ED A5 69 29 53 
3112   F5F1 84 13 34 11        .DB $84,$13,$34,$11,$A5,$69,$23,$A0
3112   F5F5 A5 69 23 A0 
3113   F5F9             
3114   F5F9 D8 62 5A 48 MNEMR  .DB $D8,$62,$5A,$48,$26,$62,$94
3114   F5FD 26 62 94 
3115   F600 88                 .DB $88
3116   F601 54 44 C8 54        .DB $54,$44,$C8,$54,$68,$44,$E8,$94
3116   F605 68 44 E8 94 
3117   F609 00 B4 08 84        .DB 0,$B4,8,$84,$74,$B4,$28,$6E
3117   F60D 74 B4 28 6E 
3118   F611 74 F4 CC 4A        .DB $74,$F4,$CC,$4A,$72,$F2,$A4,$8A
3118   F615 72 F2 A4 8A 
3119   F619 00 AA A2 A2        .DB 0,$AA,$A2,$A2,$74,$74,$74,$72
3119   F61D 74 74 74 72 
3120   F621 44 68 B2 32        .DB $44,$68,$B2,$32,$B2,0,$22,0
3120   F625 B2 00 22 00 
3121   F629 1A 1A 26 26        .DB $1A,$1A,$26,$26,$72,$72,$88,$C8
3121   F62D 72 72 88 C8 
3122   F631 C4 CA 26 48        .DB $C4,$CA,$26,$48,$44,$44,$A2,$C8
3122   F635 44 44 A2 C8 
3123   F639             
3124   F639             ;*******************************
3125   F639             ;***    AIM TEXT EDITOR      ***
3126   F639             ;***      05/01/78           ***
3127   F639             ;*******************************
3128   F639             
3129   F639             ; R=READ FROM ANY INPUT DEVICE
3130   F639             ; I=INSERT A LINE FROM INPUT DEV
3131   F639             ; K=DELETE A LINE
3132   F639             ; U-GO UP ONE LINE
3133   F639             ; D=GO DOWN ONE LINE
3134   F639             ; L=LIST LINES TO OUTPUT DEV
3135   F639             ; T=GO TO TOP OF TEXT
3136   F639             ; B=GO TO BOTTOM OF TEXT
3137   F639             ; F=FIND STRING
3138   F639             ; C=CHANGE STRING TO NEW STRING
3139   F639             ; Q=QUIT EDITOR
3140   F639             ; <SPACE>=DISPLAY CURRENT LINE
3141   F639             
3142   F639             ;***** E COMMAND-EDITOR ENTRY (FROM MONITOR) *****
3143   F639 20 13 EA    EDIT   JSR CRLOW
3144   F63C A0 6C              LDY #EMSG1-M1
3145   F63E 20 AF E7           JSR KEP         ;START UP MSG
3146   F641 20 13 EA           JSR CRLOW
3147   F644 20 A3 E7    EDI0   JSR FROM
3148   F647 B0 FB              BCS EDI0
3149   F649 AD 1E A4           LDA CKSUM       ;IS CLR IF ADDR WAS INPUTTED
3150   F64C F0 03              BEQ *+5
3151   F64E 20 DB E2           JSR WRITAZ      ;OUTPUT DEFAULT ADDR (0200)
3152   F651 A2 01              LDX #1
3153   F653 BD 1C A4    EDI1   LDA ADDR,X
3154   F656 95 E3              STA TEXT,X
3155   F658 95 E1              STA BOTLN,X
3156   F65A 9D 1A A4           STA S1,X        ;FOR MEMORY TEST
3157   F65D CA                 DEX
3158   F65E 10 F3              BPL EDI1
3159   F660 20 3B E8           JSR BLANK2
3160   F663 20 A7 E7    EDI2   JSR TO          ;END
3161   F666 B0 FB              BCS EDI2
3162   F668 20 BC F8           JSR TOPNO       ;TRANSF TEXT TO ADDR FOR RAM CHECK
3163   F66B AD 1E A4           LDA CKSUM       ;IS CLR IF ADDR WAS INPUTTED
3164   F66E F0 10              BEQ EDI4        ;BRNCH IF NOT DEFAULT VALUE
3165   F670 20 34 F9           JSR SAVNOW
3166   F673 20 B6 F6    EDI3   JSR EDI         ;CARRY IS SET IF NO RAM THERE
3167   F676 90 FB              BCC EDI3
3168   F678 A9 00              LDA #0          ;SET UPPER LIMIT TO BEGINNING...
3169   F67A 8D 1C A4           STA ADDR        ;OF PAGE
3170   F67D 20 DB E2           JSR WRITAZ      ;OUTPUT DEFAULT VALUE ,UPPER LIMIT
3171   F680 AD 1C A4    EDI4   LDA ADDR
3172   F683 85 E5              STA END
3173   F685 AD 1D A4           LDA ADDR+1
3174   F688 85 E6              STA END+1
3175   F68A 20 34 F9           JSR SAVNOW
3176   F68D             ;NOW SEE IF MEMORY IS THERE
3177   F68D 20 B6 F6    EDI5   JSR EDI
3178   F690 90 FB              BCC EDI5
3179   F692 A5 E6              LDA END+1       ;CMP WITH END
3180   F694 CD 1D A4           CMP ADDR+1
3181   F697 F0 11              BEQ EDI7
3182   F699 B0 13              BCS EDI8
3183   F69B 20 BC F8    EDI6   JSR TOPNO       ;RESTORE NOWLN
3184   F69E A9 00              LDA #0
3185   F6A0 91 DF              STA (NOWLN),Y   ;END OF TEXT MARKER
3186   F6A2 20 13 EA           JSR CRLOW
3187   F6A5 A9 52              LDA #'R'        ;FORCE READ COMMAND
3188   F6A7 4C 8D FA           JMP ENTRY
3189   F6AA A5 E5       EDI7   LDA END         ;IF ZERO MEM IS OKAY
3190   F6AC F0 ED              BEQ EDI6
3191   F6AE A9 00       EDI8   LDA #0
3192   F6B0 8D 1C A4           STA ADDR
3193   F6B3 4C 33 EB           JMP MEMERR      ;NO MEMORY FOR THOSE LIMITS
3194   F6B6             
3195   F6B6 A0 00       EDI    LDY #0          ;CHCK IF MEMORY WRITES
3196   F6B8 20 B7 FE           JSR PATCH6      ;GET BYTE ADDR BY ADDR,ADDR+1
3197   F6BB 48                 PHA             ;SAVE IT
3198   F6BC A9 AA              LDA #$AA        ;SET THIS PATTERN
3199   F6BE 20 78 EB           JSR SADDR       ;CHCK IT
3200   F6C1 D0 09              BNE EDI2B
3201   F6C3 68                 PLA
3202   F6C4 20 78 EB           JSR SADDR       ;RESTORE CHR
3203   F6C7 EE 1D A4           INC ADDR+1      ;NEXT PAG
3204   F6CA 18                 CLC             ;IT WROTE
3205   F6CB 60                 RTS
3206   F6CC 38          EDI2B  SEC             ;DIDNT WRITE
3207   F6CD 68                 PLA
3208   F6CE 60                 RTS
3209   F6CF             
3210   F6CF             ;***** T COMMAND-REENTRY EDITOR *****
3211   F6CF             ;RE-ENTRY POINT,TEXT ALREADY THERE
3212   F6CF 20 24 EA    REENTR JSR CRCK        ;<CR> IF PRI ON
3213   F6D2 20 BC F8    TP     JSR TOPNO       ;GO TO TOP
3214   F6D5 4C B9 F7           JMP IN03A       ;DISPLAY LINE
3215   F6D8             
3216   F6D8             ;***** U COMMAND-UP LINE *****
3217   F6D8             ;GO UP ONE LINE BUT...
3218   F6D8             ;DOWN IN ADDRESSING MEMORY
3219   F6D8 20 DB F8    DNNO   JSR ATTOP       ;THIS RTN DOESNT PRINT
3220   F6DB 90 06              BCC DOW1        ;NOT TOP
3221   F6DD 20 27 F7           JSR PLNE        ;ARE AT TOP
3222   F6E0 4C 78 FA           JMP ERR0
3223   F6E3 A0 00       DOW1   LDY #0
3224   F6E5 20 1D F9           JSR SUB         ;DECREMENT NOWLN PAST <CR>
3225   F6E8 20 1D F9    DOW2   JSR SUB
3226   F6EB 20 DB F8           JSR ATTOP
3227   F6EE B0 30              BCS UP4
3228   F6F0 B1 DF              LDA (NOWLN),Y
3229   F6F2 C9 0D              CMP #CR
3230   F6F4 D0 F2              BNE DOW2
3231   F6F6 4C 28 F9           JMP AD1
3232   F6F9             
3233   F6F9             ;***** D COMMAND-DOWN LINE *****
3234   F6F9             ;GO DOWN ONE LINE BUT...
3235   F6F9             ;UP IN ADDRESSING MEMORY
3236   F6F9 20 09 F7    UP     JSR UPNO
3237   F6FC 20 27 F7           JSR PLNE        ;DISPLAY LINE & CHCK BOTTOM
3238   F6FF 20 E9 F8           JSR ATBOT
3239   F702 90 1C              BCC UP4
3240   F704 A0 72              LDY #EMSG2-M1   ;PRINT "END"
3241   F706 4C AF E7           JMP KEP
3242   F709 A0 00       UPNO   LDY #0
3243   F70B 20 E9 F8           JSR ATBOT
3244   F70E 90 03              BCC UP1
3245   F710 4C 5C FA           JMP ENDERR
3246   F713 B1 DF       UP1    LDA (NOWLN),Y
3247   F715 F0 09              BEQ UP4
3248   F717 C8                 INY
3249   F718 C9 0D              CMP #CR
3250   F71A D0 F7              BNE UP1
3251   F71C 98                 TYA
3252   F71D 20 2A F9           JSR ADDA        ;ADD LENGTH TO CURRENT LINE
3253   F720 60          UP4    RTS
3254   F721             
3255   F721             ;***** B COMMAND-GO TO BOTTOM *****
3256   F721 20 C5 F8    BT     JSR SETBOT
3257   F724             ;START U-COMMAND HERE
3258   F724 20 D8 F6    DOWN   JSR DNNO        ;U COMMAND
3259   F727             
3260   F727             ;***** <SPACE> COMMAND-DISPLAY CURRENT LINE *****
3261   F727 A0 00       PLNE   LDY #0          ;PRINT CURRENT LINE
3262   F729 B1 DF       P02    LDA (NOWLN),Y
3263   F72B F0 0E              BEQ P01         ;PAST END ?
3264   F72D C9 0D              CMP #CR         ;DONE?
3265   F72F F0 0A              BEQ P01
3266   F731 20 BC E9           JSR OUTALL      ;PUT IT SOMEWHERE
3267   F734 99 38 A4           STA DIBUFF,Y
3268   F737 C8                 INY
3269   F738 4C 29 F7           JMP P02
3270   F73B 84 EA       P01    STY LENGTH
3271   F73D 84 E9              STY OLDLEN
3272   F73F AC 13 A4    P03    LDY OUTFLG      ;ONE MORE <CR> FOR TAPE
3273   F742 C0 0D              CPY #CR
3274   F744 F0 03              BEQ P00
3275   F746 4C F0 E9           JMP CRLF        ;TO OUTPUT DEV
3276   F749 4C 24 EA    P00    JMP CRCK        ;<CR>, & DONT CLR DISPL
3277   F74C             
3278   F74C             ;***** K COMMAND-KILL LINE *****
3279   F74C             ;DELETE CURRENT LINE
3280   F74C 20 B6 F8    DLNE   JSR KIFLG       ;CLR K OR I COMM FLG
3281   F74F EA                 NOP
3282   F750 EA                 NOP
3283   F751 EA                 NOP
3284   F752 20 27 F7           JSR PLNE
3285   F755 20 E9 F8           JSR ATBOT
3286   F758 B0 CD              BCS PLNE        ;AT END OF TEXT
3287   F75A A0 00              LDY #0
3288   F75C 84 EA              STY LENGTH
3289   F75E 20 3F F9           JSR REPLAC      ;KILL LINE
3290   F761 4C 27 F7           JMP PLNE
3291   F764             
3292   F764             ;***** I COMMAND-INSERT LINE *****
3293   F764 20 6D F7    IN     JSR INL
3294   F767 20 F9 F6           JSR UP          ;DISPLAY NEXT LINE DOWN
3295   F76A 4C 78 FA           JMP ERR0        ;IF AT BOTTOM PRINT "END"
3296   F76D 20 B6 F8    INL    JSR KIFLG       ;CLR K OR I COMM FLG
3297   F770 A0 00              LDY #0          ;GET LINE INTO DIBUFF
3298   F772 84 E9              STY OLDLEN
3299   F774 20 BD E7           JSR PROMPT
3300   F777 20 44 EB           JSR CLR
3301   F77A 20 93 E9    IN02   JSR INALL
3302   F77D 20 F8 FE           JSR PATC12      ;CLR, SO WE CAN OUTPUT TO PRI
3303   F780 C9 7F              CMP #$7F        ;RUB
3304   F782 4C 2A FF           JMP PATC17      ;NO ZEROS IN CASE OF PAPER TAPE
3305   F785 C9 0A       IN02A  CMP #LF
3306   F787 F0 F1              BEQ IN02
3307   F789 C9 0D              CMP #CR
3308   F78B F0 1B              BEQ IN03
3309   F78D C0 3C              CPY #60         ;DO NOT INCR Y IF 60
3310   F78F B0 08              BCS IN03B
3311   F791 99 38 A4           STA DIBUFF,Y
3312   F794 C8                 INY
3313   F795 C0 3C              CPY #60
3314   F797 D0 E1              BNE IN02        ;CONTIN , DISP WONT ALLOW > 60 CHR`
3315   F799 A0 3C       IN03B  LDY #60         ;SET Y TO MAX OF 60
3316   F79B A9 01              LDA #$01
3317   F79D 0D 11 A4           ORA PRIFLG      ;DO NOT OUTPUT TO PRI ANY MORE
3318   F7A0 8D 11 A4           STA PRIFLG      ;OTHERWISE CLOBBERS THE BUFFER
3319   F7A3 8C 15 A4           STY CURPO2
3320   F7A6 D0 D2              BNE IN02        ;GO BACK
3321   F7A8 84 EA       IN03   STY LENGTH
3322   F7AA C0 00              CPY #0          ;FIRST CHAR?
3323   F7AC D0 17              BNE IN05
3324   F7AE AD 19 A4           LDA COUNT       ;K OR I COMM FLG ?
3325   F7B1 D0 12              BNE IN05        ;BRANCH IF C COMMAND
3326   F7B3 20 24 EA           JSR CRCK        ;<CR> IF PRI PNTR DIFF FROM 0
3327   F7B6 20 03 FF           JSR PATC13      ;TURN ON TAPES & SET DEFAULT DEV
3328   F7B9 20 27 F7    IN03A  JSR PLNE        ;DISPLAY NEXT LINE DOWN
3329   F7BC 20 09 F7           JSR UPNO        ;PRINT "END" IF BOTTOM
3330   F7BF 20 D8 F6           JSR DNNO
3331   F7C2 4C 78 FA           JMP ERR0
3332   F7C5 20 3F F9    IN05   JSR REPLAC      ;INSERT THE LINE
3333   F7C8 4C 24 EA           JMP CRCK        ;<CR> IF PRI PTR NOT 0
3334   F7CB             
3335   F7CB             ;***** R COMMAND-READ LINE *****
3336   F7CB             ;READ TEXT FROM ANY INPUT DEVICE UNTIL
3337   F7CB             ;TWO CONSECUTIVE <CR> ARE ENCOUNTER.
3338   F7CB 20 48 E8    INPU   JSR WHEREI
3339   F7CE AC 12 A4           LDY INFLG       ;IF TAPE DO NOT ERRASE BUFFER
3340   F7D1 C0 54              CPY #'T'
3341   F7D3 F0 03              BEQ INPU1
3342   F7D5 20 13 EA           JSR CRLOW
3343   F7D8 20 6D F7    INPU1  JSR INL
3344   F7DB 20 09 F7           JSR UPNO        ;NEXT LINE
3345   F7DE 4C D8 F7           JMP INPU1
3346   F7E1             
3347   F7E1             ;***** L COMMAND-LIST LINES *****
3348   F7E1             ;PRINT FROM HERE N LINES TO ACTIVE OUTPUT DEV
3349   F7E1 20 37 E8    LST    JSR PSL1        ;PRINT "/"
3350   F7E4 20 85 E7           JSR GCNT        ;GET LINES COUNT
3351   F7E7 20 13 EA           JSR CRLOW
3352   F7EA 20 71 E8           JSR WHEREO      ;WHERE TO
3353   F7ED 4C F8 F7           JMP LST02       ;ONE MORE LINE
3354   F7F0 20 07 E9    LST01  JSR RCHEK
3355   F7F3 20 90 E7           JSR DONE
3356   F7F6 F0 0B              BEQ LST3
3357   F7F8 20 27 F7    LST02  JSR PLNE
3358   F7FB 20 09 F7           JSR UPNO        ;NEXT LINE
3359   F7FE 20 E9 F8           JSR ATBOT
3360   F801 90 ED              BCC LST01       ;NO
3361   F803 20 3F F7    LST3   JSR P03         ;ONE MORE CRLF FOR TAPE
3362   F806 20 0D FF           JSR PATC14      ;CLOSE TAPE IF NEEDED
3363   F809 4C 5C FA           JMP ENDERR
3364   F80C             
3365   F80C             ;***** F COMMAND-FIND STRING *****
3366   F80C             ;FIND STRING AND PRINT LINE TO TERMINAL
3367   F80C 20 1E F8    FCHAR  JSR FCH
3368   F80F AD 15 A4    FCHA1  LDA CURPO2      ;SAVE BUFFER PNTR
3369   F812 48                 PHA
3370   F813 20 44 EB           JSR CLR         ;CLEAR DISP PNTR
3371   F816 20 27 F7           JSR PLNE
3372   F819 68                 PLA
3373   F81A 8D 15 A4           STA CURPO2
3374   F81D 60                 RTS
3375   F81E             ;FIND A CHARACTER STRING
3376   F81E A0 00       FCH    LDY #0
3377   F820 20 BD E7           JSR PROMPT
3378   F823 20 5F E9    FC1    JSR RDRUP       ;GET THE CHARACTER
3379   F826 C9 0D              CMP #CR         ;REUSE OLD ARGUMENT??
3380   F828 D0 0A              BNE FC3
3381   F82A C0 00              CPY #0          ;FIRST CHAR?
3382   F82C D0 06              BNE FC3
3383   F82E 20 09 F7    FC2    JSR UPNO        ;NEXT LINE DOWN
3384   F831 4C 49 F8           JMP FC5
3385   F834 C9 0D       FC3    CMP #CR         ;DONE
3386   F836 F0 0B              BEQ FC4
3387   F838 99 EB 00           STA STRING,Y
3388   F83B C8                 INY
3389   F83C C0 14              CPY #20         ;MAX LENGTH
3390   F83E D0 E3              BNE FC1
3391   F840 4C 72 FA           JMP ERROR
3392   F843 20 24 EA    FC4    JSR CRCK        ;CLEAR DISPLAY
3393   F846 8C 29 A4           STY STIY+2      ;COUNT OF CHARACTERS
3394   F849 A0 00       FC5    LDY #0
3395   F84B 8C 15 A4           STY CURPO2      ;START AT BEGINNING OF LINENTR IS
3396   F84E AC 15 A4    FC6    LDY CURPO2      ;CLOBBER
3397   F851 A2 00              LDX #0
3398   F853 B1 DF       FC7    LDA (NOWLN),Y   ;GET THE CHARACTER
3399   F855 D0 03              BNE FC8         ;NOT AT END
3400   F857 4C 5C FA           JMP ENDERR
3401   F85A C9 0D       FC8    CMP #CR         ;END OF LINE
3402   F85C F0 D0              BEQ FC2
3403   F85E D5 EB              CMP STRING,X
3404   F860 F0 06              BEQ FC9
3405   F862 EE 15 A4           INC CURPO2
3406   F865 4C 4E F8           JMP FC6
3407   F868 C8          FC9    INY
3408   F869 E8                 INX
3409   F86A EC 29 A4           CPX STIY+2      ;DONE?
3410   F86D D0 E4              BNE FC7
3411   F86F 60                 RTS
3412   F870             
3413   F870             ;***** Q COMMAND-EXIT EDITOR *****
3414   F870             ; EXIT THE TEXT EDITOR NEATLY
3415   F870 20 13 EA    STOP   JSR CRLOW
3416   F873 4C A1 E1           JMP COMIN
3417   F876             
3418   F876             ;***** C COMMAND-CHANGE STRING *****
3419   F876             ;CHANGE STRING TO ANOTHER STRING IN A LINE
3420   F876 20 B2 F8    CHNG   JSR CFLG        ;SET C COMMAND FLG
3421   F879 20 0C F8           JSR FCHAR       ;FIND CORRECT LINE
3422   F87C 20 3C E9    CHN1   JSR READ        ;IS <CR> IF OK
3423   F87F C9 0D              CMP #CR
3424   F881 F0 09              BEQ CHN2
3425   F883 20 2E F8           JSR FC2         ;TRY NEXT ONE
3426   F886 20 0F F8           JSR FCHA1       ; SHOW LINE
3427   F889 4C 7C F8           JMP CHN1
3428   F88C AD 29 A4    CHN2   LDA STIY+2      ;GET CHAR COUNT
3429   F88F 85 E9              STA OLDLEN      ;GET READY FOR REPLAC
3430   F891 AD 15 A4           LDA CURPO2      ;PNTR TO BEGINNING OF STRING
3431   F894 48                 PHA             ;SAVE IT
3432   F895 20 2A F9           JSR ADDA        ;ADD TO NOWLN (LINE PNTR)
3433   F898 20 44 EB           JSR CLR         ;CLEAR DISP
3434   F89B A0 05              LDY #M3-M1      ;PRINT "TO"
3435   F89D 20 AF E7           JSR KEP
3436   F8A0 A0 00              LDY #0
3437   F8A2 20 7A F7           JSR IN02        ;GET NEW STRING & REPLAC
3438   F8A5 68                 PLA
3439   F8A6 AA                 TAX
3440   F8A7 F0 06              BEQ CHN4
3441   F8A9 20 1D F9    CHN3   JSR SUB         ;RESTORE NOWLN WHERE IT WAS
3442   F8AC CA                 DEX
3443   F8AD D0 FA              BNE CHN3
3444   F8AF 4C 27 F7    CHN4   JMP PLNE        ;DISPLAY THE CHANGED LINE
3445   F8B2             
3446   F8B2             ;THE FOLLOWING ARE SUBROUTINES USED BY COMMANDS
3447   F8B2 A9 01       CFLG   LDA #1          ;SET FLG FOR C COMMAND
3448   F8B4 D0 02              BNE KI2
3449   F8B6 A9 00       KIFLG  LDA #0          ;CLR K OR I COMMAND FLG
3450   F8B8 8D 19 A4    KI2    STA COUNT
3451   F8BB 60                 RTS
3452   F8BC             
3453   F8BC A5 E3       TOPNO  LDA TEXT        ;SET CURRENT LINE TO TOP
3454   F8BE A6 E4              LDX TEXT+1
3455   F8C0 85 DF       TPO1   STA NOWLN
3456   F8C2 86 E0              STX NOWLN+1
3457   F8C4 60                 RTS
3458   F8C5             
3459   F8C5 A5 E1       SETBOT LDA BOTLN       ;SET CURRENT LINE TO BOTTOM
3460   F8C7 A6 E2              LDX BOTLN+1
3461   F8C9 85 E7              STA SAVE
3462   F8CB 86 E8              STX SAVE+1
3463   F8CD 4C C0 F8           JMP TPO1
3464   F8D0             
3465   F8D0 AD 1C A4    RESNOW LDA ADDR        ;RESTORE CURRENT LINE ADDRESS
3466   F8D3 85 DF              STA NOWLN
3467   F8D5 AD 1D A4           LDA ADDR+1
3468   F8D8 85 E0              STA NOWLN+1
3469   F8DA 60                 RTS
3470   F8DB             
3471   F8DB             ; SEE IF CURRENT LINE AT TOP (C SET IF SO)
3472   F8DB A5 DF       ATTOP  LDA NOWLN
3473   F8DD C5 E3              CMP TEXT
3474   F8DF D0 16              BNE AT01
3475   F8E1 A5 E0              LDA NOWLN+1
3476   F8E3 C5 E4              CMP TEXT+1
3477   F8E5 D0 10              BNE AT01
3478   F8E7 38                 SEC
3479   F8E8 60                 RTS
3480   F8E9             
3481   F8E9             ; SEE IF CURRENT LINE AT BOTTOM (C SET IF SO)
3482   F8E9 A5 DF       ATBOT  LDA NOWLN
3483   F8EB A6 E0              LDX NOWLN+1
3484   F8ED C5 E1              CMP BOTLN
3485   F8EF D0 06              BNE AT01
3486   F8F1 E4 E2              CPX BOTLN+1
3487   F8F3 D0 02              BNE AT01
3488   F8F5 38          AT02   SEC
3489   F8F6 60                 RTS
3490   F8F7 18          AT01   CLC
3491   F8F8 60                 RTS
3492   F8F9             
3493   F8F9             ;SEE IF WE RAN PAST END OF BUFFER LIMIT
3494   F8F9 A5 E1       ATEND  LDA BOTLN
3495   F8FB A6 E2              LDX BOTLN+1
3496   F8FD E4 E6              CPX END+1       ;HIGH BYTE > OR = ?
3497   F8FF 90 F6              BCC AT01
3498   F901 D0 F2              BNE AT02
3499   F903 C5 E5              CMP END         ;LOW BYTE > OR = ?
3500   F905 90 F0              BCC AT01
3501   F907 B0 EC              BCS AT02
3502   F909             
3503   F909             ; SAVE CURRENT LINE (NEWLN) IN S1
3504   F909 A5 DF       NOWS1  LDA NOWLN
3505   F90B A6 E0              LDX NOWLN+1
3506   F90D 4C 16 F9           JMP ADDS1A
3507   F910             
3508   F910             ; MOVE ADDR INTO S1
3509   F910 AD 1C A4    ADDRS1 LDA ADDR
3510   F913 AE 1D A4           LDX ADDR+1
3511   F916 8D 1A A4    ADDS1A STA S1
3512   F919 8E 1B A4           STX S1+1
3513   F91C 60                 RTS
3514   F91D             
3515   F91D             ; SUBTRACT ONE FROM CURRENT LINE (NOWLN)
3516   F91D C6 DF       SUB    DEC NOWLN
3517   F91F A5 DF              LDA NOWLN
3518   F921 C9 FF              CMP #$FF
3519   F923 D0 02              BNE SUB1
3520   F925 C6 E0              DEC NOWLN+1
3521   F927 60          SUB1   RTS
3522   F928             
3523   F928             ; ADD ACC TO CURRENT LINE (NOWLN)
3524   F928 A9 01       AD1    LDA #1
3525   F92A 18          ADDA   CLC
3526   F92B 65 DF              ADC NOWLN
3527   F92D 85 DF              STA NOWLN
3528   F92F 90 02              BCC ADDA1
3529   F931 E6 E0              INC NOWLN+1
3530   F933 60          ADDA1  RTS
3531   F934             
3532   F934 A5 DF       SAVNOW LDA NOWLN       ;SAVE CURRENT LINE INTO ADDR
3533   F936 8D 1C A4           STA ADDR
3534   F939 A5 E0              LDA NOWLN+1
3535   F93B 8D 1D A4           STA ADDR+1
3536   F93E 60          REP2   RTS
3537   F93F             
3538   F93F             ;MOVE CURRENT TEXT AROUND TO HAVE
3539   F93F             ;SPACE TO PUT IN THE NEW BUFFER
3540   F93F A4 EA       REPLAC LDY LENGTH
3541   F941 C4 E9              CPY OLDLEN      ;COMPARE OLD AND NEW LENGTHS
3542   F943 D0 1A              BNE R2W         ;BRANCH IF DIFF
3543   F945 F0 07              BEQ R87         ;LENGTHS ARE EQUAL. JUST REPLACE
3544   F947 A9 0D       R8     LDA #CR
3545   F949 91 DF              STA (NOWLN),Y
3546   F94B 20 4A FA           JSR GOGO
3547   F94E             
3548   F94E             ;LENGTH = OLDLEN
3549   F94E 88          R87    DEY
3550   F94F C0 FF              CPY #$FF
3551   F951 F0 EB              BEQ REP2
3552   F953 B9 38 A4    R88    LDA DIBUFF,Y
3553   F956 91 DF              STA (NOWLN),Y
3554   F958 20 4A FA           JSR GOGO
3555   F95B 88                 DEY
3556   F95C 10 F5              BPL R88
3557   F95E 60                 RTS
3558   F95F B0 6E       R2W    BCS R100        ;LENGTH > OLDLEN
3559   F961             
3560   F961             ;LENGTH < OLDLEN
3561   F961 20 34 F9           JSR SAVNOW      ;PUT NOWLN INTO ADDR
3562   F964 20 10 F9           JSR ADDRS1      ;PUT IT IN S1 ALSO
3563   F967 A5 E9              LDA OLDLEN
3564   F969 38                 SEC
3565   F96A E5 EA              SBC LENGTH      ;GET DIFFERENCE IN LENGTHS
3566   F96C A4 EA              LDY LENGTH
3567   F96E D0 07              BNE RQP
3568   F970 AE 19 A4           LDX COUNT       ;C-COMM ?
3569   F973 D0 02              BNE RQP         ;YES, JUMP
3570   F975 69 00              ADC #0          ;INCLUDE <CR>
3571   F977 48          RQP    PHA
3572   F978 18                 CLC
3573   F979 6D 1A A4           ADC S1
3574   F97C 8D 1A A4           STA S1
3575   F97F 90 03              BCC R6
3576   F981 EE 1B A4           INC S1+1
3577   F984 A9 1A       R6     LDA #S1%256
3578   F986 20 58 EB           JSR LDAY
3579   F989 91 DF              STA (NOWLN),Y   ;...AND NOVE IT UP (DOWN IN ADDR)
3580   F98B 20 4A FA           JSR GOGO
3581   F98E AA                 TAX
3582   F98F AD 1A A4           LDA S1
3583   F992 C5 E1              CMP BOTLN       ;DONE ??
3584   F994 D0 07              BNE R5
3585   F996 AD 1B A4           LDA S1+1
3586   F999 C5 E2              CMP BOTLN+1
3587   F99B F0 0E              BEQ R7
3588   F99D 20 28 F9    R5     JSR AD1
3589   F9A0 EE 1A A4           INC S1
3590   F9A3 D0 03              BNE R55
3591   F9A5 EE 1B A4           INC S1+1
3592   F9A8 4C 84 F9    R55    JMP R6
3593   F9AB 20 D0 F8    R7     JSR RESNOW      ;RESTORE NOWLN
3594   F9AE 68                 PLA             ;RESTORE DIFFERENCE
3595   F9AF 8D 2A A4           STA CPIY        ;SAVE IT
3596   F9B2 A5 E1              LDA BOTLN
3597   F9B4 38                 SEC
3598   F9B5 ED 2A A4           SBC CPIY        ;AND SUBTRACT IT FROM BOTTOM
3599   F9B8 85 E1              STA BOTLN
3600   F9BA B0 02              BCS R9
3601   F9BC C6 E2              DEC BOTLN+1
3602   F9BE AD 19 A4    R9     LDA COUNT       ;C COMM OR K ,I COMM ?
3603   F9C1 D0 04              BNE R10
3604   F9C3 A4 EA              LDY LENGTH
3605   F9C5 D0 05              BNE R11
3606   F9C7 A4 EA       R10    LDY LENGTH
3607   F9C9 D0 83              BNE R87
3608   F9CB 60                 RTS
3609   F9CC 4C 47 F9    R11    JMP R8
3610   F9CF             
3611   F9CF             ;LENGTH > OLDLEN
3612   F9CF A5 EA       R100   LDA LENGTH      ;NEW LINE IS LONGER
3613   F9D1 38                 SEC
3614   F9D2 E5 E9              SBC OLDLEN
3615   F9D4 A4 E9              LDY OLDLEN
3616   F9D6 D0 02              BNE R101        ;ALREADY HAVE ROOM FOR CR
3617   F9D8 69 00              ADC #0          ;ADD ONE TO DIFFERENCE
3618   F9DA 48          R101   PHA
3619   F9DB 20 34 F9           JSR SAVNOW      ;NOWLN INTO S1
3620   F9DE 20 C5 F8           JSR SETBOT
3621   F9E1 A0 00              LDY #0
3622   F9E3 B1 DF       R102   LDA (NOWLN),Y
3623   F9E5 C9 00              CMP #0
3624   F9E7 F0 06              BEQ R108
3625   F9E9 20 28 F9           JSR AD1
3626   F9EC 4C E3 F9           JMP R102
3627   F9EF 68          R108   PLA
3628   F9F0 48                 PHA
3629   F9F1 18                 CLC
3630   F9F2 65 E1              ADC BOTLN       ;ADD DIFFERENCE TO END
3631   F9F4 85 E1              STA BOTLN       ;STORE NEW END
3632   F9F6 90 02              BCC R103
3633   F9F8 E6 E2              INC BOTLN+1
3634   F9FA 20 F9 F8    R103   JSR ATEND
3635   F9FD 90 0B              BCC R107
3636   F9FF A5 E7              LDA SAVE        ;RESTORE OLD BOTTOM
3637   FA01 85 E1              STA BOTLN
3638   FA03 A5 E8              LDA SAVE+1
3639   FA05 85 E2              STA BOTLN+1
3640   FA07 4C 5C FA           JMP ENDERR      ;RAN PAST BUFFER END
3641   FA0A 20 09 F9    R107   JSR NOWS1       ;SAVE CURRENT END
3642   FA0D 68                 PLA
3643   FA0E 18                 CLC
3644   FA0F 65 DF              ADC NOWLN
3645   FA11 85 DF              STA NOWLN
3646   FA13 90 02              BCC R104
3647   FA15 E6 E0              INC NOWLN+1
3648   FA17 A9 1A       R104   LDA #S1%256
3649   FA19 20 58 EB           JSR LDAY
3650   FA1C 91 DF              STA (NOWLN),Y
3651   FA1E 20 4A FA           JSR GOGO
3652   FA21 AD 1A A4           LDA S1
3653   FA24 CD 1C A4           CMP ADDR
3654   FA27 D0 08              BNE R105
3655   FA29 AD 1B A4           LDA S1+1
3656   FA2C CD 1D A4           CMP ADDR+1      ;BACK WHERE WE STARTED ??
3657   FA2F F0 13              BEQ R106        ;BRANCH IF DONE
3658   FA31 20 1D F9    R105   JSR SUB
3659   FA34 CE 1A A4           DEC S1
3660   FA37 AD 1A A4           LDA S1
3661   FA3A C9 FF              CMP #$FF
3662   FA3C D0 03              BNE R1051
3663   FA3E CE 1B A4           DEC S1+1
3664   FA41 4C 17 FA    R1051  JMP R104
3665   FA44 20 D0 F8    R106   JSR RESNOW
3666   FA47 4C BE F9           JMP R9
3667   FA4A             
3668   FA4A             ;SEE IF IT WROTE INTO MEMORY
3669   FA4A D1 DF       GOGO   CMP (NOWLN),Y
3670   FA4C F0 0D              BEQ GOGO1
3671   FA4E             ;MOVE ADDRESS
3672   FA4E A5 DF              LDA NOWLN
3673   FA50 8D 1C A4           STA ADDR
3674   FA53 A5 E0              LDA NOWLN+1
3675   FA55 8D 1D A4           STA ADDR+1
3676   FA58 4C 33 EB           JMP MEMERR
3677   FA5B 60          GOGO1  RTS             ;OK
3678   FA5C             
3679   FA5C 20 44 EB    ENDERR JSR CLR         ;CLEAR PNTR
3680   FA5F A0 72              LDY #EMSG2-M1   ;PRINT "END"
3681   FA61 20 AF E7           JSR KEP
3682   FA64 20 D8 F6           JSR DNNO        ;BACK UP TO LAST LINE
3683   FA67 20 42 E8           JSR TTYTST      ;IF TTY <CR>
3684   FA6A D0 03              BNE ENDE2
3685   FA6C 20 13 EA           JSR CRLOW
3686   FA6F 4C 78 FA    ENDE2  JMP ERR0
3687   FA72 20 FE E8    ERROR  JSR LL
3688   FA75 20 D4 E7           JSR QM
3689   FA78 20 44 EB    ERR0   JSR CLR
3690   FA7B A2 FF              LDX #$FF
3691   FA7D             COM    =ERR0
3692   FA7D 9A                 TXS
3693   FA7E 20 FE E8           JSR LL          ;I/O TO TERMINAL (KB,D/P OR TTY)
3694   FA81 D8                 CLD
3695   FA82 20 88 FA           JSR COMM
3696   FA85 4C 78 FA           JMP ERR0
3697   FA88             
3698   FA88             ;GET EDITOR COMMANDS & DECODE
3699   FA88 A2 00       COMM   LDX #0
3700   FA8A 20 BC FE           JSR PATCH8      ;READ A CHAR WITH "=< >"
3701   FA8D A2 0B       ENTRY  LDX #COMCN1
3702   FA8F DD AC FA    CD02   CMP COMTBL,X    ;COMPARE WITH ALLOWABLE COMMANDS
3703   FA92 F0 0C              BEQ CFND1       ;MATCH ,SO PROCESS COMMAND
3704   FA94 CA                 DEX
3705   FA95 10 F8              BPL CD02
3706   FA97 20 D4 E7           JSR QM          ;NOT IN LIST ,SO NOT LEGAL COMMAND
3707   FA9A 20 24 EA           JSR CRCK
3708   FA9D 4C 78 FA           JMP ERR0
3709   FAA0 20 17 FF    CFND1  JSR PATC15      ;<CR> & START DECODING COMMAND
3710   FAA3 BD B9 FA           LDA JTBL+1,X
3711   FAA6 8D 1B A4           STA S1+1
3712   FAA9 6C 1A A4           JMP (S1)
3713   FAAC             
3714   FAAC             COMCN1 =11
3715   FAAC             ;COMMAND TABLE
3716   FAAC 4B 20 52 49 COMTBL .DB "K RIUDLTBFQC"
3716   FAB0 55 44 4C 54 
3716   FAB4 42 46 51 43 
3717   FAB8 4C F7 27 F7 JTBL   .DW DLNE,PLNE,INPU,IN,DOWN,UP
3717   FABC CB F7 64 F7 
3717   FAC0 24 F7 F9 F6 
3718   FAC4 E1 F7 D2 F6        .DW LST,TP,BT,FCHAR,STOP,CHNG
3718   FAC8 21 F7 0C F8 
3718   FACC 70 F8 76 F8 
3719   FAD0             
3720   FAD0             ;READ FROM MEMORY FOR ASSEMBLER
3721   FAD0 98          MREAD  TYA
3722   FAD1 48                 PHA
3723   FAD2 A0 00              LDY #0
3724   FAD4 B1 DF              LDA (NOWLN),Y
3725   FAD6 8D 2A A4           STA CPIY
3726   FAD9 20 28 F9           JSR AD1
3727   FADC 68                 PLA
3728   FADD A8                 TAY
3729   FADE AD 2A A4           LDA CPIY
3730   FAE1 60                 RTS
3731   FAE2             
3732   FAE2             ;THIS PROGRAM CONVERS MNEMONIC INSTRUCTIONS INTO MACHINE
3733   FAE2             ;CODE AND STORES IT IN THE DESIGNATED MEMORY AREA
3734   FAE2             
3735   FAE2             ;ROM TABLE LOCATIONS:
3736   FAE2 00 02 00 08 TYPTR1 .DB 00,02,00,08,$F2,$FF,$80,01
3736   FAE6 F2 FF 80 01 
3737   FAEA C0 E2 C0 C0        .DB $C0,$E2,$C0,$C0,$FF,00,00
3737   FAEE FF 00 00 
3738   FAF1 08 00 10 80 TYPTR2 .DB 08,00,$10,$80,$40,$C0,00,$C0
3738   FAF5 40 C0 00 C0 
3739   FAF9 00 40 00 00        .DB $00,$40,00,00,$E4,$20,$80
3739   FAFD E4 20 80 
3740   FB00 00 FC 00 08 CORR   .DB 00,$FC,00,08,08,$F8,$FC,$F4
3740   FB04 08 F8 FC F4 
3741   FB08 0C 10 04 F4        .DB $0C,$10,04,$F4,00,$20,$10
3741   FB0C 00 20 10 
3742   FB0F 00 00 0F 01 SIZEM  .DB 00,00,$0F,01,01,01,$11,$11
3742   FB13 01 01 11 11 
3743   FB17 02 02 11 11        .DB 02,02,$11,$11,02,$12,00
3743   FB1B 02 12 00 
3744   FB1E             
3745   FB1E 00 08 10 18 STCODE .DB $00,$08,$10,$18,$20,$28,$30,$38
3745   FB22 20 28 30 38 
3746   FB26 40 48 50 58        .DB $40,$48,$50,$58,$60,$68,$70,$78
3746   FB2A 60 68 70 78 
3747   FB2E 80 88 90 98        .DB $80,$88,$90,$98,$AC,$A8,$B0,$B8
3747   FB32 AC A8 B0 B8 
3748   FB36 CC C8 D0 D8        .DB $CC,$C8,$D0,$D8,$EC,$E8,$F0,$F8
3748   FB3A EC E8 F0 F8 
3749   FB3E 0C 2C 4C 4C        .DB $0C,$2C,$4C,$4C,$8C,$AC,$CC,$EC
3749   FB42 8C AC CC EC 
3750   FB46 8A 9A AA BA        .DB $8A,$9A,$AA,$BA,$CA,$DA,$EA,$FA
3750   FB4A CA DA EA FA 
3751   FB4E 0E 2E 4E 6E        .DB $0E,$2E,$4E,$6E,$8E,$AE,$CE,$EE
3751   FB52 8E AE CE EE 
3752   FB56 0D 2D 4D 6D        .DB $0D,$2D,$4D,$6D,$8D,$AD,$CD,$ED
3752   FB5A 8D AD CD ED 
3753   FB5E 0D 0D 0C 0D TYPTB  .DB 13,13,12,13,14,13,12,13
3753   FB62 0E 0D 0C 0D 
3754   FB66 0D 0D 0C 0D        .DB 13,13,12,13,13,13,12,13
3754   FB6A 0D 0D 0C 0D 
3755   FB6E 0F 0D 0C 0D        .DB 15,13,12,13,9,13,12,13
3755   FB72 09 0D 0C 0D 
3756   FB76 08 0D 0C 0D        .DB 8,13,12,13,8,13,12,13
3756   FB7A 08 0D 0C 0D 
3757   FB7E 0F 06 0B 0B        .DB 15,6,11,11,4,10,8,8
3757   FB82 04 0A 08 08 
3758   FB86 0D 0D 0D 0D        .DB 13,13,13,13,13,15,13,15
3758   FB8A 0D 0F 0D 0F 
3759   FB8E 07 07 07 07        .DB 7,7,7,7,5,9,3,3
3759   FB92 05 09 03 03 
3760   FB96 01 01 01 01        .DB 1,1,1,1,2,1,1,1
3760   FB9A 02 01 01 01 
3761   FB9E             
3762   FB9E             ;PROGRAM STARTS HERE
3763   FB9E AD 25 A4    MNEENT LDA SAVPC       ;TRANSF PC TO ADDR
3764   FBA1 8D 1C A4           STA ADDR
3765   FBA4 AD 26 A4           LDA SAVPC+1
3766   FBA7 8D 1D A4           STA ADDR+1
3767   FBAA 20 24 EA    STARTM JSR CRCK        ;<CR> IF PRI PTR DIFF FROM 0
3768   FBAD A9 00              LDA #0
3769   FBAF 8D 37 A4           STA CODFLG
3770   FBB2 20 3E E8           JSR BLANK
3771   FBB5 20 DB E2           JSR WRITAZ      ;WRITE ADDRESS
3772   FBB8 20 3B E8           JSR BLANK2
3773   FBBB 20 3B E8           JSR BLANK2
3774   FBBE 4C 06 FE           JMP MNEM        ;JUMP TO INPUT MNEMONIC OPCODE
3775   FBC1 A9 00       MODEM  LDA #00         ;SET UP TO FORM MODE MATCH
3776   FBC3 8D 26 01           STA TMASK1
3777   FBC6 8D 27 01           STA TMASK2
3778   FBC9 20 3E E8           JSR BLANK
3779   FBCC AC 2E 01           LDY TYPE
3780   FBCF 38                 SEC
3781   FBD0 6E 26 01    PNTLUP ROR TMASK1      ;SHIFT POINTER TO INSTRUCTION TYPE
3782   FBD3 6E 27 01           ROR TMASK2
3783   FBD6 88                 DEY
3784   FBD7 D0 F7              BNE PNTLUP
3785   FBD9             
3786   FBD9             ;TEST FOR ONE BYTE INSTRUCTION
3787   FBD9 AC 2E 01           LDY TYPE
3788   FBDC C0 0D              CPY #$0D
3789   FBDE D0 05              BNE RDADDR
3790   FBE0 A2 00              LDX #00
3791   FBE2             
3792   FBE2             ;INPUT ADRESS FIELD
3793   FBE2 4C CB FC           JMP OPCOMP
3794   FBE5 A0 06       RDADDR LDY #06         ;CLEAR ADDRESS FIELD (NON HEX)
3795   FBE7 A9 51              LDA #'Q'
3796   FBE9 99 32 01    CLRLUP STA ADFLD-1,Y
3797   FBEC 88                 DEY
3798   FBED D0 FA              BNE CLRLUP      ;(LEAVES Y = 0 FOR NEXT PHASE)
3799   FBEF 20 5F E9           JSR RDRUP       ;WITH RUBOUT
3800   FBF2 C9 20              CMP #' '        ;IGNORE SPACE CHARACTERS
3801   FBF4 F0 EF              BEQ RDADDR
3802   FBF6 99 33 01    STORCH STA ADFLD,Y     ;STORE ADDRESS CHARACTER
3803   FBF9 C8                 INY
3804   FBFA C0 07              CPY #07
3805   FBFC B0 5C              BCS TRY56
3806   FBFE 20 5F E9           JSR RDRUP       ;READ REMAINDER OF ADDRESS CHARS
3807   FC01 C9 20              CMP #' '        ;THRU WHEN <SPACE> OR <CR>
3808   FC03 D0 05              BNE STOR1
3809   FC05 EE 37 A4           INC CODFLG      ;SET CODE FLG
3810   FC08 D0 04              BNE EVAL
3811   FC0A C9 0D       STOR1  CMP #CR         ;CHECK FOR <CR>
3812   FC0C D0 E8              BNE STORCH
3813   FC0E             
3814   FC0E             ;SEPARATE ADDRESS MODE FROM ADDRESS FIELD
3815   FC0E 8C 31 A4    EVAL   STY TEMPX       ;TEMPX NOW HAS NUMBER OF CHAR
3816   FC11 AD 33 01           LDA ADFLD       ;CHECK FIRST CHAR FOR # OR (
3817   FC14 C9 23              CMP #'#'
3818   FC16 F0 25              BEQ HATCJ
3819   FC18 C9 28              CMP #'('
3820   FC1A F0 5A              BEQ PAREN
3821   FC1C AD 31 A4           LDA TEMPX       ;CHECK FOR ACCUMULATOR MODE
3822   FC1F C9 01              CMP #01
3823   FC21 D0 05              BNE TRYZP
3824   FC23 A2 01       ACCUM  LDX #01
3825   FC25 4C CB FC           JMP OPCOMP
3826   FC28 C9 02       TRYZP  CMP #02         ;CHECK FOR ZERO PAGE MODE
3827   FC2A D0 14              BNE TRY34
3828   FC2C AD 2E 01           LDA TYPE        ;CHCK FOR BRNCH WITH RELATIVE ADDR`
3829   FC2F C9 0C              CMP #$0C
3830   FC31 D0 05              BNE ZPAGE
3831   FC33 A2 02              LDX #02
3832   FC35 4C CB FC           JMP OPCOMP
3833   FC38 A2 05       ZPAGE  LDX #05
3834   FC3A 4C CB FC           JMP OPCOMP
3835   FC3D 4C B6 FC    HATCJ  JMP HATCH
3836   FC40 A9 04       TRY34  LDA #04         ;CHECK FOR ABSOLUTE OR ZP,X ORZP,`
3837   FC42 CD 31 A4           CMP TEMPX
3838   FC45 90 15              BCC ABSIND
3839   FC47 A2 02              LDX #02
3840   FC49 20 F1 FD           JSR XORYZ       ;CC = X, CS = Y, NE = ABSOLUTE
3841   FC4C D0 58              BNE ABSOL
3842   FC4E 90 05              BCC ZPX
3843   FC50 A2 03       ZPY    LDX #03         ;CARRY SET SO ZP,Y MODE
3844   FC52 4C CB FC           JMP OPCOMP
3845   FC55 A2 04       ZPX    LDX #04         ;CARRY CLEAR SO ZP,X MODE
3846   FC57 4C CB FC           JMP OPCOMP
3847   FC5A B0 69       TRY56  BCS ERRORM
3848   FC5C 20 EF FD    ABSIND JSR XORY        ;CC=ABS,X   CS=ABS,Y  NE=ERROR
3849   FC5F D0 64              BNE ERRORM
3850   FC61 90 0F              BCC ABSX
3851   FC63 A9 09       ABSY   LDA #09
3852   FC65 CD 2E 01           CMP TYPE
3853   FC68 D0 04              BNE ABSY1
3854   FC6A A2 0E              LDX #$0E
3855   FC6C D0 5D              BNE OPCOMP
3856   FC6E A2 08       ABSY1  LDX #$08
3857   FC70 D0 59              BNE OPCOMP
3858   FC72 A2 09       ABSX   LDX #09         ;CARRY CLEAR SO ABS,X MODE
3859   FC74 D0 55              BNE OPCOMP
3860   FC76 AD 36 01    PAREN  LDA ADFLD+3     ;SEE IF (HH,X),(HH)Y OR (HHHH)
3861   FC79 C9 2C              CMP #','        ;(HHX) (HH),Y  ARE OK TOO
3862   FC7B F0 04              BEQ INDX        ;COMMA IN 4TH POSITION = (HH,X)
3863   FC7D C9 58              CMP #'X'        ;X IN 4TH POSITION = (HHX)
3864   FC7F D0 04              BNE TRYINY
3865   FC81 A2 0B       INDX   LDX #$0B
3866   FC83 D0 46              BNE OPCOMP
3867   FC85 C9 29       TRYINY CMP #')'        ;")" IN 4TH POS = (HH)Y OR (HH),Y
3868   FC87 D0 0B              BNE TRYJMP
3869   FC89 20 EF FD           JSR XORY        ;CHCK TO SEE IF Y INDEX REG DESIRE
3870   FC8C D0 37              BNE ERRORM
3871   FC8E 90 35              BCC ERRORM
3872   FC90 A2 0A              LDX #$0A
3873   FC92 D0 37              BNE OPCOMP
3874   FC94 AD 38 01    TRYJMP LDA ADFLD+5     ;CHECK FOR FINAL PAREN
3875   FC97 C9 29              CMP #')'
3876   FC99 D0 2A              BNE ERRORM
3877   FC9B AD 2E 01           LDA TYPE        ;CONFIRM CORRECT ADDRESS TYPE
3878   FC9E C9 0B              CMP #$0B
3879   FCA0 D0 23              BNE ERRORM
3880   FCA2 A2 0D              LDX #$0D        ;OK, FORM IS JMP (HHHH)
3881   FCA4 D0 25              BNE OPCOMP
3882   FCA6 AD 2E 01    ABSOL  LDA TYPE        ;CHECK FOR BRANCH TO ABSOLUTE LOC
3883   FCA9 C9 0C              CMP #$0C
3884   FCAB D0 05              BNE ABSOL1
3885   FCAD A2 02              LDX #02
3886   FCAF 4C CB FC           JMP OPCOMP
3887   FCB2 A2 0C       ABSOL1 LDX #$0C
3888   FCB4 D0 15              BNE OPCOMP
3889   FCB6             ;SELECT IMMEDIATE ADDRESSING TYPE
3890   FCB6 AD 2E 01    HATCH  LDA TYPE
3891   FCB9 C9 01              CMP #01
3892   FCBB F0 04              BEQ IMMED1
3893   FCBD A2 07              LDX #07
3894   FCBF D0 0A              BNE OPCOMP
3895   FCC1 A2 06       IMMED1 LDX #06
3896   FCC3 D0 06              BNE OPCOMP
3897   FCC5 20 94 E3    ERRORM JSR CKER00      ;OUTPUT ERROR MESSAGE
3898   FCC8 4C AA FB           JMP STARTM
3899   FCCB             
3900   FCCB             ;COMPUTE FINAL OP CODE FOR DEFINED ADDRESING MODE
3901   FCCB BD E2 FA    OPCOMP LDA TYPTR1,X    ;MATCH TYPE MASK WITH VALID MODE
3902   FCCE F0 05              BEQ OPCMP1      ;PATTERNS & SKIP 1ST WORD TEST IF
3903   FCD0 2D 26 01           AND TMASK1      ;ALREADY ZERO
3904   FCD3 D0 08              BNE VALID
3905   FCD5 BD F1 FA    OPCMP1 LDA TYPTR2,X    ;TEST 2ND PART
3906   FCD8 2D 27 01           AND TMASK2      ;INST DOES NOT HAVE SPECIFIED MODE
3907   FCDB F0 E8              BEQ ERRORM
3908   FCDD 18          VALID  CLC             ;FORM FINAL OP CODE
3909   FCDE BD 00 FB           LDA CORR,X
3910   FCE1 6D 34 A4           ADC OPCODE
3911   FCE4 8D 34 A4           STA OPCODE
3912   FCE7             
3913   FCE7             ;PROCESS ADRESSES TO FINAL FORMAT
3914   FCE7 BD 0F FB           LDA SIZEM,X     ;OBTAIN ADDRESS FORMAT FROM TABLE
3915   FCEA C9 00              CMP #00
3916   FCEC F0 50              BEQ ONEBYT
3917   FCEE C9 0F              CMP #$0F        ;NEED BRANCH COMPUTATION?
3918   FCF0 F0 1D              BEQ BRNCHC
3919   FCF2 8D 33 A4           STA TEMPA       ;SAVE START POINT & CHAR COUNT
3920   FCF5 29 0F              AND #$0F        ;SEPARATE CHARACTER COUNT
3921   FCF7 A8                 TAY             ;LOAD ADDR BYTES INTO Y (0,1,OR 2)
3922   FCF8 8D 2F A4           STA BYTESM      ;SAVE IN BYTES
3923   FCFB EE 2F A4           INC BYTESM      ;TO INSTR LENGTH (1,2,OR 3 BYTES)
3924   FCFE AD 33 A4           LDA TEMPA       ;SEPARATE STARTING POINT
3925   FD01 29 F0              AND #$F0
3926   FD03 4A                 LSR A
3927   FD04 4A                 LSR A
3928   FD05 4A                 LSR A
3929   FD06 4A                 LSR A
3930   FD07 AA                 TAX             ;AND PUT IT IN X
3931   FD08 20 12 FD           JSR CONVRT      ;CONVERT ASCII ADDRESS TO HEX
3932   FD0B B0 B8              BCS ERRORM      ;SKIP OUT IF ERROR IN INPUT
3933   FD0D 90 1D              BCC STASH
3934   FD0F 4C 86 FD    BRNCHC JMP BRCOMP
3935   FD12             
3936   FD12             ;############ SUBROUTINE ###############
3937   FD12             ;CONVERT FORMATTED ADDRESS INTO PROPER HEX ADDRESS
3938   FD12 BD 33 01    CONVRT LDA ADFLD,X     ;PICK UP 1ST ADDRES CHARACTER
3939   FD15 20 7D EA           JSR HEX         ;CONVERT TO MOST SIG HEX
3940   FD18 B0 11              BCS ERRFLG
3941   FD1A E8                 INX             ;GET NEXT ASCII CHARACTER
3942   FD1B BD 33 01           LDA ADFLD,X
3943   FD1E E8                 INX             ;POINT TO NEXT CHARACTER, IF ANY
3944   FD1F 20 84 EA           JSR PACK
3945   FD22 B0 07              BCS ERRFLG
3946   FD24 99 34 A4           STA OPCODE,Y    ;SAVE IN MOST SIG. BYTE LOCATION
3947   FD27 88                 DEY             ;SET UP FOR NEXT ADDR BYTE, IF ANY
3948   FD28 D0 E8              BNE CONVRT      ;IF NECESSARY, FORM NEXT ADDR BYTE
3949   FD2A 18                 CLC
3950   FD2B 60          ERRFLG RTS             ;NON HEX CLEARED CARRY
3951   FD2C             ;#############
3952   FD2C             
3953   FD2C AC 2F A4    STASH  LDY BYTESM      ;SET UP TO STORE COMMAND
3954   FD2F 88                 DEY
3955   FD30 B9 34 A4    STSHLP LDA OPCODE,Y
3956   FD33 20 78 EB           JSR SADDR       ;STORE ONE BYTE OF COMMAND
3957   FD36 C0 00              CPY #00
3958   FD38 F0 0B              BEQ FORMDS
3959   FD3A 88                 DEY
3960   FD3B B8                 CLV
3961   FD3C 50 F2              BVC STSHLP      ;REPEAT TILL THRU
3962   FD3E             
3963   FD3E A9 01       ONEBYT LDA #01         ;SET BYTES = 1
3964   FD40 8D 2F A4           STA BYTESM
3965   FD43 D0 E7              BNE STASH
3966   FD45             
3967   FD45             ;FORMAT FOR SYSTEM 65 DISPLAY (REFORMAT FOR AIM)
3968   FD45 20 44 EB    FORMDS JSR CLR
3969   FD48 20 DD E5           JSR CGPC1       ;ADDR TO SAVPC FOR  DISASSEMBLY
3970   FD4B 20 42 E8           JSR TTYTST      ;IF TTY DO NOT GO TO DISASS
3971   FD4E D0 08              BNE FORMD1
3972   FD50 20 3B E8           JSR BLANK2      ;IT IS TTY
3973   FD53 20 3B E8           JSR BLANK2
3974   FD56 D0 11              BNE FORMD2      ;OUTPUT OPCODE
3975   FD58 20 6C F4    FORMD1 JSR DISASM
3976   FD5B 20 24 EA           JSR CRCK        ;<CR> IF PRI PTR DIFF FROM 0
3977   FD5E AD 37 A4           LDA CODFLG      ;SEE IF HE WANTS CODE ALSO
3978   FD61 F0 1A              BEQ FORM1
3979   FD63 20 3E E8           JSR BLANK
3980   FD66 20 3C F5           JSR PRPC        ;PROG CNTR
3981   FD69             ;OUTPUT OPCODE
3982   FD69 AE 2F A4    FORMD2 LDX BYTESM
3983   FD6C A0 00              LDY #00
3984   FD6E A9 1C       DISPLY LDA #ADDR%256       ;DO LDA (ADDR),Y ,WHITOUT PAG 0
3985   FD70 20 58 EB           JSR LDAY
3986   FD73 20 46 EA           JSR NUMA
3987   FD76 20 3E E8           JSR BLANK
3988   FD79 C8                 INY
3989   FD7A CA                 DEX
3990   FD7B D0 F1              BNE DISPLY
3991   FD7D             
3992   FD7D             ;POINT TO NEXT INSTRUCTION LOCATION
3993   FD7D AC 2F A4    FORM1  LDY BYTESM      ;ADD BYTESM TO ADDR
3994   FD80 20 CD E2           JSR NXTADD
3995   FD83 4C 24 FF           JMP PATC16      ;UPDATE PC
3996   FD86             
3997   FD86             ;RELATIVE BRANCH ADDRESS COMPUTATION
3998   FD86 AD 31 A4    BRCOMP LDA TEMPX
3999   FD89 C9 02              CMP #02         ;IF REL BRANCH INPUT, USE IT
4000   FD8B D0 11              BNE COMPBR
4001   FD8D A2 00              LDX #00
4002   FD8F A0 01              LDY #01
4003   FD91 20 12 FD           JSR CONVRT
4004   FD94 B0 40              BCS ERRJMP
4005   FD96 A9 02              LDA #02
4006   FD98 8D 2F A4           STA BYTESM      ;SET PROPER BYTES
4007   FD9B 4C 2C FD           JMP STASH
4008   FD9E A2 00       COMPBR LDX #00
4009   FDA0 A0 02              LDY #02
4010   FDA2 20 12 FD           JSR CONVRT
4011   FDA5 B0 2F              BCS ERRJMP
4012   FDA7 AD 1D A4           LDA ADDR+1      ;ADD BRANCH OFFSET
4013   FDAA 8D 27 01           STA MOVAD+1
4014   FDAD AD 1C A4           LDA ADDR
4015   FDB0 18                 CLC
4016   FDB1 69 02              ADC #02
4017   FDB3 8D 26 01           STA MOVAD
4018   FDB6 90 03              BCC CMPBR1
4019   FDB8 EE 27 01           INC MOVAD+1
4020   FDBB 38          CMPBR1 SEC             ;COMPUTE BRANCH RELATIVE ADDRESS
4021   FDBC AD 35 A4           LDA OPCODE+1
4022   FDBF ED 26 01           SBC MOVAD
4023   FDC2 8D 35 A4           STA OPCODE+1
4024   FDC5 AD 36 A4           LDA OPCODE+2
4025   FDC8 ED 27 01           SBC MOVAD+1
4026   FDCB 8D 36 A4           STA OPCODE+2
4027   FDCE C9 00              CMP #00
4028   FDD0 F0 0E              BEQ FORWRD
4029   FDD2 C9 FF              CMP #$FF
4030   FDD4 F0 03              BEQ BACKWD
4031   FDD6 4C C5 FC    ERRJMP JMP ERRORM
4032   FDD9 AD 35 A4    BACKWD LDA OPCODE+1    ;CHECK IN RANGE
4033   FDDC 30 09              BMI OK
4034   FDDE 10 F6              BPL ERRJMP
4035   FDE0 AD 35 A4    FORWRD LDA OPCODE+1
4036   FDE3 10 02              BPL OK
4037   FDE5 30 EF              BMI ERRJMP
4038   FDE7 A9 02       OK     LDA #02         ;SET UP FOR STASH
4039   FDE9 8D 2F A4           STA BYTESM
4040   FDEC 4C 2C FD           JMP STASH
4041   FDEF             
4042   FDEF             ;###### SUBROUTINE ########
4043   FDEF             ;SUBROUTINE FOR DETERMINING X OR Y OR NEITHER
4044   FDEF A2 04       XORY   LDX #04
4045   FDF1 BD 33 01    XORYZ  LDA ADFLD,X
4046   FDF4 C9 2C              CMP #','
4047   FDF6 D0 04              BNE XORY1
4048   FDF8 E8                 INX
4049   FDF9 BD 33 01           LDA ADFLD,X
4050   FDFC C9 58       XORY1  CMP #'X'
4051   FDFE F0 03              BEQ ISX
4052   FE00 C9 59              CMP #'Y'
4053   FE02             XORYRT
4054   FE02 60                 RTS             ;NOT ZERO IS NOT X OR NOT Y
4055   FE03 18          ISX    CLC             ;CARRY SET IS Y
4056   FE04 90 FC              BCC XORYRT      ; CARRY CLEAR IS X
4057   FE06             ;####### END OF SUB ########
4058   FE06             
4059   FE06             ; INPUT FOR MNEMONIC CODE
4060   FE06 A0 00       MNEM   LDY #00
4061   FE08 8C 34 A4           STY OPCODE
4062   FE0B 8C 35 A4           STY OPCODE+1
4063   FE0E 8C 36 A4           STY OPCODE+2    ;CLEARS OPCODE FOR NEW INPUT
4064   FE11 8C 26 01           STY MOVAD       ;CLEARS UNUSED BIT IN FINAL FORMAT
4065   FE14 20 5F E9    RDLUP  JSR RDRUP
4066   FE17 C9 2A              CMP #'*'        ;COMMAND TO LOAD POINTER
4067   FE19 F0 58              BEQ STLOAD      ;GO TO SET CURRENT ADDRESS POINTER
4068   FE1B C9 20              CMP #' '        ;IGNORE SPACE BAR INPUT
4069   FE1D F0 F5              BEQ RDLUP
4070   FE1F 29 1F              AND #$1F        ;MASK OFF UPPER 3 BITS
4071   FE21 99 30 01           STA CH,Y
4072   FE24 98                 TYA
4073   FE25 AA                 TAX             ;Y----> X
4074   FE26 FE 30 01           INC CH,X        ;FORMAT TO MATCH DISASSEMBLER TBL
4075   FE29 C8                 INY
4076   FE2A C0 03              CPY #03         ;REPEAT FOR EACH OF 3 CHARACTERS
4077   FE2C D0 E6              BNE RDLUP
4078   FE2E             
4079   FE2E             ;COMPRESS 3 FORMATED CHARACTERS TO MOVAD & MOVAD+1
4080   FE2E A0 03              LDY #03         ;SET UP OUTER LOOP
4081   FE30 B9 2F 01    OUTLUP LDA CH-1,Y      ;COMPRESS 3 CHARACTERS
4082   FE33 A2 05              LDX #05         ;SET UP INNER LOOP
4083   FE35 4A          INLUP  LSR A           ;SHIFT 5 BITS ACC TO MOVAD,MOVAD+1
4084   FE36 6E 26 01           ROR MOVAD
4085   FE39 6E 27 01           ROR MOVAD+1
4086   FE3C CA                 DEX
4087   FE3D D0 F6              BNE INLUP
4088   FE3F 88                 DEY
4089   FE40 D0 EE              BNE OUTLUP
4090   FE42             
4091   FE42             ;SEARCH FOR MATCHING COMPRESSED CODE
4092   FE42 A2 40              LDX #$40
4093   FE44 AD 26 01    SRCHLP LDA MOVAD
4094   FE47 DD B8 F5    SRCHM  CMP MNEML-1,X   ;MATCH LEFT HALF
4095   FE4A F0 05              BEQ MATCH
4096   FE4C CA                 DEX
4097   FE4D D0 F8              BNE SRCHM       ;IF NO - TRY AGAIN
4098   FE4F F0 0B              BEQ MATCH1
4099   FE51 AD 27 01    MATCH  LDA MOVAD+1     ;ALSO MATCH RIGHT HALF
4100   FE54 DD F8 F5           CMP MNEMR-1,X
4101   FE57 F0 06              BEQ GOTIT
4102   FE59 CA                 DEX
4103   FE5A D0 E8              BNE SRCHLP
4104   FE5C 4C C5 FC    MATCH1 JMP ERRORM
4105   FE5F             
4106   FE5F             ;GET INSTRUCTION TYPE FROM TYPE TABLE
4107   FE5F BD 5D FB    GOTIT  LDA TYPTB-1,X
4108   FE62 8D 2E 01           STA TYPE
4109   FE65             
4110   FE65             ;GET OPCODE FROM OP CODE UE
4111   FE65 BD 1D FB           LDA STCODE-1,X
4112   FE68 8D 34 A4           STA OPCODE
4113   FE6B 4C C1 FB           JMP MODEM
4114   FE6E             
4115   FE6E             ;THIS SECTION SETS THE CURRENT ADDRESS POINTER
4116   FE6E A9 2A       STLO   LDA #'*'
4117   FE70 20 7A E9           JSR OUTPUT
4118   FE73 20 AE EA    STLOAD JSR ADDIN       ;GET ADDR
4119   FE76 B0 F6              BCS STLO        ;IN CASE OF ERROR
4120   FE78 4C 24 FF           JMP PATC16      ;ADDR TO PC THEN TO STARTM
4121   FE7B             
4122   FE7B             ;PATCHES TO CORRECT PROBLEMS WITHOUT
4123   FE7B             ;CHANGING ENTRY POINTS TO THE ROUTINES
4124   FE7B 41                 .DB "A"
4125   FE7C 38          PATCH1 SEC             ;ADJUST BAUD
4126   FE7D E9 2C              SBC #44
4127   FE7F 8D 18 A4           STA CNTL30
4128   FE82 60                 RTS
4129   FE83             
4130   FE83 8A          CUREAD TXA             ;SAVE X  , OUTPUT CUR
4131   FE84 48                 PHA
4132   FE85 AE 15 A4           LDX CURPO2
4133   FE88 E0 14              CPX #20         ;ONLY IF < 20
4134   FE8A B0 05              BCS PAT2A
4135   FE8C A9 DE              LDA #$DE
4136   FE8E 20 7B EF           JSR OUTDD1
4137   FE91 68          PAT2A  PLA
4138   FE92 AA                 TAX
4139   FE93 4C 3C E9           JMP READ        ;CONTINUE
4140   FE96             
4141   FE96 20 3C E9    RED1   JSR READ        ;READ & ECHO WITHOUT CURSOR
4142   FE99 4C 76 E9           JMP RED2
4143   FE9C             
4144   FE9C AE 15 A4    PATCH4 LDX CURPO2      ;DONT DO ANYTHING IF "8D"
4145   FE9F C9 8D              CMP #CR+$80     ;SO <CR> FOR TV & NOT FOR DISP
4146   FEA1 D0 0B              BNE PAT4A
4147   FEA3 A9 A0              LDA #' '+$80    ;CLR CURSOR
4148   FEA5 20 7B EF           JSR OUTDD1
4149   FEA8 20 44 EB           JSR CLR         ;CLR PNTRS
4150   FEAB 4C 76 EF           JMP OUTD7       ;EXIT
4151   FEAE 4C 17 EF    PAT4A  JMP OUTD1A      ;CONTINUE
4152   FEB1             
4153   FEB1 8D 11 A4    PATCH5 STA PRIFLG      ;TURN PRI OFF
4154   FEB4 4C 90 F0           JMP IPO3
4155   FEB7             
4156   FEB7 A9 1C       PATCH6 LDA #ADDR%256       ;SIMULATE LDA (ADDR),Y
4157   FEB9 4C 58 EB           JMP LDAY
4158   FEBC             
4159   FEBC 20 3C E9    PATCH8 JSR READ        ;READ & ECHO WITH CARROTS
4160   FEBF 48                 PHA
4161   FEC0 20 D8 E7           JSR EQUAL
4162   FEC3 A9 3C              LDA #'<'
4163   FEC5 20 7A E9           JSR OUTPUT
4164   FEC8 68                 PLA
4165   FEC9 48                 PHA
4166   FECA C9 0D              CMP #CR
4167   FECC F0 03              BEQ PATC8C
4168   FECE 20 7A E9           JSR OUTPUT
4169   FED1 A9 3E       PATC8C LDA #'>'
4170   FED3 20 7A E9           JSR OUTPUT
4171   FED6 68                 PLA
4172   FED7 60                 RTS
4173   FED8             
4174   FED8 C9 F7       PATCH9 CMP #$F7        ;CHCK LOWER TRANSITION OF TIMER
4175   FEDA B0 06              BCS PAT9A
4176   FEDC CD 08 A4           CMP TSPEED
4177   FEDF 4C 9D EE           JMP CKF3A
4178   FEE2 CD 08 A4    PAT9A  CMP TSPEED
4179   FEE5 68                 PLA
4180   FEE6 C9 FF              CMP #$FF
4181   FEE8 60          PAT9B  RTS
4182   FEE9             
4183   FEE9 20 F0 E9    PATC10 JSR CRLF        ;CLR DISP (ONLY 1 <CR>)
4184   FEEC 4C 85 E1           JMP STA1
4185   FEEF             
4186   FEEF F0 F7       PATC11 BEQ PAT9B       ;GO OUTPUT PROMPT
4187   FEF1 C9 4C              CMP #'L'        ;NO PROMPT FOR "T" OR "L"
4188   FEF3 F0 F3              BEQ PAT9B
4189   FEF5 4C C5 E7           JMP PROMP1
4190   FEF8             
4191   FEF8 48          PATC12 PHA             ;CLEAR PRIFLG SO WE CAN OUTPUT
4192   FEF9 AD 11 A4           LDA PRIFLG      ;TO PRINTER IF FLG WAS ON (MSB)
4193   FEFC 29 F0              AND #$F0
4194   FEFE 8D 11 A4           STA PRIFLG
4195   FF01 68                 PLA
4196   FF02 60                 RTS
4197   FF03             
4198   FF03 AD 12 A4    PATC13 LDA INFLG       ;TURN TAPES ON ONLY IF TAPES
4199   FF06 C9 54              CMP #'T'
4200   FF08 D0 DE              BNE PAT9B
4201   FF0A 4C 29 E5           JMP DU14        ;TURN ON TAPES & SET DEF DEV
4202   FF0D             
4203   FF0D AD 13 A4    PATC14 LDA OUTFLG      ;TURN ON TAPES ONLY IF TAPES
4204   FF10 C9 54              CMP #'T'
4205   FF12 D0 D4              BNE PAT9B
4206   FF14 4C 0A E5           JMP DU11
4207   FF17             
4208   FF17 20 F0 E9    PATC15 JSR CRLF        ;DECODE COMMAND
4209   FF1A 8A                 TXA             ;SAVE INDEX
4210   FF1B 0A                 ASL A
4211   FF1C AA                 TAX
4212   FF1D BD B8 FA           LDA JTBL,X      ;PART OF ENTRY
4213   FF20 8D 1A A4           STA S1
4214   FF23 60                 RTS
4215   FF24             
4216   FF24 20 DD E5    PATC16 JSR CGPC1       ;ADDR TO PC
4217   FF27 4C AA FB           JMP STARTM      ;BACK TO MNEMONIC START
4218   FF2A             
4219   FF2A F0 0E       PATC17 BEQ PAT17B      ;RUB, SO READ ANOTHER
4220   FF2C C9 00              CMP #0
4221   FF2E F0 03              BEQ PAT17A
4222   FF30 4C 85 F7           JMP IN02A       ;NEITHER ,CONTINUE
4223   FF33 20 93 E9    PAT17A JSR INALL       ;SKIP ON ZEROS
4224   FF36 C9 7F              CMP #$7F        ;UNTILL RUB
4225   FF38 D0 F9              BNE PAT17A
4226   FF3A 4C 7A F7    PAT17B JMP IN02        ;GO BACK
4227   FF3D             
4228   FF3D 20 F8 FE    PATC18 JSR PATC12      ;RESET PRIFLG
4229   FF40 48                 PHA
4230   FF41 20 42 E8           JSR TTYTST      ;IF TTY JUST RTN
4231   FF44 D0 02              BNE PAT18A
4232   FF46 68                 PLA
4233   FF47 60                 RTS
4234   FF48 20 FE E8    PAT18A JSR LL          ;SET TO LOW SPEED
4235   FF4B 20 45 F0           JSR IPST        ;PRINT WHAT IS IN BUFFER
4236   FF4E 20 44 EB           JSR CLR         ;CLR PRINTER BUFFER BY OUTPUTTING
4237   FF51 20 3E E8           JSR BLANK       ;AN SPACE
4238   FF54 20 44 EB           JSR CLR
4239   FF57 68                 PLA             ;RTN ACC
4240   FF58 60                 RTS
4241   FF59             
4242   FF59 D8          PAT19  CLD
4243   FF5A 20 24 EA           JSR CRCK
4244   FF5D 4C 85 E1           JMP STA1
4245   FF60             
4246   FF60 F0 0D       PAT20  BEQ VECK4       ;END (DATA BYTES=0)
4247   FF62 18                 CLC
4248   FF63 69 04              ADC #4
4249   FF65 AA                 TAX
4250   FF66 20 93 E9    VECK5  JSR INALL       ;SKIP OVER DATA
4251   FF69 CA                 DEX
4252   FF6A D0 FA              BNE VECK5
4253   FF6C 4C 9E E6           JMP VECK1       ;PROCESS NEXT RCD
4254   FF6F 4C 20 E5    VECK4  JMP DU13
4255   FF72             
4256   FF72 A0 00       PAT21  LDY #0
4257   FF74 B9 88 FF    PAT21A LDA POMSG,Y     ;RESET MSG
4258   FF77 F0 06              BEQ PAT21B
4259   FF79 20 7A E9           JSR OUTPUT
4260   FF7C C8                 INY
4261   FF7D D0 F5              BNE PAT21A
4262   FF7F 20 F0 E9    PAT21B JSR CRLF
4263   FF82 20 F0 E9           JSR CRLF
4264   FF85 4C 82 E1           JMP START
4265   FF88             
4266   FF88 20 20 52 4F POMSG  .DB "  ROCKWELL AIM 65"
4266   FF8C 43 4B 57 45 
4266   FF90 4C 4C 20 41 
4266   FF94 49 4D 20 36 
4266   FF98 35 
4267   FF99 00                 .DB 0
4268   FF9A             
4269   FF9A EE 68 01    PAT22  INC BLKO
4270   FF9D 4C BD ED           JMP ADDBK1
4271   FFA0             
4272   FFA0 A9 FF       PAT23  LDA #$FF        ;START TIMER
4273   FFA2 8D F7 A4           STA DI1024
4274   FFA5 AD E5 A4    PAT23A LDA RINT        ;TIME OUT?
4275   FFA8 30 08              BMI PAT23B      ;YES
4276   FFAA AD CD A4           LDA IFR         ;START SIGNAL?
4277   FFAD 29 10              AND #MPRST
4278   FFAF F0 F4              BEQ PAT23A      ;NO
4279   FFB1 60                 RTS             ;YES
4280   FFB2 A9 00       PAT23B LDA #0          ;TIME OUT RETURN
4281   FFB4 60                 RTS
4282   FFB5             
4283   FFB5 20 75 EE    PATC24 JSR CKFREQ      ;READ BIT FROM FOURTH HALF PULSE
4284   FFB8 6A                 ROR A
4285   FFB9 29 80              AND #$80
4286   FFBB 60                 RTS
4287   FFBC             
4288   FFBC 2C CD A4    PATC25 BIT IFR         ;WAIT TILL TIMES OUT
4289   FFBF 50 FB              BVC PATC25
4290   FFC1 AD C4 A4           LDA T1L         ;CLR INTERRUPT FLG
4291   FFC4 60                 RTS
4292   FFC5             
4293   FFF9                    *=$FFF9
4294   FFF9             ;INTERRUPT VECTORS
4295   FFF9 FA                 .DB $FA
4296   FFFA 75 E0 BF E0        .DW NMIV1,RSET,IRQV1    ;SET UP VECTORS
4296   FFFE 78 E0 
4297   10000             ;.END A0/1
4298   10000             SEMICOLON =$3B
4299   10000             BACKSLASH =$5C
4300   10000                    .END M1
tasm: Number of errors = 0
